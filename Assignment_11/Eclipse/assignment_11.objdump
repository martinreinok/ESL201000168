
assignment_11.elf:     file format elf32-littlenios2
assignment_11.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00005ddc memsz 0x00005ddc flags r-x
    LOAD off    0x00006dfc vaddr 0x0000ddfc paddr 0x0000e140 align 2**12
         filesz 0x00000344 memsz 0x00000344 flags rw-
    LOAD off    0x00007484 vaddr 0x0000e484 paddr 0x0000e484 align 2**12
         filesz 0x00000000 memsz 0x000002fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005a94  000081b8  000081b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001b0  0000dc4c  0000dc4c  00006c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000344  0000ddfc  0000e140  00006dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002fc  0000e484  0000e484  00007484  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007140  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009f8  00000000  00000000  00007168  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000d9cf  00000000  00000000  00007b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000553e  00000000  00000000  0001552f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004821  00000000  00000000  0001aa6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000128c  00000000  00000000  0001f290  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000022d6  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000049e6  00000000  00000000  000227f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  000271d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000540  00000000  00000000  000271f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0002a217  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0002a21a  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0002a21d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0002a21e  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0002a21f  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0002a223  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0002a227  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0002a22b  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0002a234  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0002a23d  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000010  00000000  00000000  0002a246  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000046  00000000  00000000  0002a256  2**0
                  CONTENTS, READONLY
 28 .jdi          00004e44  00000000  00000000  0002a29c  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003bf31  00000000  00000000  0002f0e0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b8 l    d  .text	00000000 .text
0000dc4c l    d  .rodata	00000000 .rodata
0000ddfc l    d  .rwdata	00000000 .rwdata
0000e484 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/esl1-5/Desktop/ESL201000168/Assignment_11/assignment_11_bsp//obj/HAL/src/crt0.o
000081f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Paninteg.c
00000000 l    df *ABS*	00000000 Panmodel.c
00000000 l    df *ABS*	00000000 Pansubmod.c
00000000 l    df *ABS*	00000000 Tiltinteg.c
00000000 l    df *ABS*	00000000 Tiltmodel.c
00000000 l    df *ABS*	00000000 Tiltsubmod.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 xxfuncs.c
00000000 l    df *ABS*	00000000 xxinverse.c
00000000 l    df *ABS*	00000000 xxmatrix.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
0000a2e8 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000ddfc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000c088 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
0000c1b8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000c30c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000c44c l     F .text	00000038 alt_dev_reg
0000dedc l     O .rwdata	0000002c jtag_uart
0000df08 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c75c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000c918 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000ca28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
0000cb54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000cc8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ccb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d0a0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000d1f8 l     F .text	00000050 alt_get_errno
0000d248 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000e0f4 g     O .rwdata	00000004 Pan_number_of_outputs
00009908 g     F .text	0000003c TiltCopyVariablesToOutputs
0000c2a4 g     F .text	00000068 alt_main
0000b63c g     F .text	00000044 __ashldi3
0000e4ac g     O .bss	00000004 Tilt_steps
0000b728 g     F .text	00000080 _puts_r
0000e680 g     O .bss	00000100 alt_irq
0000e4d0 g     O .bss	00000050 Pan_V
0000e140 g       *ABS*	00000000 __flash_rwdata_start
00008500 g     F .text	00000034 PanModelInitialize
00008bec g     F .text	0000001c PanModelTerminate
00009894 g     F .text	00000074 TiltCopyInputsToVariables
0000b6dc g     F .text	0000004c printf
00009efc g     F .text	00000038 XXDouble2String
0000e109 g     O .rwdata	00000001 Tilt_major
0000a0c4 g     F .text	0000013c __divsf3
0000e520 g     O .bss	00000038 Pan_P
0000e484 g     O .bss	00000008 Pan_start_time
00009084 g     F .text	0000007c TiltModelInitialize_states
00009bf8 g     F .text	000000bc convertTiltToRadian
0000ab88 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
0000e5a0 g     O .bss	00000060 Tilt_V
00008000 g     F .entry	0000001c __reset
0000e558 g     O .bss	00000018 Pan_I
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000e4b4 g     O .bss	00000004 errno
0000adf0 g     F .text	00000038 __make_dp
00008c60 g     F .text	0000005c PanCopyVariablesToOutputs
0000e4bc g     O .bss	00000004 alt_argv
000160dc g       *ABS*	00000000 _gp
0000df5c g     O .rwdata	00000180 alt_fd_list
00009ebc g     F .text	00000040 XXString2Double
00009b3c g     F .text	000000bc convertPanToRadian
0000856c g     F .text	0000001c PanCalculateInput
0000e600 g     O .bss	00000018 Tilt_I
0000d6cc g     F .text	00000090 alt_find_dev
0000ac48 g     F .text	000000d4 __floatsidf
0000d180 g     F .text	00000078 alt_io_redirect
0000abec g     F .text	0000005c __ltdf2
00008320 g     F .text	000000e0 PanModelInitialize_parameters
00008588 g     F .text	000005ec PanCalculateDynamic
00009038 g     F .text	0000004c TiltModelInitialize_initialvalues
00008bd0 g     F .text	0000001c PanCalculateFinal
0000b7a8 g     F .text	00000014 puts
0000e49c g     O .bss	00000008 Tilt_start_time
00008c08 g     F .text	00000058 PanCopyInputsToVariables
0000c5d0 g     F .text	000000f4 altera_avalon_jtag_uart_read
00009188 g     F .text	0000001c TiltCalculateStatic
0000b6a0 g     F .text	0000003c _printf_r
0000c1a8 g     F .text	00000008 __udivsi3
0000d944 g     F .text	0000008c alt_icache_flush
0000e12c g     O .rwdata	00000004 alt_max_fd
0000b3fc g     F .text	00000104 __unpack_d
0000a2a4 g     F .text	00000044 __extendsfdf2
0000e48c g     O .bss	00000008 Pan_time
0000a63c g     F .text	00000054 __adddf3
00008220 g     F .text	0000001c PanDiscreteTerminate
0000e114 g     O .rwdata	00000004 _global_impure_ptr
0000e780 g       *ABS*	00000000 __bss_end
0000cfb0 g     F .text	000000f0 alt_iic_isr_register
0000d5a8 g     F .text	00000104 alt_tick
0000844c g     F .text	0000007c PanModelInitialize_states
00008e58 g     F .text	0000001c TiltDiscreteTerminate
00008f58 g     F .text	000000e0 TiltModelInitialize_parameters
0000cf64 g     F .text	0000004c alt_ic_irq_enabled
00008550 g     F .text	0000001c PanCalculateStatic
0000d510 g     F .text	00000098 alt_alarm_stop
0000e4c4 g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000cc alt_irq_handler
0000df34 g     O .rwdata	00000028 alt_dev_null
0000b110 g     F .text	000000c8 __unpack_f
0000e0f0 g     O .rwdata	00000004 Pan_number_of_inputs
0000cc70 g     F .text	0000001c alt_dcache_flush_all
0000ad1c g     F .text	000000d4 __fixdfsi
0000823c g     F .text	000000e4 PanDiscreteStep
0000e140 g       *ABS*	00000000 __ram_rwdata_end
0000e124 g     O .rwdata	00000008 alt_dev_list
0000c35c g     F .text	000000f0 write
00008cbc g     F .text	000000a0 PanInitializeSubmodel
000091c0 g     F .text	00000660 TiltCalculateDynamic
0000e110 g     O .rwdata	00000004 Tilt_number_of_outputs
0000ddfc g       *ABS*	00000000 __ram_rodata_end
0000b5f8 g     F .text	00000044 __lshrdi3
0000e108 g     O .rwdata	00000001 Tilt_initialize
0000c1b0 g     F .text	00000008 __umodsi3
0000985c g     F .text	0000001c TiltCalculateFinal
0000e780 g       *ABS*	00000000 end
0000afe4 g     F .text	0000012c __pack_f
0000ca78 g     F .text	000000dc altera_avalon_uart_write
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000c7d0 g     F .text	00000088 alt_avalon_timer_sc_init
0000c8b8 g     F .text	00000060 altera_avalon_uart_write_fd
0000af38 g     F .text	000000ac __clzsi2
0000c6c4 g     F .text	00000098 altera_avalon_jtag_uart_write
0000e10c g     O .rwdata	00000004 Tilt_number_of_inputs
0000b7e4 g     F .text	00000734 ___vfprintf_internal_r
0000da38 g     F .text	000001d8 __call_exitprocs
000081b8 g     F .text	0000003c _start
0000e4c8 g     O .bss	00000004 _alt_tick_rate
0000e498 g     O .bss	00000001 Pan_stop_simulation
0000e100 g     O .rwdata	00000008 Tilt_step_size
0000e4cc g     O .bss	00000004 _alt_nticks
0000c4b8 g     F .text	00000058 alt_sys_init
0000a200 g     F .text	000000a4 __floatsisf
00009820 g     F .text	0000003c TiltCalculateOutput
00008dc4 g     F .text	00000068 PanTerminateSubmodel
0000b5d0 g     F .text	00000028 __mulsi3
0000ddfc g       *ABS*	00000000 __ram_rwdata_start
0000dc4c g       *ABS*	00000000 __ram_rodata_start
000091a4 g     F .text	0000001c TiltCalculateInput
0000e0ec g     O .rwdata	00000001 Pan_initialize
0000c510 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000d870 g     F .text	000000d4 alt_get_fd
0000b500 g     F .text	000000d0 __fpcmp_parts_d
0000d9f0 g     F .text	00000048 memcmp
0000e780 g       *ABS*	00000000 __alt_stack_base
0000e618 g     O .bss	00000038 Tilt_P
0000a9d4 g     F .text	000001b4 __divdf3
0000a6f0 g     F .text	000002e4 __muldf3
0000dc9c g     O .rodata	00000010 __thenan_sf
0000d75c g     F .text	00000114 alt_find_file
0000cd08 g     F .text	000000a0 alt_dev_llist_insert
0000bf3c g     F .text	000000e0 __sfvwrite_small_dev
0000e484 g       *ABS*	00000000 __bss_start
0000e650 g     O .bss	00000018 Tilt_R
0000b680 g     F .text	00000020 memset
00009cb4 g     F .text	00000208 main
0000e4c0 g     O .bss	00000004 alt_envp
00009878 g     F .text	0000001c TiltModelTerminate
0000c570 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e570 g     O .bss	00000018 Pan_R
0000e130 g     O .rwdata	00000004 alt_errno
00009138 g     F .text	00000034 TiltModelInitialize
0000c0fc g     F .text	00000050 __divsi3
0000dcac g     O .rodata	00000014 __thenan_df
00009f34 g     F .text	00000190 __mulsf3
0000dc4c g       *ABS*	00000000 __flash_rodata_start
000099e4 g     F .text	00000068 TiltCalculateSubmodel
0000c484 g     F .text	00000034 alt_irq_init
00008e2c g     F .text	0000002c TiltDiscreteInitialize
0000d490 g     F .text	00000080 alt_release_fd
0000dcc0 g     O .rodata	00000100 __clz_tab
0000c01c g     F .text	0000006c _write_r
0000e0ed g     O .rwdata	00000001 Pan_major
000084c8 g     F .text	00000038 PanModelInitialize_variables
000081f4 g     F .text	0000002c PanDiscreteInitialize
0000e118 g     O .rwdata	00000004 _impure_ptr
0000e4b8 g     O .bss	00000004 alt_argc
00008b74 g     F .text	0000005c PanCalculateOutput
00008020 g       .exceptions	00000000 alt_irq_entry
0000e11c g     O .rwdata	00000008 alt_fs_list
0000916c g     F .text	0000001c TiltCalculateInitial
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000e4a4 g     O .bss	00000008 Tilt_time
0000cdd8 g     F .text	00000050 alt_ic_isr_register
0000e140 g       *ABS*	00000000 _edata
0000c858 g     F .text	00000060 altera_avalon_uart_read_fd
0000e780 g       *ABS*	00000000 _end
000081b8 g       *ABS*	00000000 __ram_exceptions_end
0000cec4 g     F .text	000000a0 alt_ic_irq_disable
0000e0e4 g     O .rwdata	00000008 Pan_step_size
0000d6ac g     F .text	00000020 altera_nios2_qsys_irq_init
0000d9d0 g     F .text	00000020 exit
0000e588 g     O .bss	00000018 Pan_s
0000c14c g     F .text	0000005c __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000e0f8 g     O .rwdata	00000008 Tilt_finish_time
0000dc10 g     F .text	0000003c _exit
0000e0dc g     O .rwdata	00000008 Pan_finish_time
00008534 g     F .text	0000001c PanCalculateInitial
0000ae28 g     F .text	00000110 __muldi3
0000b7bc g     F .text	00000028 strlen
00008e74 g     F .text	000000e4 TiltDiscreteStep
0000d338 g     F .text	00000158 open
0000cda8 g     F .text	00000030 alt_icache_flush_all
0000e134 g     O .rwdata	00000004 alt_priority_mask
00008d5c g     F .text	00000068 PanCalculateSubmodel
0000ce28 g     F .text	0000009c alt_ic_irq_enable
0000bf18 g     F .text	00000024 __vfprintf_internal
0000e4b0 g     O .bss	00000001 Tilt_stop_simulation
0000c968 g     F .text	000000c0 altera_avalon_uart_read
00009944 g     F .text	000000a0 TiltInitializeSubmodel
0000a690 g     F .text	00000060 __subdf3
00009ab4 g     F .text	00000088 convertToPwm
0000e138 g     O .rwdata	00000008 alt_alarm_list
0000cba4 g     F .text	000000cc close
00009a4c g     F .text	00000068 TiltTerminateSubmodel
0000e494 g     O .bss	00000004 Pan_steps
00008400 g     F .text	0000004c PanModelInitialize_initialvalues
0000c224 g     F .text	00000080 alt_load
0000b1d8 g     F .text	00000224 __pack_d
0000e668 g     O .bss	00000018 Tilt_s
00000000  w      *UND*	00000000 free
00009100 g     F .text	00000038 TiltModelInitialize_variables



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606e14 	ori	at,at,33208
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001726 	beq	r2,zero,8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00c00074 	movhi	r3,1
    8130:	18f9a004 	addi	r3,r3,-6528
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	2139a004 	addi	r4,r4,-6528
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    817c:	e0bffb17 	ldw	r2,-20(fp)
    8180:	103fe31e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8184:	00000706 	br	81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	10800044 	addi	r2,r2,1
    819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a0:	003fde06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

Disassembly of section .text:

000081b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b8:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c4:	d6983714 	ori	gp,gp,24796
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81cc:	10b92114 	ori	r2,r2,58500

    movhi r3, %hi(__bss_end)
    81d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d4:	18f9e014 	ori	r3,r3,59264

    beq r2, r3, 1f
    81d8:	10c00326 	beq	r2,r3,81e8 <_start+0x30>

0:
    stw zero, (r2)
    81dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e4:	10fffd36 	bltu	r2,r3,81dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e8:	000c2240 	call	c224 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81ec:	000c2a40 	call	c2a4 <alt_main>

000081f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f0:	003fff06 	br	81f0 <alt_after_alt_main>

000081f4 <PanDiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void PanDiscreteInitialize (void)
{
    81f4:	deffff04 	addi	sp,sp,-4
    81f8:	df000015 	stw	fp,0(sp)
    81fc:	d839883a 	mov	fp,sp
	/* nothing to be done */
	Pan_major = XXTRUE;
    8200:	00800074 	movhi	r2,1
    8204:	10b83b44 	addi	r2,r2,-7955
    8208:	00c00044 	movi	r3,1
    820c:	10c00005 	stb	r3,0(r2)
}
    8210:	e037883a 	mov	sp,fp
    8214:	df000017 	ldw	fp,0(sp)
    8218:	dec00104 	addi	sp,sp,4
    821c:	f800283a 	ret

00008220 <PanDiscreteTerminate>:

/* the termination of the Discrete integration method */
void PanDiscreteTerminate (void)
{
    8220:	deffff04 	addi	sp,sp,-4
    8224:	df000015 	stw	fp,0(sp)
    8228:	d839883a 	mov	fp,sp
	/* nothing to be done */
}
    822c:	e037883a 	mov	sp,fp
    8230:	df000017 	ldw	fp,0(sp)
    8234:	dec00104 	addi	sp,sp,4
    8238:	f800283a 	ret

0000823c <PanDiscreteStep>:

/* the Discrete integration method itself */
void PanDiscreteStep (void)
{
    823c:	defffd04 	addi	sp,sp,-12
    8240:	dfc00215 	stw	ra,8(sp)
    8244:	df000115 	stw	fp,4(sp)
    8248:	df000104 	addi	fp,sp,4
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    824c:	e03fff15 	stw	zero,-4(fp)
    8250:	00001106 	br	8298 <PanDiscreteStep+0x5c>
	{
		/* just a move of the new state */
		Pan_s [index] = Pan_R [index];
    8254:	00c00074 	movhi	r3,1
    8258:	18f95c04 	addi	r3,r3,-6800
    825c:	e0bfff17 	ldw	r2,-4(fp)
    8260:	100490fa 	slli	r2,r2,3
    8264:	1889883a 	add	r4,r3,r2
    8268:	20800017 	ldw	r2,0(r4)
    826c:	20c00117 	ldw	r3,4(r4)
    8270:	01400074 	movhi	r5,1
    8274:	29796204 	addi	r5,r5,-6776
    8278:	e13fff17 	ldw	r4,-4(fp)
    827c:	200890fa 	slli	r4,r4,3
    8280:	2909883a 	add	r4,r5,r4
    8284:	20800015 	stw	r2,0(r4)
    8288:	20c00115 	stw	r3,4(r4)
void PanDiscreteStep (void)
{
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    828c:	e0bfff17 	ldw	r2,-4(fp)
    8290:	10800044 	addi	r2,r2,1
    8294:	e0bfff15 	stw	r2,-4(fp)
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	108000d0 	cmplti	r2,r2,3
    82a0:	103fec1e 	bne	r2,zero,8254 <PanDiscreteStep+0x18>
	{
		/* just a move of the new state */
		Pan_s [index] = Pan_R [index];
	}
	/* increment the simulation time */
	Pan_time += Pan_step_size;
    82a4:	00800074 	movhi	r2,1
    82a8:	10b92304 	addi	r2,r2,-7028
    82ac:	11400017 	ldw	r5,0(r2)
    82b0:	11800117 	ldw	r6,4(r2)
    82b4:	01000074 	movhi	r4,1
    82b8:	21383904 	addi	r4,r4,-7964
    82bc:	20800017 	ldw	r2,0(r4)
    82c0:	20c00117 	ldw	r3,4(r4)
    82c4:	2809883a 	mov	r4,r5
    82c8:	300b883a 	mov	r5,r6
    82cc:	100d883a 	mov	r6,r2
    82d0:	180f883a 	mov	r7,r3
    82d4:	000a63c0 	call	a63c <__adddf3>
    82d8:	1009883a 	mov	r4,r2
    82dc:	180b883a 	mov	r5,r3
    82e0:	2005883a 	mov	r2,r4
    82e4:	2807883a 	mov	r3,r5
    82e8:	01000074 	movhi	r4,1
    82ec:	21392304 	addi	r4,r4,-7028
    82f0:	20800015 	stw	r2,0(r4)
    82f4:	20c00115 	stw	r3,4(r4)

	Pan_major = XXTRUE;
    82f8:	00800074 	movhi	r2,1
    82fc:	10b83b44 	addi	r2,r2,-7955
    8300:	00c00044 	movi	r3,1
    8304:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	PanCalculateDynamic ();
    8308:	00085880 	call	8588 <PanCalculateDynamic>
}
    830c:	e037883a 	mov	sp,fp
    8310:	dfc00117 	ldw	ra,4(sp)
    8314:	df000017 	ldw	fp,0(sp)
    8318:	dec00204 	addi	sp,sp,8
    831c:	f800283a 	ret

00008320 <PanModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void PanModelInitialize_parameters(void)
{
    8320:	deffff04 	addi	sp,sp,-4
    8324:	df000015 	stw	fp,0(sp)
    8328:	d839883a 	mov	fp,sp
	/* set the parameters */
	Pan_P[0] = 0.0;		/* corrGain\K */
    832c:	00800074 	movhi	r2,1
    8330:	10b94804 	addi	r2,r2,-6880
    8334:	10000015 	stw	zero,0(r2)
    8338:	10000115 	stw	zero,4(r2)
	Pan_P[1] = 2.6;		/* PID1\kp */
    833c:	00800074 	movhi	r2,1
    8340:	10b94804 	addi	r2,r2,-6880
    8344:	00f33374 	movhi	r3,52429
    8348:	18f33344 	addi	r3,r3,-13107
    834c:	10c00215 	stw	r3,8(r2)
    8350:	00d00174 	movhi	r3,16389
    8354:	18f33304 	addi	r3,r3,-13108
    8358:	10c00315 	stw	r3,12(r2)
	Pan_P[2] = 0.05;		/* PID1\tauD */
    835c:	00800074 	movhi	r2,1
    8360:	10b94804 	addi	r2,r2,-6880
    8364:	00e666b4 	movhi	r3,39322
    8368:	18e66684 	addi	r3,r3,-26214
    836c:	10c00415 	stw	r3,16(r2)
    8370:	00cfeab4 	movhi	r3,16298
    8374:	18e66644 	addi	r3,r3,-26215
    8378:	10c00515 	stw	r3,20(r2)
	Pan_P[3] = 0.17;		/* PID1\beta */
    837c:	00800074 	movhi	r2,1
    8380:	10b94804 	addi	r2,r2,-6880
    8384:	00d70a74 	movhi	r3,23593
    8388:	18fd70c4 	addi	r3,r3,-2621
    838c:	10c00615 	stw	r3,24(r2)
    8390:	00cff1b4 	movhi	r3,16326
    8394:	18f0a3c4 	addi	r3,r3,-15729
    8398:	10c00715 	stw	r3,28(r2)
	Pan_P[4] = 9.0;		/* PID1\tauI */
    839c:	00800074 	movhi	r2,1
    83a0:	10b94804 	addi	r2,r2,-6880
    83a4:	10000815 	stw	zero,32(r2)
    83a8:	00d008b4 	movhi	r3,16418
    83ac:	10c00915 	stw	r3,36(r2)
	Pan_P[5] = -0.99;		/* SignalLimiter2\minimum */
    83b0:	00800074 	movhi	r2,1
    83b4:	10b94804 	addi	r2,r2,-6880
    83b8:	00deb874 	movhi	r3,31457
    83bc:	18d1eb84 	addi	r3,r3,18350
    83c0:	10c00a15 	stw	r3,40(r2)
    83c4:	00effc34 	movhi	r3,49136
    83c8:	18eb8504 	addi	r3,r3,-20972
    83cc:	10c00b15 	stw	r3,44(r2)
	Pan_P[6] = 0.99;		/* SignalLimiter2\maximum */
    83d0:	00800074 	movhi	r2,1
    83d4:	10b94804 	addi	r2,r2,-6880
    83d8:	00deb874 	movhi	r3,31457
    83dc:	18d1eb84 	addi	r3,r3,18350
    83e0:	10c00c15 	stw	r3,48(r2)
    83e4:	00cffc34 	movhi	r3,16368
    83e8:	18eb8504 	addi	r3,r3,-20972
    83ec:	10c00d15 	stw	r3,52(r2)

}
    83f0:	e037883a 	mov	sp,fp
    83f4:	df000017 	ldw	fp,0(sp)
    83f8:	dec00104 	addi	sp,sp,4
    83fc:	f800283a 	ret

00008400 <PanModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void PanModelInitialize_initialvalues(void)
{
    8400:	deffff04 	addi	sp,sp,-4
    8404:	df000015 	stw	fp,0(sp)
    8408:	d839883a 	mov	fp,sp
	/* set the initial values */
	Pan_I[0] = 0.0;		/* PID1\uD_previous_initial */
    840c:	00800074 	movhi	r2,1
    8410:	10b95604 	addi	r2,r2,-6824
    8414:	10000015 	stw	zero,0(r2)
    8418:	10000115 	stw	zero,4(r2)
	Pan_I[1] = 0.0;		/* PID1\error_previous_initial */
    841c:	00800074 	movhi	r2,1
    8420:	10b95604 	addi	r2,r2,-6824
    8424:	10000215 	stw	zero,8(r2)
    8428:	10000315 	stw	zero,12(r2)
	Pan_I[2] = 0.0;		/* PID1\uI_previous_initial */
    842c:	00800074 	movhi	r2,1
    8430:	10b95604 	addi	r2,r2,-6824
    8434:	10000415 	stw	zero,16(r2)
    8438:	10000515 	stw	zero,20(r2)

}
    843c:	e037883a 	mov	sp,fp
    8440:	df000017 	ldw	fp,0(sp)
    8444:	dec00104 	addi	sp,sp,4
    8448:	f800283a 	ret

0000844c <PanModelInitialize_states>:

void PanModelInitialize_states(void)
{
    844c:	deffff04 	addi	sp,sp,-4
    8450:	df000015 	stw	fp,0(sp)
    8454:	d839883a 	mov	fp,sp
	/* set the states */
	Pan_s[0] = Pan_I[0];		/* PID1\uD_previous */
    8458:	01000074 	movhi	r4,1
    845c:	21395604 	addi	r4,r4,-6824
    8460:	20800017 	ldw	r2,0(r4)
    8464:	20c00117 	ldw	r3,4(r4)
    8468:	01000074 	movhi	r4,1
    846c:	21396204 	addi	r4,r4,-6776
    8470:	20800015 	stw	r2,0(r4)
    8474:	20c00115 	stw	r3,4(r4)
	Pan_s[1] = Pan_I[1];		/* PID1\error_previous */
    8478:	01000074 	movhi	r4,1
    847c:	21395604 	addi	r4,r4,-6824
    8480:	20800217 	ldw	r2,8(r4)
    8484:	20c00317 	ldw	r3,12(r4)
    8488:	01000074 	movhi	r4,1
    848c:	21396204 	addi	r4,r4,-6776
    8490:	20800215 	stw	r2,8(r4)
    8494:	20c00315 	stw	r3,12(r4)
	Pan_s[2] = Pan_I[2];		/* PID1\uI_previous */
    8498:	01000074 	movhi	r4,1
    849c:	21395604 	addi	r4,r4,-6824
    84a0:	20800417 	ldw	r2,16(r4)
    84a4:	20c00517 	ldw	r3,20(r4)
    84a8:	01000074 	movhi	r4,1
    84ac:	21396204 	addi	r4,r4,-6776
    84b0:	20800415 	stw	r2,16(r4)
    84b4:	20c00515 	stw	r3,20(r4)

}
    84b8:	e037883a 	mov	sp,fp
    84bc:	df000017 	ldw	fp,0(sp)
    84c0:	dec00104 	addi	sp,sp,4
    84c4:	f800283a 	ret

000084c8 <PanModelInitialize_variables>:

void PanModelInitialize_variables(void)
{
    84c8:	defffe04 	addi	sp,sp,-8
    84cc:	dfc00115 	stw	ra,4(sp)
    84d0:	df000015 	stw	fp,0(sp)
    84d4:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(Pan_V, 0, xx_variables_size * sizeof(XXDouble));
    84d8:	01000074 	movhi	r4,1
    84dc:	21393404 	addi	r4,r4,-6960
    84e0:	000b883a 	mov	r5,zero
    84e4:	01801404 	movi	r6,80
    84e8:	000b6800 	call	b680 <memset>
}
    84ec:	e037883a 	mov	sp,fp
    84f0:	dfc00117 	ldw	ra,4(sp)
    84f4:	df000017 	ldw	fp,0(sp)
    84f8:	dec00204 	addi	sp,sp,8
    84fc:	f800283a 	ret

00008500 <PanModelInitialize>:

/* this method is called before calculation is possible */
void PanModelInitialize (void)
{
    8500:	defffe04 	addi	sp,sp,-8
    8504:	dfc00115 	stw	ra,4(sp)
    8508:	df000015 	stw	fp,0(sp)
    850c:	d839883a 	mov	fp,sp
	PanModelInitialize_parameters();
    8510:	00083200 	call	8320 <PanModelInitialize_parameters>
	PanModelInitialize_variables();
    8514:	00084c80 	call	84c8 <PanModelInitialize_variables>
	PanModelInitialize_initialvalues();
    8518:	00084000 	call	8400 <PanModelInitialize_initialvalues>
	PanModelInitialize_states();
    851c:	000844c0 	call	844c <PanModelInitialize_states>
}
    8520:	e037883a 	mov	sp,fp
    8524:	dfc00117 	ldw	ra,4(sp)
    8528:	df000017 	ldw	fp,0(sp)
    852c:	dec00204 	addi	sp,sp,8
    8530:	f800283a 	ret

00008534 <PanCalculateInitial>:

/* This function calculates the initial equations of the model.
 * These equations are calculated before anything else
 */
void PanCalculateInitial (void)
{
    8534:	deffff04 	addi	sp,sp,-4
    8538:	df000015 	stw	fp,0(sp)
    853c:	d839883a 	mov	fp,sp

}
    8540:	e037883a 	mov	sp,fp
    8544:	df000017 	ldw	fp,0(sp)
    8548:	dec00104 	addi	sp,sp,4
    854c:	f800283a 	ret

00008550 <PanCalculateStatic>:

/* This function calculates the static equations of the model.
 * These equations are only dependent from parameters and constants
 */
void PanCalculateStatic (void)
{
    8550:	deffff04 	addi	sp,sp,-4
    8554:	df000015 	stw	fp,0(sp)
    8558:	d839883a 	mov	fp,sp

}
    855c:	e037883a 	mov	sp,fp
    8560:	df000017 	ldw	fp,0(sp)
    8564:	dec00104 	addi	sp,sp,4
    8568:	f800283a 	ret

0000856c <PanCalculateInput>:
/* This function calculates the input equations of the model.
 * These equations are dynamic equations that must not change
 * in calls from the integration method (like random and delay).
 */
void PanCalculateInput (void)
{
    856c:	deffff04 	addi	sp,sp,-4
    8570:	df000015 	stw	fp,0(sp)
    8574:	d839883a 	mov	fp,sp

}
    8578:	e037883a 	mov	sp,fp
    857c:	df000017 	ldw	fp,0(sp)
    8580:	dec00104 	addi	sp,sp,4
    8584:	f800283a 	ret

00008588 <PanCalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void PanCalculateDynamic (void)
{
    8588:	defff804 	addi	sp,sp,-32
    858c:	dfc00715 	stw	ra,28(sp)
    8590:	df000615 	stw	fp,24(sp)
    8594:	dd400515 	stw	r21,20(sp)
    8598:	dd000415 	stw	r20,16(sp)
    859c:	dcc00315 	stw	r19,12(sp)
    85a0:	dc800215 	stw	r18,8(sp)
    85a4:	dc400115 	stw	r17,4(sp)
    85a8:	dc000015 	stw	r16,0(sp)
    85ac:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	Pan_V[2] = 1.0 / (Pan_step_size + Pan_P[2] * Pan_P[3]);
    85b0:	00800074 	movhi	r2,1
    85b4:	10b94804 	addi	r2,r2,-6880
    85b8:	11400417 	ldw	r5,16(r2)
    85bc:	11800517 	ldw	r6,20(r2)
    85c0:	01000074 	movhi	r4,1
    85c4:	21394804 	addi	r4,r4,-6880
    85c8:	20800617 	ldw	r2,24(r4)
    85cc:	20c00717 	ldw	r3,28(r4)
    85d0:	2809883a 	mov	r4,r5
    85d4:	300b883a 	mov	r5,r6
    85d8:	100d883a 	mov	r6,r2
    85dc:	180f883a 	mov	r7,r3
    85e0:	000a6f00 	call	a6f0 <__muldf3>
    85e4:	100f883a 	mov	r7,r2
    85e8:	1811883a 	mov	r8,r3
    85ec:	380b883a 	mov	r5,r7
    85f0:	400d883a 	mov	r6,r8
    85f4:	d0a00217 	ldw	r2,-32760(gp)
    85f8:	01000074 	movhi	r4,1
    85fc:	21383a04 	addi	r4,r4,-7960
    8600:	20c00017 	ldw	r3,0(r4)
    8604:	2809883a 	mov	r4,r5
    8608:	300b883a 	mov	r5,r6
    860c:	100d883a 	mov	r6,r2
    8610:	180f883a 	mov	r7,r3
    8614:	000a63c0 	call	a63c <__adddf3>
    8618:	1009883a 	mov	r4,r2
    861c:	180b883a 	mov	r5,r3
    8620:	2005883a 	mov	r2,r4
    8624:	2807883a 	mov	r3,r5
    8628:	0009883a 	mov	r4,zero
    862c:	014ffc34 	movhi	r5,16368
    8630:	100d883a 	mov	r6,r2
    8634:	180f883a 	mov	r7,r3
    8638:	000a9d40 	call	a9d4 <__divdf3>
    863c:	1009883a 	mov	r4,r2
    8640:	180b883a 	mov	r5,r3
    8644:	2005883a 	mov	r2,r4
    8648:	2807883a 	mov	r3,r5
    864c:	01000074 	movhi	r4,1
    8650:	21393404 	addi	r4,r4,-6960
    8654:	20800415 	stw	r2,16(r4)
    8658:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\plus1 = in; */
	Pan_V[3] = Pan_V[7];
    865c:	01000074 	movhi	r4,1
    8660:	21393404 	addi	r4,r4,-6960
    8664:	20800e17 	ldw	r2,56(r4)
    8668:	20c00f17 	ldw	r3,60(r4)
    866c:	01000074 	movhi	r4,1
    8670:	21393404 	addi	r4,r4,-6960
    8674:	20800615 	stw	r2,24(r4)
    8678:	20c00715 	stw	r3,28(r4)

	/* Splitter1\input = position; */
	Pan_V[5] = Pan_V[8];
    867c:	01000074 	movhi	r4,1
    8680:	21393404 	addi	r4,r4,-6960
    8684:	20801017 	ldw	r2,64(r4)
    8688:	20c01117 	ldw	r3,68(r4)
    868c:	01000074 	movhi	r4,1
    8690:	21393404 	addi	r4,r4,-6960
    8694:	20800a15 	stw	r2,40(r4)
    8698:	20c00b15 	stw	r3,44(r4)

	/* corrGain\corr = corrGain\K * Splitter1\input; */
	Pan_V[0] = Pan_P[0] * Pan_V[5];
    869c:	00800074 	movhi	r2,1
    86a0:	10b94804 	addi	r2,r2,-6880
    86a4:	11400017 	ldw	r5,0(r2)
    86a8:	11800117 	ldw	r6,4(r2)
    86ac:	01000074 	movhi	r4,1
    86b0:	21393404 	addi	r4,r4,-6960
    86b4:	20800a17 	ldw	r2,40(r4)
    86b8:	20c00b17 	ldw	r3,44(r4)
    86bc:	2809883a 	mov	r4,r5
    86c0:	300b883a 	mov	r5,r6
    86c4:	100d883a 	mov	r6,r2
    86c8:	180f883a 	mov	r7,r3
    86cc:	000a6f00 	call	a6f0 <__muldf3>
    86d0:	1009883a 	mov	r4,r2
    86d4:	180b883a 	mov	r5,r3
    86d8:	2005883a 	mov	r2,r4
    86dc:	2807883a 	mov	r3,r5
    86e0:	01000074 	movhi	r4,1
    86e4:	21393404 	addi	r4,r4,-6960
    86e8:	20800015 	stw	r2,0(r4)
    86ec:	20c00115 	stw	r3,4(r4)

	/* PID1\error = PlusMinus1\plus1 - Splitter1\input; */
	Pan_R[1] = Pan_V[3] - Pan_V[5];
    86f0:	00800074 	movhi	r2,1
    86f4:	10b93404 	addi	r2,r2,-6960
    86f8:	11400617 	ldw	r5,24(r2)
    86fc:	11800717 	ldw	r6,28(r2)
    8700:	01000074 	movhi	r4,1
    8704:	21393404 	addi	r4,r4,-6960
    8708:	20800a17 	ldw	r2,40(r4)
    870c:	20c00b17 	ldw	r3,44(r4)
    8710:	2809883a 	mov	r4,r5
    8714:	300b883a 	mov	r5,r6
    8718:	100d883a 	mov	r6,r2
    871c:	180f883a 	mov	r7,r3
    8720:	000a6900 	call	a690 <__subdf3>
    8724:	1009883a 	mov	r4,r2
    8728:	180b883a 	mov	r5,r3
    872c:	2005883a 	mov	r2,r4
    8730:	2807883a 	mov	r3,r5
    8734:	01000074 	movhi	r4,1
    8738:	21395c04 	addi	r4,r4,-6800
    873c:	20800215 	stw	r2,8(r4)
    8740:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	Pan_R[0] = Pan_V[2] * (((Pan_P[2] * Pan_s[0]) * Pan_P[3] + (Pan_P[2] * Pan_P[1]) * (Pan_R[1] - Pan_s[1])) + (Pan_step_size * Pan_P[1]) * Pan_R[1]);
    8744:	00800074 	movhi	r2,1
    8748:	10b93404 	addi	r2,r2,-6960
    874c:	14000417 	ldw	r16,16(r2)
    8750:	14400517 	ldw	r17,20(r2)
    8754:	00800074 	movhi	r2,1
    8758:	10b94804 	addi	r2,r2,-6880
    875c:	11400417 	ldw	r5,16(r2)
    8760:	11800517 	ldw	r6,20(r2)
    8764:	01000074 	movhi	r4,1
    8768:	21396204 	addi	r4,r4,-6776
    876c:	20800017 	ldw	r2,0(r4)
    8770:	20c00117 	ldw	r3,4(r4)
    8774:	2809883a 	mov	r4,r5
    8778:	300b883a 	mov	r5,r6
    877c:	100d883a 	mov	r6,r2
    8780:	180f883a 	mov	r7,r3
    8784:	000a6f00 	call	a6f0 <__muldf3>
    8788:	100f883a 	mov	r7,r2
    878c:	1811883a 	mov	r8,r3
    8790:	380b883a 	mov	r5,r7
    8794:	400d883a 	mov	r6,r8
    8798:	01000074 	movhi	r4,1
    879c:	21394804 	addi	r4,r4,-6880
    87a0:	20800617 	ldw	r2,24(r4)
    87a4:	20c00717 	ldw	r3,28(r4)
    87a8:	2809883a 	mov	r4,r5
    87ac:	300b883a 	mov	r5,r6
    87b0:	100d883a 	mov	r6,r2
    87b4:	180f883a 	mov	r7,r3
    87b8:	000a6f00 	call	a6f0 <__muldf3>
    87bc:	1009883a 	mov	r4,r2
    87c0:	180b883a 	mov	r5,r3
    87c4:	2025883a 	mov	r18,r4
    87c8:	2827883a 	mov	r19,r5
    87cc:	00800074 	movhi	r2,1
    87d0:	10b94804 	addi	r2,r2,-6880
    87d4:	11400417 	ldw	r5,16(r2)
    87d8:	11800517 	ldw	r6,20(r2)
    87dc:	01000074 	movhi	r4,1
    87e0:	21394804 	addi	r4,r4,-6880
    87e4:	20800217 	ldw	r2,8(r4)
    87e8:	20c00317 	ldw	r3,12(r4)
    87ec:	2809883a 	mov	r4,r5
    87f0:	300b883a 	mov	r5,r6
    87f4:	100d883a 	mov	r6,r2
    87f8:	180f883a 	mov	r7,r3
    87fc:	000a6f00 	call	a6f0 <__muldf3>
    8800:	1009883a 	mov	r4,r2
    8804:	180b883a 	mov	r5,r3
    8808:	2029883a 	mov	r20,r4
    880c:	282b883a 	mov	r21,r5
    8810:	00800074 	movhi	r2,1
    8814:	10b95c04 	addi	r2,r2,-6800
    8818:	11400217 	ldw	r5,8(r2)
    881c:	11800317 	ldw	r6,12(r2)
    8820:	01000074 	movhi	r4,1
    8824:	21396204 	addi	r4,r4,-6776
    8828:	20800217 	ldw	r2,8(r4)
    882c:	20c00317 	ldw	r3,12(r4)
    8830:	2809883a 	mov	r4,r5
    8834:	300b883a 	mov	r5,r6
    8838:	100d883a 	mov	r6,r2
    883c:	180f883a 	mov	r7,r3
    8840:	000a6900 	call	a690 <__subdf3>
    8844:	1009883a 	mov	r4,r2
    8848:	180b883a 	mov	r5,r3
    884c:	2005883a 	mov	r2,r4
    8850:	2807883a 	mov	r3,r5
    8854:	a009883a 	mov	r4,r20
    8858:	a80b883a 	mov	r5,r21
    885c:	100d883a 	mov	r6,r2
    8860:	180f883a 	mov	r7,r3
    8864:	000a6f00 	call	a6f0 <__muldf3>
    8868:	1009883a 	mov	r4,r2
    886c:	180b883a 	mov	r5,r3
    8870:	2005883a 	mov	r2,r4
    8874:	2807883a 	mov	r3,r5
    8878:	9009883a 	mov	r4,r18
    887c:	980b883a 	mov	r5,r19
    8880:	100d883a 	mov	r6,r2
    8884:	180f883a 	mov	r7,r3
    8888:	000a63c0 	call	a63c <__adddf3>
    888c:	1009883a 	mov	r4,r2
    8890:	180b883a 	mov	r5,r3
    8894:	2025883a 	mov	r18,r4
    8898:	2827883a 	mov	r19,r5
    889c:	00800074 	movhi	r2,1
    88a0:	10b94804 	addi	r2,r2,-6880
    88a4:	11400217 	ldw	r5,8(r2)
    88a8:	11800317 	ldw	r6,12(r2)
    88ac:	d0a00217 	ldw	r2,-32760(gp)
    88b0:	01000074 	movhi	r4,1
    88b4:	21383a04 	addi	r4,r4,-7960
    88b8:	20c00017 	ldw	r3,0(r4)
    88bc:	2809883a 	mov	r4,r5
    88c0:	300b883a 	mov	r5,r6
    88c4:	100d883a 	mov	r6,r2
    88c8:	180f883a 	mov	r7,r3
    88cc:	000a6f00 	call	a6f0 <__muldf3>
    88d0:	100f883a 	mov	r7,r2
    88d4:	1811883a 	mov	r8,r3
    88d8:	380b883a 	mov	r5,r7
    88dc:	400d883a 	mov	r6,r8
    88e0:	01000074 	movhi	r4,1
    88e4:	21395c04 	addi	r4,r4,-6800
    88e8:	20800217 	ldw	r2,8(r4)
    88ec:	20c00317 	ldw	r3,12(r4)
    88f0:	2809883a 	mov	r4,r5
    88f4:	300b883a 	mov	r5,r6
    88f8:	100d883a 	mov	r6,r2
    88fc:	180f883a 	mov	r7,r3
    8900:	000a6f00 	call	a6f0 <__muldf3>
    8904:	1009883a 	mov	r4,r2
    8908:	180b883a 	mov	r5,r3
    890c:	2005883a 	mov	r2,r4
    8910:	2807883a 	mov	r3,r5
    8914:	9009883a 	mov	r4,r18
    8918:	980b883a 	mov	r5,r19
    891c:	100d883a 	mov	r6,r2
    8920:	180f883a 	mov	r7,r3
    8924:	000a63c0 	call	a63c <__adddf3>
    8928:	1009883a 	mov	r4,r2
    892c:	180b883a 	mov	r5,r3
    8930:	2005883a 	mov	r2,r4
    8934:	2807883a 	mov	r3,r5
    8938:	8009883a 	mov	r4,r16
    893c:	880b883a 	mov	r5,r17
    8940:	100d883a 	mov	r6,r2
    8944:	180f883a 	mov	r7,r3
    8948:	000a6f00 	call	a6f0 <__muldf3>
    894c:	1009883a 	mov	r4,r2
    8950:	180b883a 	mov	r5,r3
    8954:	2005883a 	mov	r2,r4
    8958:	2807883a 	mov	r3,r5
    895c:	01000074 	movhi	r4,1
    8960:	21395c04 	addi	r4,r4,-6800
    8964:	20800015 	stw	r2,0(r4)
    8968:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	Pan_R[2] = Pan_s[2] + (Pan_step_size * Pan_R[0]) / Pan_P[4];
    896c:	00800074 	movhi	r2,1
    8970:	10b96204 	addi	r2,r2,-6776
    8974:	14000417 	ldw	r16,16(r2)
    8978:	14400517 	ldw	r17,20(r2)
    897c:	00800074 	movhi	r2,1
    8980:	10b95c04 	addi	r2,r2,-6800
    8984:	11400017 	ldw	r5,0(r2)
    8988:	11800117 	ldw	r6,4(r2)
    898c:	d0a00217 	ldw	r2,-32760(gp)
    8990:	01000074 	movhi	r4,1
    8994:	21383a04 	addi	r4,r4,-7960
    8998:	20c00017 	ldw	r3,0(r4)
    899c:	2809883a 	mov	r4,r5
    89a0:	300b883a 	mov	r5,r6
    89a4:	100d883a 	mov	r6,r2
    89a8:	180f883a 	mov	r7,r3
    89ac:	000a6f00 	call	a6f0 <__muldf3>
    89b0:	100f883a 	mov	r7,r2
    89b4:	1811883a 	mov	r8,r3
    89b8:	380b883a 	mov	r5,r7
    89bc:	400d883a 	mov	r6,r8
    89c0:	01000074 	movhi	r4,1
    89c4:	21394804 	addi	r4,r4,-6880
    89c8:	20800817 	ldw	r2,32(r4)
    89cc:	20c00917 	ldw	r3,36(r4)
    89d0:	2809883a 	mov	r4,r5
    89d4:	300b883a 	mov	r5,r6
    89d8:	100d883a 	mov	r6,r2
    89dc:	180f883a 	mov	r7,r3
    89e0:	000a9d40 	call	a9d4 <__divdf3>
    89e4:	1009883a 	mov	r4,r2
    89e8:	180b883a 	mov	r5,r3
    89ec:	2005883a 	mov	r2,r4
    89f0:	2807883a 	mov	r3,r5
    89f4:	8009883a 	mov	r4,r16
    89f8:	880b883a 	mov	r5,r17
    89fc:	100d883a 	mov	r6,r2
    8a00:	180f883a 	mov	r7,r3
    8a04:	000a63c0 	call	a63c <__adddf3>
    8a08:	1009883a 	mov	r4,r2
    8a0c:	180b883a 	mov	r5,r3
    8a10:	2005883a 	mov	r2,r4
    8a14:	2807883a 	mov	r3,r5
    8a18:	01000074 	movhi	r4,1
    8a1c:	21395c04 	addi	r4,r4,-6800
    8a20:	20800415 	stw	r2,16(r4)
    8a24:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	Pan_V[1] = Pan_R[2] + Pan_R[0];
    8a28:	00800074 	movhi	r2,1
    8a2c:	10b95c04 	addi	r2,r2,-6800
    8a30:	11400417 	ldw	r5,16(r2)
    8a34:	11800517 	ldw	r6,20(r2)
    8a38:	01000074 	movhi	r4,1
    8a3c:	21395c04 	addi	r4,r4,-6800
    8a40:	20800017 	ldw	r2,0(r4)
    8a44:	20c00117 	ldw	r3,4(r4)
    8a48:	2809883a 	mov	r4,r5
    8a4c:	300b883a 	mov	r5,r6
    8a50:	100d883a 	mov	r6,r2
    8a54:	180f883a 	mov	r7,r3
    8a58:	000a63c0 	call	a63c <__adddf3>
    8a5c:	1009883a 	mov	r4,r2
    8a60:	180b883a 	mov	r5,r3
    8a64:	2005883a 	mov	r2,r4
    8a68:	2807883a 	mov	r3,r5
    8a6c:	01000074 	movhi	r4,1
    8a70:	21393404 	addi	r4,r4,-6960
    8a74:	20800215 	stw	r2,8(r4)
    8a78:	20c00315 	stw	r3,12(r4)

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	Pan_V[4] = ((Pan_V[1] < Pan_P[5]) ? 
    8a7c:	00800074 	movhi	r2,1
    8a80:	10b93404 	addi	r2,r2,-6960
    8a84:	11400217 	ldw	r5,8(r2)
    8a88:	11800317 	ldw	r6,12(r2)
    8a8c:	01000074 	movhi	r4,1
    8a90:	21394804 	addi	r4,r4,-6880
    8a94:	20800a17 	ldw	r2,40(r4)
    8a98:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		Pan_P[5]
	:
    8a9c:	2809883a 	mov	r4,r5
    8aa0:	300b883a 	mov	r5,r6
    8aa4:	100d883a 	mov	r6,r2
    8aa8:	180f883a 	mov	r7,r3
    8aac:	000abec0 	call	abec <__ltdf2>
    8ab0:	1000050e 	bge	r2,zero,8ac8 <PanCalculateDynamic+0x540>
    8ab4:	01000074 	movhi	r4,1
    8ab8:	21394804 	addi	r4,r4,-6880
    8abc:	20800a17 	ldw	r2,40(r4)
    8ac0:	20c00b17 	ldw	r3,44(r4)
    8ac4:	00001906 	br	8b2c <PanCalculateDynamic+0x5a4>
		/* (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) */
		((Pan_V[1] > Pan_P[6]) ? 
    8ac8:	00800074 	movhi	r2,1
    8acc:	10b93404 	addi	r2,r2,-6960
    8ad0:	11400217 	ldw	r5,8(r2)
    8ad4:	11800317 	ldw	r6,12(r2)
    8ad8:	01000074 	movhi	r4,1
    8adc:	21394804 	addi	r4,r4,-6880
    8ae0:	20800c17 	ldw	r2,48(r4)
    8ae4:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			Pan_P[6]
		:
    8ae8:	2809883a 	mov	r4,r5
    8aec:	300b883a 	mov	r5,r6
    8af0:	100d883a 	mov	r6,r2
    8af4:	180f883a 	mov	r7,r3
    8af8:	000ab880 	call	ab88 <__gtdf2>
    8afc:	0080050e 	bge	zero,r2,8b14 <PanCalculateDynamic+0x58c>
    8b00:	00800074 	movhi	r2,1
    8b04:	10b94804 	addi	r2,r2,-6880
    8b08:	11000c17 	ldw	r4,48(r2)
    8b0c:	11400d17 	ldw	r5,52(r2)
    8b10:	00000406 	br	8b24 <PanCalculateDynamic+0x59c>
    8b14:	00800074 	movhi	r2,1
    8b18:	10b93404 	addi	r2,r2,-6960
    8b1c:	11000217 	ldw	r4,8(r2)
    8b20:	11400317 	ldw	r5,12(r2)

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	Pan_V[4] = ((Pan_V[1] < Pan_P[5]) ? 
		/* SignalLimiter2\minimum */
		Pan_P[5]
	:
    8b24:	2005883a 	mov	r2,r4
    8b28:	2807883a 	mov	r3,r5

	/* PID1\output = PID1\uI + PID1\uD; */
	Pan_V[1] = Pan_R[2] + Pan_R[0];

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	Pan_V[4] = ((Pan_V[1] < Pan_P[5]) ? 
    8b2c:	01000074 	movhi	r4,1
    8b30:	21393404 	addi	r4,r4,-6960
    8b34:	20800815 	stw	r2,32(r4)
    8b38:	20c00915 	stw	r3,36(r4)
		)
	);


	/* increment the step counter */
	Pan_steps++;
    8b3c:	d0a0ee17 	ldw	r2,-31816(gp)
    8b40:	10800044 	addi	r2,r2,1
    8b44:	d0a0ee15 	stw	r2,-31816(gp)
}
    8b48:	e037883a 	mov	sp,fp
    8b4c:	dfc00717 	ldw	ra,28(sp)
    8b50:	df000617 	ldw	fp,24(sp)
    8b54:	dd400517 	ldw	r21,20(sp)
    8b58:	dd000417 	ldw	r20,16(sp)
    8b5c:	dcc00317 	ldw	r19,12(sp)
    8b60:	dc800217 	ldw	r18,8(sp)
    8b64:	dc400117 	ldw	r17,4(sp)
    8b68:	dc000017 	ldw	r16,0(sp)
    8b6c:	dec00804 	addi	sp,sp,32
    8b70:	f800283a 	ret

00008b74 <PanCalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void PanCalculateOutput (void)
{
    8b74:	deffff04 	addi	sp,sp,-4
    8b78:	df000015 	stw	fp,0(sp)
    8b7c:	d839883a 	mov	fp,sp
	/* corr = corrGain\corr; */
	Pan_V[6] = Pan_V[0];
    8b80:	01000074 	movhi	r4,1
    8b84:	21393404 	addi	r4,r4,-6960
    8b88:	20800017 	ldw	r2,0(r4)
    8b8c:	20c00117 	ldw	r3,4(r4)
    8b90:	01000074 	movhi	r4,1
    8b94:	21393404 	addi	r4,r4,-6960
    8b98:	20800c15 	stw	r2,48(r4)
    8b9c:	20c00d15 	stw	r3,52(r4)

	/* out = SignalLimiter2\output; */
	Pan_V[9] = Pan_V[4];
    8ba0:	01000074 	movhi	r4,1
    8ba4:	21393404 	addi	r4,r4,-6960
    8ba8:	20800817 	ldw	r2,32(r4)
    8bac:	20c00917 	ldw	r3,36(r4)
    8bb0:	01000074 	movhi	r4,1
    8bb4:	21393404 	addi	r4,r4,-6960
    8bb8:	20801215 	stw	r2,72(r4)
    8bbc:	20c01315 	stw	r3,76(r4)

}
    8bc0:	e037883a 	mov	sp,fp
    8bc4:	df000017 	ldw	fp,0(sp)
    8bc8:	dec00104 	addi	sp,sp,4
    8bcc:	f800283a 	ret

00008bd0 <PanCalculateFinal>:
/* This function calculates the final equations of the model.
 * These equations are calculated after all the calculations
 * are performed
 */
void PanCalculateFinal (void)
{
    8bd0:	deffff04 	addi	sp,sp,-4
    8bd4:	df000015 	stw	fp,0(sp)
    8bd8:	d839883a 	mov	fp,sp

}
    8bdc:	e037883a 	mov	sp,fp
    8be0:	df000017 	ldw	fp,0(sp)
    8be4:	dec00104 	addi	sp,sp,4
    8be8:	f800283a 	ret

00008bec <PanModelTerminate>:

/* this method is called after all calculations are performed */
void PanModelTerminate(void)
{
    8bec:	deffff04 	addi	sp,sp,-4
    8bf0:	df000015 	stw	fp,0(sp)
    8bf4:	d839883a 	mov	fp,sp
}
    8bf8:	e037883a 	mov	sp,fp
    8bfc:	df000017 	ldw	fp,0(sp)
    8c00:	dec00104 	addi	sp,sp,4
    8c04:	f800283a 	ret

00008c08 <PanCopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void PanCopyInputsToVariables (XXDouble *u)
{
    8c08:	defffe04 	addi	sp,sp,-8
    8c0c:	df000115 	stw	fp,4(sp)
    8c10:	df000104 	addi	fp,sp,4
    8c14:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	Pan_V[7] = u[0];		/* in */
    8c18:	e13fff17 	ldw	r4,-4(fp)
    8c1c:	20800017 	ldw	r2,0(r4)
    8c20:	20c00117 	ldw	r3,4(r4)
    8c24:	01000074 	movhi	r4,1
    8c28:	21393404 	addi	r4,r4,-6960
    8c2c:	20800e15 	stw	r2,56(r4)
    8c30:	20c00f15 	stw	r3,60(r4)
	Pan_V[8] = u[1];		/* position */
    8c34:	e13fff17 	ldw	r4,-4(fp)
    8c38:	20800217 	ldw	r2,8(r4)
    8c3c:	20c00317 	ldw	r3,12(r4)
    8c40:	01000074 	movhi	r4,1
    8c44:	21393404 	addi	r4,r4,-6960
    8c48:	20801015 	stw	r2,64(r4)
    8c4c:	20c01115 	stw	r3,68(r4)

}
    8c50:	e037883a 	mov	sp,fp
    8c54:	df000017 	ldw	fp,0(sp)
    8c58:	dec00104 	addi	sp,sp,4
    8c5c:	f800283a 	ret

00008c60 <PanCopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void PanCopyVariablesToOutputs (XXDouble *y)
{
    8c60:	defffe04 	addi	sp,sp,-8
    8c64:	df000115 	stw	fp,4(sp)
    8c68:	df000104 	addi	fp,sp,4
    8c6c:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	Pan_V[6];		/* corr */
    8c70:	01000074 	movhi	r4,1
    8c74:	21393404 	addi	r4,r4,-6960
    8c78:	20800c17 	ldw	r2,48(r4)
    8c7c:	20c00d17 	ldw	r3,52(r4)
    8c80:	e13fff17 	ldw	r4,-4(fp)
    8c84:	20800015 	stw	r2,0(r4)
    8c88:	20c00115 	stw	r3,4(r4)
	y[1] = 	Pan_V[9];		/* out */
    8c8c:	e0bfff17 	ldw	r2,-4(fp)
    8c90:	11000204 	addi	r4,r2,8
    8c94:	01400074 	movhi	r5,1
    8c98:	29793404 	addi	r5,r5,-6960
    8c9c:	28801217 	ldw	r2,72(r5)
    8ca0:	28c01317 	ldw	r3,76(r5)
    8ca4:	20800015 	stw	r2,0(r4)
    8ca8:	20c00115 	stw	r3,4(r4)

}
    8cac:	e037883a 	mov	sp,fp
    8cb0:	df000017 	ldw	fp,0(sp)
    8cb4:	dec00104 	addi	sp,sp,4
    8cb8:	f800283a 	ret

00008cbc <PanInitializeSubmodel>:

/* The initialization function for submodel */
void PanInitializeSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    8cbc:	defffa04 	addi	sp,sp,-24
    8cc0:	dfc00515 	stw	ra,20(sp)
    8cc4:	df000415 	stw	fp,16(sp)
    8cc8:	df000404 	addi	fp,sp,16
    8ccc:	e13ffc15 	stw	r4,-16(fp)
    8cd0:	e17ffd15 	stw	r5,-12(fp)
    8cd4:	e1bffe15 	stw	r6,-8(fp)
    8cd8:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	Pan_initialize = XXTRUE;
    8cdc:	00800074 	movhi	r2,1
    8ce0:	10b83b04 	addi	r2,r2,-7956
    8ce4:	00c00044 	movi	r3,1
    8ce8:	10c00005 	stb	r3,0(r2)
	Pan_steps = 0;
    8cec:	00800074 	movhi	r2,1
    8cf0:	10b92504 	addi	r2,r2,-7020
    8cf4:	10000015 	stw	zero,0(r2)
	PanModelInitialize ();
    8cf8:	00085000 	call	8500 <PanModelInitialize>
	PanDiscreteInitialize ();
    8cfc:	00081f40 	call	81f4 <PanDiscreteInitialize>

	/* Copy the inputs */
	Pan_time = t;
    8d00:	00800074 	movhi	r2,1
    8d04:	10b92304 	addi	r2,r2,-7028
    8d08:	e0fffe17 	ldw	r3,-8(fp)
    8d0c:	10c00015 	stw	r3,0(r2)
    8d10:	e0ffff17 	ldw	r3,-4(fp)
    8d14:	10c00115 	stw	r3,4(r2)
	PanCopyInputsToVariables (u);
    8d18:	e13ffc17 	ldw	r4,-16(fp)
    8d1c:	0008c080 	call	8c08 <PanCopyInputsToVariables>

	/* Calculate the model for the first time */
	PanCalculateInitial ();
    8d20:	00085340 	call	8534 <PanCalculateInitial>
	PanCalculateStatic ();
    8d24:	00085500 	call	8550 <PanCalculateStatic>
	PanCalculateInput ();
    8d28:	000856c0 	call	856c <PanCalculateInput>
	PanCalculateDynamic ();
    8d2c:	00085880 	call	8588 <PanCalculateDynamic>
	PanCalculateOutput ();
    8d30:	0008b740 	call	8b74 <PanCalculateOutput>

	/* Set the outputs */
	PanCopyVariablesToOutputs (y);
    8d34:	e13ffd17 	ldw	r4,-12(fp)
    8d38:	0008c600 	call	8c60 <PanCopyVariablesToOutputs>

	/* End of initialization phase */
	Pan_initialize = XXFALSE;
    8d3c:	00800074 	movhi	r2,1
    8d40:	10b83b04 	addi	r2,r2,-7956
    8d44:	10000005 	stb	zero,0(r2)
}
    8d48:	e037883a 	mov	sp,fp
    8d4c:	dfc00117 	ldw	ra,4(sp)
    8d50:	df000017 	ldw	fp,0(sp)
    8d54:	dec00204 	addi	sp,sp,8
    8d58:	f800283a 	ret

00008d5c <PanCalculateSubmodel>:

/* The function that calculates the submodel */
void PanCalculateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    8d5c:	defffa04 	addi	sp,sp,-24
    8d60:	dfc00515 	stw	ra,20(sp)
    8d64:	df000415 	stw	fp,16(sp)
    8d68:	df000404 	addi	fp,sp,16
    8d6c:	e13ffc15 	stw	r4,-16(fp)
    8d70:	e17ffd15 	stw	r5,-12(fp)
    8d74:	e1bffe15 	stw	r6,-8(fp)
    8d78:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	Pan_time = t;
    8d7c:	00800074 	movhi	r2,1
    8d80:	10b92304 	addi	r2,r2,-7028
    8d84:	e0fffe17 	ldw	r3,-8(fp)
    8d88:	10c00015 	stw	r3,0(r2)
    8d8c:	e0ffff17 	ldw	r3,-4(fp)
    8d90:	10c00115 	stw	r3,4(r2)
	PanCopyInputsToVariables (u);
    8d94:	e13ffc17 	ldw	r4,-16(fp)
    8d98:	0008c080 	call	8c08 <PanCopyInputsToVariables>

	/* Calculate the model */
	PanCalculateInput ();
    8d9c:	000856c0 	call	856c <PanCalculateInput>
	PanDiscreteStep ();
    8da0:	000823c0 	call	823c <PanDiscreteStep>
	PanCalculateOutput ();
    8da4:	0008b740 	call	8b74 <PanCalculateOutput>

	/* Copy the outputs */
	PanCopyVariablesToOutputs (y);
    8da8:	e13ffd17 	ldw	r4,-12(fp)
    8dac:	0008c600 	call	8c60 <PanCopyVariablesToOutputs>
}
    8db0:	e037883a 	mov	sp,fp
    8db4:	dfc00117 	ldw	ra,4(sp)
    8db8:	df000017 	ldw	fp,0(sp)
    8dbc:	dec00204 	addi	sp,sp,8
    8dc0:	f800283a 	ret

00008dc4 <PanTerminateSubmodel>:

/* The termination function for submodel */
void PanTerminateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    8dc4:	defffa04 	addi	sp,sp,-24
    8dc8:	dfc00515 	stw	ra,20(sp)
    8dcc:	df000415 	stw	fp,16(sp)
    8dd0:	df000404 	addi	fp,sp,16
    8dd4:	e13ffc15 	stw	r4,-16(fp)
    8dd8:	e17ffd15 	stw	r5,-12(fp)
    8ddc:	e1bffe15 	stw	r6,-8(fp)
    8de0:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	Pan_time = t;
    8de4:	00800074 	movhi	r2,1
    8de8:	10b92304 	addi	r2,r2,-7028
    8dec:	e0fffe17 	ldw	r3,-8(fp)
    8df0:	10c00015 	stw	r3,0(r2)
    8df4:	e0ffff17 	ldw	r3,-4(fp)
    8df8:	10c00115 	stw	r3,4(r2)
	PanCopyInputsToVariables (u);
    8dfc:	e13ffc17 	ldw	r4,-16(fp)
    8e00:	0008c080 	call	8c08 <PanCopyInputsToVariables>

	/* Calculate the final model equations */
	PanCalculateFinal ();
    8e04:	0008bd00 	call	8bd0 <PanCalculateFinal>

	/* Set the outputs */
	PanCopyVariablesToOutputs (y);
    8e08:	e13ffd17 	ldw	r4,-12(fp)
    8e0c:	0008c600 	call	8c60 <PanCopyVariablesToOutputs>

	/* and terminate the model itself (releasing memory) */
	PanModelTerminate ();
    8e10:	0008bec0 	call	8bec <PanModelTerminate>
	PanDiscreteTerminate ();
    8e14:	00082200 	call	8220 <PanDiscreteTerminate>
}
    8e18:	e037883a 	mov	sp,fp
    8e1c:	dfc00117 	ldw	ra,4(sp)
    8e20:	df000017 	ldw	fp,0(sp)
    8e24:	dec00204 	addi	sp,sp,8
    8e28:	f800283a 	ret

00008e2c <TiltDiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void TiltDiscreteInitialize (void)
{
    8e2c:	deffff04 	addi	sp,sp,-4
    8e30:	df000015 	stw	fp,0(sp)
    8e34:	d839883a 	mov	fp,sp
	/* nothing to be done */
	Tilt_major = XXTRUE;
    8e38:	00800074 	movhi	r2,1
    8e3c:	10b84244 	addi	r2,r2,-7927
    8e40:	00c00044 	movi	r3,1
    8e44:	10c00005 	stb	r3,0(r2)
}
    8e48:	e037883a 	mov	sp,fp
    8e4c:	df000017 	ldw	fp,0(sp)
    8e50:	dec00104 	addi	sp,sp,4
    8e54:	f800283a 	ret

00008e58 <TiltDiscreteTerminate>:

/* the termination of the Discrete integration method */
void TiltDiscreteTerminate (void)
{
    8e58:	deffff04 	addi	sp,sp,-4
    8e5c:	df000015 	stw	fp,0(sp)
    8e60:	d839883a 	mov	fp,sp
	/* nothing to be done */
}
    8e64:	e037883a 	mov	sp,fp
    8e68:	df000017 	ldw	fp,0(sp)
    8e6c:	dec00104 	addi	sp,sp,4
    8e70:	f800283a 	ret

00008e74 <TiltDiscreteStep>:

/* the Discrete integration method itself */
void TiltDiscreteStep (void)
{
    8e74:	defffd04 	addi	sp,sp,-12
    8e78:	dfc00215 	stw	ra,8(sp)
    8e7c:	df000115 	stw	fp,4(sp)
    8e80:	df000104 	addi	fp,sp,4
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    8e84:	e03fff15 	stw	zero,-4(fp)
    8e88:	00001106 	br	8ed0 <TiltDiscreteStep+0x5c>
	{
		/* just a move of the new state */
		Tilt_s [index] = Tilt_R [index];
    8e8c:	00c00074 	movhi	r3,1
    8e90:	18f99404 	addi	r3,r3,-6576
    8e94:	e0bfff17 	ldw	r2,-4(fp)
    8e98:	100490fa 	slli	r2,r2,3
    8e9c:	1889883a 	add	r4,r3,r2
    8ea0:	20800017 	ldw	r2,0(r4)
    8ea4:	20c00117 	ldw	r3,4(r4)
    8ea8:	01400074 	movhi	r5,1
    8eac:	29799a04 	addi	r5,r5,-6552
    8eb0:	e13fff17 	ldw	r4,-4(fp)
    8eb4:	200890fa 	slli	r4,r4,3
    8eb8:	2909883a 	add	r4,r5,r4
    8ebc:	20800015 	stw	r2,0(r4)
    8ec0:	20c00115 	stw	r3,4(r4)
void TiltDiscreteStep (void)
{
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    8ec4:	e0bfff17 	ldw	r2,-4(fp)
    8ec8:	10800044 	addi	r2,r2,1
    8ecc:	e0bfff15 	stw	r2,-4(fp)
    8ed0:	e0bfff17 	ldw	r2,-4(fp)
    8ed4:	108000d0 	cmplti	r2,r2,3
    8ed8:	103fec1e 	bne	r2,zero,8e8c <TiltDiscreteStep+0x18>
	{
		/* just a move of the new state */
		Tilt_s [index] = Tilt_R [index];
	}
	/* increment the simulation time */
	Tilt_time += Tilt_step_size;
    8edc:	00800074 	movhi	r2,1
    8ee0:	10b92904 	addi	r2,r2,-7004
    8ee4:	11400017 	ldw	r5,0(r2)
    8ee8:	11800117 	ldw	r6,4(r2)
    8eec:	01000074 	movhi	r4,1
    8ef0:	21384004 	addi	r4,r4,-7936
    8ef4:	20800017 	ldw	r2,0(r4)
    8ef8:	20c00117 	ldw	r3,4(r4)
    8efc:	2809883a 	mov	r4,r5
    8f00:	300b883a 	mov	r5,r6
    8f04:	100d883a 	mov	r6,r2
    8f08:	180f883a 	mov	r7,r3
    8f0c:	000a63c0 	call	a63c <__adddf3>
    8f10:	1009883a 	mov	r4,r2
    8f14:	180b883a 	mov	r5,r3
    8f18:	2005883a 	mov	r2,r4
    8f1c:	2807883a 	mov	r3,r5
    8f20:	01000074 	movhi	r4,1
    8f24:	21392904 	addi	r4,r4,-7004
    8f28:	20800015 	stw	r2,0(r4)
    8f2c:	20c00115 	stw	r3,4(r4)

	Tilt_major = XXTRUE;
    8f30:	00800074 	movhi	r2,1
    8f34:	10b84244 	addi	r2,r2,-7927
    8f38:	00c00044 	movi	r3,1
    8f3c:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	TiltCalculateDynamic ();
    8f40:	00091c00 	call	91c0 <TiltCalculateDynamic>
}
    8f44:	e037883a 	mov	sp,fp
    8f48:	dfc00117 	ldw	ra,4(sp)
    8f4c:	df000017 	ldw	fp,0(sp)
    8f50:	dec00204 	addi	sp,sp,8
    8f54:	f800283a 	ret

00008f58 <TiltModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void TiltModelInitialize_parameters(void)
{
    8f58:	deffff04 	addi	sp,sp,-4
    8f5c:	df000015 	stw	fp,0(sp)
    8f60:	d839883a 	mov	fp,sp
	/* set the parameters */
	Tilt_P[0] = 0.0;		/* corrGain\K */
    8f64:	00800074 	movhi	r2,1
    8f68:	10b98604 	addi	r2,r2,-6632
    8f6c:	10000015 	stw	zero,0(r2)
    8f70:	10000115 	stw	zero,4(r2)
	Tilt_P[1] = 1.6;		/* PID1\kp */
    8f74:	00800074 	movhi	r2,1
    8f78:	10b98604 	addi	r2,r2,-6632
    8f7c:	00e666b4 	movhi	r3,39322
    8f80:	18e66684 	addi	r3,r3,-26214
    8f84:	10c00215 	stw	r3,8(r2)
    8f88:	00cffeb4 	movhi	r3,16378
    8f8c:	18e66644 	addi	r3,r3,-26215
    8f90:	10c00315 	stw	r3,12(r2)
	Tilt_P[2] = 0.05;		/* PID1\tauD */
    8f94:	00800074 	movhi	r2,1
    8f98:	10b98604 	addi	r2,r2,-6632
    8f9c:	00e666b4 	movhi	r3,39322
    8fa0:	18e66684 	addi	r3,r3,-26214
    8fa4:	10c00415 	stw	r3,16(r2)
    8fa8:	00cfeab4 	movhi	r3,16298
    8fac:	18e66644 	addi	r3,r3,-26215
    8fb0:	10c00515 	stw	r3,20(r2)
	Tilt_P[3] = 0.001;		/* PID1\beta */
    8fb4:	00800074 	movhi	r2,1
    8fb8:	10b98604 	addi	r2,r2,-6632
    8fbc:	00f4bcb4 	movhi	r3,54002
    8fc0:	18ea7f04 	addi	r3,r3,-22020
    8fc4:	10c00615 	stw	r3,24(r2)
    8fc8:	00cfd434 	movhi	r3,16208
    8fcc:	18d89344 	addi	r3,r3,25165
    8fd0:	10c00715 	stw	r3,28(r2)
	Tilt_P[4] = 10.5;		/* PID1\tauI */
    8fd4:	00800074 	movhi	r2,1
    8fd8:	10b98604 	addi	r2,r2,-6632
    8fdc:	10000815 	stw	zero,32(r2)
    8fe0:	00d00974 	movhi	r3,16421
    8fe4:	10c00915 	stw	r3,36(r2)
	Tilt_P[5] = -0.99;		/* SignalLimiter2\minimum */
    8fe8:	00800074 	movhi	r2,1
    8fec:	10b98604 	addi	r2,r2,-6632
    8ff0:	00deb874 	movhi	r3,31457
    8ff4:	18d1eb84 	addi	r3,r3,18350
    8ff8:	10c00a15 	stw	r3,40(r2)
    8ffc:	00effc34 	movhi	r3,49136
    9000:	18eb8504 	addi	r3,r3,-20972
    9004:	10c00b15 	stw	r3,44(r2)
	Tilt_P[6] = 0.99;		/* SignalLimiter2\maximum */
    9008:	00800074 	movhi	r2,1
    900c:	10b98604 	addi	r2,r2,-6632
    9010:	00deb874 	movhi	r3,31457
    9014:	18d1eb84 	addi	r3,r3,18350
    9018:	10c00c15 	stw	r3,48(r2)
    901c:	00cffc34 	movhi	r3,16368
    9020:	18eb8504 	addi	r3,r3,-20972
    9024:	10c00d15 	stw	r3,52(r2)

}
    9028:	e037883a 	mov	sp,fp
    902c:	df000017 	ldw	fp,0(sp)
    9030:	dec00104 	addi	sp,sp,4
    9034:	f800283a 	ret

00009038 <TiltModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void TiltModelInitialize_initialvalues(void)
{
    9038:	deffff04 	addi	sp,sp,-4
    903c:	df000015 	stw	fp,0(sp)
    9040:	d839883a 	mov	fp,sp
	/* set the initial values */
	Tilt_I[0] = 0.0;		/* PID1\uD_previous_initial */
    9044:	00800074 	movhi	r2,1
    9048:	10b98004 	addi	r2,r2,-6656
    904c:	10000015 	stw	zero,0(r2)
    9050:	10000115 	stw	zero,4(r2)
	Tilt_I[1] = 0.0;		/* PID1\error_previous_initial */
    9054:	00800074 	movhi	r2,1
    9058:	10b98004 	addi	r2,r2,-6656
    905c:	10000215 	stw	zero,8(r2)
    9060:	10000315 	stw	zero,12(r2)
	Tilt_I[2] = 0.0;		/* PID1\uI_previous_initial */
    9064:	00800074 	movhi	r2,1
    9068:	10b98004 	addi	r2,r2,-6656
    906c:	10000415 	stw	zero,16(r2)
    9070:	10000515 	stw	zero,20(r2)

}
    9074:	e037883a 	mov	sp,fp
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00104 	addi	sp,sp,4
    9080:	f800283a 	ret

00009084 <TiltModelInitialize_states>:

void TiltModelInitialize_states(void)
{
    9084:	deffff04 	addi	sp,sp,-4
    9088:	df000015 	stw	fp,0(sp)
    908c:	d839883a 	mov	fp,sp
	/* set the states */
	Tilt_s[0] = Tilt_I[0];		/* PID1\uD_previous */
    9090:	01000074 	movhi	r4,1
    9094:	21398004 	addi	r4,r4,-6656
    9098:	20800017 	ldw	r2,0(r4)
    909c:	20c00117 	ldw	r3,4(r4)
    90a0:	01000074 	movhi	r4,1
    90a4:	21399a04 	addi	r4,r4,-6552
    90a8:	20800015 	stw	r2,0(r4)
    90ac:	20c00115 	stw	r3,4(r4)
	Tilt_s[1] = Tilt_I[1];		/* PID1\error_previous */
    90b0:	01000074 	movhi	r4,1
    90b4:	21398004 	addi	r4,r4,-6656
    90b8:	20800217 	ldw	r2,8(r4)
    90bc:	20c00317 	ldw	r3,12(r4)
    90c0:	01000074 	movhi	r4,1
    90c4:	21399a04 	addi	r4,r4,-6552
    90c8:	20800215 	stw	r2,8(r4)
    90cc:	20c00315 	stw	r3,12(r4)
	Tilt_s[2] = Tilt_I[2];		/* PID1\uI_previous */
    90d0:	01000074 	movhi	r4,1
    90d4:	21398004 	addi	r4,r4,-6656
    90d8:	20800417 	ldw	r2,16(r4)
    90dc:	20c00517 	ldw	r3,20(r4)
    90e0:	01000074 	movhi	r4,1
    90e4:	21399a04 	addi	r4,r4,-6552
    90e8:	20800415 	stw	r2,16(r4)
    90ec:	20c00515 	stw	r3,20(r4)

}
    90f0:	e037883a 	mov	sp,fp
    90f4:	df000017 	ldw	fp,0(sp)
    90f8:	dec00104 	addi	sp,sp,4
    90fc:	f800283a 	ret

00009100 <TiltModelInitialize_variables>:

void TiltModelInitialize_variables(void)
{
    9100:	defffe04 	addi	sp,sp,-8
    9104:	dfc00115 	stw	ra,4(sp)
    9108:	df000015 	stw	fp,0(sp)
    910c:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(Tilt_V, 0, xx_variables_size * sizeof(XXDouble));
    9110:	01000074 	movhi	r4,1
    9114:	21396804 	addi	r4,r4,-6752
    9118:	000b883a 	mov	r5,zero
    911c:	01801804 	movi	r6,96
    9120:	000b6800 	call	b680 <memset>
}
    9124:	e037883a 	mov	sp,fp
    9128:	dfc00117 	ldw	ra,4(sp)
    912c:	df000017 	ldw	fp,0(sp)
    9130:	dec00204 	addi	sp,sp,8
    9134:	f800283a 	ret

00009138 <TiltModelInitialize>:

/* this method is called before calculation is possible */
void TiltModelInitialize (void)
{
    9138:	defffe04 	addi	sp,sp,-8
    913c:	dfc00115 	stw	ra,4(sp)
    9140:	df000015 	stw	fp,0(sp)
    9144:	d839883a 	mov	fp,sp
	TiltModelInitialize_parameters();
    9148:	0008f580 	call	8f58 <TiltModelInitialize_parameters>
	TiltModelInitialize_variables();
    914c:	00091000 	call	9100 <TiltModelInitialize_variables>
	TiltModelInitialize_initialvalues();
    9150:	00090380 	call	9038 <TiltModelInitialize_initialvalues>
	TiltModelInitialize_states();
    9154:	00090840 	call	9084 <TiltModelInitialize_states>
}
    9158:	e037883a 	mov	sp,fp
    915c:	dfc00117 	ldw	ra,4(sp)
    9160:	df000017 	ldw	fp,0(sp)
    9164:	dec00204 	addi	sp,sp,8
    9168:	f800283a 	ret

0000916c <TiltCalculateInitial>:

/* This function calculates the initial equations of the model.
 * These equations are calculated before anything else
 */
void TiltCalculateInitial (void)
{
    916c:	deffff04 	addi	sp,sp,-4
    9170:	df000015 	stw	fp,0(sp)
    9174:	d839883a 	mov	fp,sp

}
    9178:	e037883a 	mov	sp,fp
    917c:	df000017 	ldw	fp,0(sp)
    9180:	dec00104 	addi	sp,sp,4
    9184:	f800283a 	ret

00009188 <TiltCalculateStatic>:

/* This function calculates the static equations of the model.
 * These equations are only dependent from parameters and constants
 */
void TiltCalculateStatic (void)
{
    9188:	deffff04 	addi	sp,sp,-4
    918c:	df000015 	stw	fp,0(sp)
    9190:	d839883a 	mov	fp,sp

}
    9194:	e037883a 	mov	sp,fp
    9198:	df000017 	ldw	fp,0(sp)
    919c:	dec00104 	addi	sp,sp,4
    91a0:	f800283a 	ret

000091a4 <TiltCalculateInput>:
/* This function calculates the input equations of the model.
 * These equations are dynamic equations that must not change
 * in calls from the integration method (like random and delay).
 */
void TiltCalculateInput (void)
{
    91a4:	deffff04 	addi	sp,sp,-4
    91a8:	df000015 	stw	fp,0(sp)
    91ac:	d839883a 	mov	fp,sp

}
    91b0:	e037883a 	mov	sp,fp
    91b4:	df000017 	ldw	fp,0(sp)
    91b8:	dec00104 	addi	sp,sp,4
    91bc:	f800283a 	ret

000091c0 <TiltCalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void TiltCalculateDynamic (void)
{
    91c0:	defff804 	addi	sp,sp,-32
    91c4:	dfc00715 	stw	ra,28(sp)
    91c8:	df000615 	stw	fp,24(sp)
    91cc:	dd400515 	stw	r21,20(sp)
    91d0:	dd000415 	stw	r20,16(sp)
    91d4:	dcc00315 	stw	r19,12(sp)
    91d8:	dc800215 	stw	r18,8(sp)
    91dc:	dc400115 	stw	r17,4(sp)
    91e0:	dc000015 	stw	r16,0(sp)
    91e4:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	Tilt_V[3] = 1.0 / (Tilt_step_size + Tilt_P[2] * Tilt_P[3]);
    91e8:	00800074 	movhi	r2,1
    91ec:	10b98604 	addi	r2,r2,-6632
    91f0:	11400417 	ldw	r5,16(r2)
    91f4:	11800517 	ldw	r6,20(r2)
    91f8:	01000074 	movhi	r4,1
    91fc:	21398604 	addi	r4,r4,-6632
    9200:	20800617 	ldw	r2,24(r4)
    9204:	20c00717 	ldw	r3,28(r4)
    9208:	2809883a 	mov	r4,r5
    920c:	300b883a 	mov	r5,r6
    9210:	100d883a 	mov	r6,r2
    9214:	180f883a 	mov	r7,r3
    9218:	000a6f00 	call	a6f0 <__muldf3>
    921c:	100f883a 	mov	r7,r2
    9220:	1811883a 	mov	r8,r3
    9224:	380b883a 	mov	r5,r7
    9228:	400d883a 	mov	r6,r8
    922c:	d0a00917 	ldw	r2,-32732(gp)
    9230:	01000074 	movhi	r4,1
    9234:	21384104 	addi	r4,r4,-7932
    9238:	20c00017 	ldw	r3,0(r4)
    923c:	2809883a 	mov	r4,r5
    9240:	300b883a 	mov	r5,r6
    9244:	100d883a 	mov	r6,r2
    9248:	180f883a 	mov	r7,r3
    924c:	000a63c0 	call	a63c <__adddf3>
    9250:	1009883a 	mov	r4,r2
    9254:	180b883a 	mov	r5,r3
    9258:	2005883a 	mov	r2,r4
    925c:	2807883a 	mov	r3,r5
    9260:	0009883a 	mov	r4,zero
    9264:	014ffc34 	movhi	r5,16368
    9268:	100d883a 	mov	r6,r2
    926c:	180f883a 	mov	r7,r3
    9270:	000a9d40 	call	a9d4 <__divdf3>
    9274:	1009883a 	mov	r4,r2
    9278:	180b883a 	mov	r5,r3
    927c:	2005883a 	mov	r2,r4
    9280:	2807883a 	mov	r3,r5
    9284:	01000074 	movhi	r4,1
    9288:	21396804 	addi	r4,r4,-6752
    928c:	20800615 	stw	r2,24(r4)
    9290:	20c00715 	stw	r3,28(r4)

	/* corrGain\input = corr; */
	Tilt_V[0] = Tilt_V[8];
    9294:	01000074 	movhi	r4,1
    9298:	21396804 	addi	r4,r4,-6752
    929c:	20801017 	ldw	r2,64(r4)
    92a0:	20c01117 	ldw	r3,68(r4)
    92a4:	01000074 	movhi	r4,1
    92a8:	21396804 	addi	r4,r4,-6752
    92ac:	20800015 	stw	r2,0(r4)
    92b0:	20c00115 	stw	r3,4(r4)

	/* PlusMinus2\plus1 = in; */
	Tilt_V[5] = Tilt_V[9];
    92b4:	01000074 	movhi	r4,1
    92b8:	21396804 	addi	r4,r4,-6752
    92bc:	20801217 	ldw	r2,72(r4)
    92c0:	20c01317 	ldw	r3,76(r4)
    92c4:	01000074 	movhi	r4,1
    92c8:	21396804 	addi	r4,r4,-6752
    92cc:	20800a15 	stw	r2,40(r4)
    92d0:	20c00b15 	stw	r3,44(r4)

	/* PlusMinus2\minus1 = position; */
	Tilt_V[6] = Tilt_V[10];
    92d4:	01000074 	movhi	r4,1
    92d8:	21396804 	addi	r4,r4,-6752
    92dc:	20801417 	ldw	r2,80(r4)
    92e0:	20c01517 	ldw	r3,84(r4)
    92e4:	01000074 	movhi	r4,1
    92e8:	21396804 	addi	r4,r4,-6752
    92ec:	20800c15 	stw	r2,48(r4)
    92f0:	20c00d15 	stw	r3,52(r4)

	/* corrGain\output = corrGain\K * corrGain\input; */
	Tilt_V[1] = Tilt_P[0] * Tilt_V[0];
    92f4:	00800074 	movhi	r2,1
    92f8:	10b98604 	addi	r2,r2,-6632
    92fc:	11400017 	ldw	r5,0(r2)
    9300:	11800117 	ldw	r6,4(r2)
    9304:	01000074 	movhi	r4,1
    9308:	21396804 	addi	r4,r4,-6752
    930c:	20800017 	ldw	r2,0(r4)
    9310:	20c00117 	ldw	r3,4(r4)
    9314:	2809883a 	mov	r4,r5
    9318:	300b883a 	mov	r5,r6
    931c:	100d883a 	mov	r6,r2
    9320:	180f883a 	mov	r7,r3
    9324:	000a6f00 	call	a6f0 <__muldf3>
    9328:	1009883a 	mov	r4,r2
    932c:	180b883a 	mov	r5,r3
    9330:	2005883a 	mov	r2,r4
    9334:	2807883a 	mov	r3,r5
    9338:	01000074 	movhi	r4,1
    933c:	21396804 	addi	r4,r4,-6752
    9340:	20800215 	stw	r2,8(r4)
    9344:	20c00315 	stw	r3,12(r4)

	/* PID1\error = PlusMinus2\plus1 - PlusMinus2\minus1; */
	Tilt_R[1] = Tilt_V[5] - Tilt_V[6];
    9348:	00800074 	movhi	r2,1
    934c:	10b96804 	addi	r2,r2,-6752
    9350:	11400a17 	ldw	r5,40(r2)
    9354:	11800b17 	ldw	r6,44(r2)
    9358:	01000074 	movhi	r4,1
    935c:	21396804 	addi	r4,r4,-6752
    9360:	20800c17 	ldw	r2,48(r4)
    9364:	20c00d17 	ldw	r3,52(r4)
    9368:	2809883a 	mov	r4,r5
    936c:	300b883a 	mov	r5,r6
    9370:	100d883a 	mov	r6,r2
    9374:	180f883a 	mov	r7,r3
    9378:	000a6900 	call	a690 <__subdf3>
    937c:	1009883a 	mov	r4,r2
    9380:	180b883a 	mov	r5,r3
    9384:	2005883a 	mov	r2,r4
    9388:	2807883a 	mov	r3,r5
    938c:	01000074 	movhi	r4,1
    9390:	21399404 	addi	r4,r4,-6576
    9394:	20800215 	stw	r2,8(r4)
    9398:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	Tilt_R[0] = Tilt_V[3] * (((Tilt_P[2] * Tilt_s[0]) * Tilt_P[3] + (Tilt_P[2] * Tilt_P[1]) * (Tilt_R[1] - Tilt_s[1])) + (Tilt_step_size * Tilt_P[1]) * Tilt_R[1]);
    939c:	00800074 	movhi	r2,1
    93a0:	10b96804 	addi	r2,r2,-6752
    93a4:	14000617 	ldw	r16,24(r2)
    93a8:	14400717 	ldw	r17,28(r2)
    93ac:	00800074 	movhi	r2,1
    93b0:	10b98604 	addi	r2,r2,-6632
    93b4:	11400417 	ldw	r5,16(r2)
    93b8:	11800517 	ldw	r6,20(r2)
    93bc:	01000074 	movhi	r4,1
    93c0:	21399a04 	addi	r4,r4,-6552
    93c4:	20800017 	ldw	r2,0(r4)
    93c8:	20c00117 	ldw	r3,4(r4)
    93cc:	2809883a 	mov	r4,r5
    93d0:	300b883a 	mov	r5,r6
    93d4:	100d883a 	mov	r6,r2
    93d8:	180f883a 	mov	r7,r3
    93dc:	000a6f00 	call	a6f0 <__muldf3>
    93e0:	100f883a 	mov	r7,r2
    93e4:	1811883a 	mov	r8,r3
    93e8:	380b883a 	mov	r5,r7
    93ec:	400d883a 	mov	r6,r8
    93f0:	01000074 	movhi	r4,1
    93f4:	21398604 	addi	r4,r4,-6632
    93f8:	20800617 	ldw	r2,24(r4)
    93fc:	20c00717 	ldw	r3,28(r4)
    9400:	2809883a 	mov	r4,r5
    9404:	300b883a 	mov	r5,r6
    9408:	100d883a 	mov	r6,r2
    940c:	180f883a 	mov	r7,r3
    9410:	000a6f00 	call	a6f0 <__muldf3>
    9414:	1009883a 	mov	r4,r2
    9418:	180b883a 	mov	r5,r3
    941c:	2025883a 	mov	r18,r4
    9420:	2827883a 	mov	r19,r5
    9424:	00800074 	movhi	r2,1
    9428:	10b98604 	addi	r2,r2,-6632
    942c:	11400417 	ldw	r5,16(r2)
    9430:	11800517 	ldw	r6,20(r2)
    9434:	01000074 	movhi	r4,1
    9438:	21398604 	addi	r4,r4,-6632
    943c:	20800217 	ldw	r2,8(r4)
    9440:	20c00317 	ldw	r3,12(r4)
    9444:	2809883a 	mov	r4,r5
    9448:	300b883a 	mov	r5,r6
    944c:	100d883a 	mov	r6,r2
    9450:	180f883a 	mov	r7,r3
    9454:	000a6f00 	call	a6f0 <__muldf3>
    9458:	1009883a 	mov	r4,r2
    945c:	180b883a 	mov	r5,r3
    9460:	2029883a 	mov	r20,r4
    9464:	282b883a 	mov	r21,r5
    9468:	00800074 	movhi	r2,1
    946c:	10b99404 	addi	r2,r2,-6576
    9470:	11400217 	ldw	r5,8(r2)
    9474:	11800317 	ldw	r6,12(r2)
    9478:	01000074 	movhi	r4,1
    947c:	21399a04 	addi	r4,r4,-6552
    9480:	20800217 	ldw	r2,8(r4)
    9484:	20c00317 	ldw	r3,12(r4)
    9488:	2809883a 	mov	r4,r5
    948c:	300b883a 	mov	r5,r6
    9490:	100d883a 	mov	r6,r2
    9494:	180f883a 	mov	r7,r3
    9498:	000a6900 	call	a690 <__subdf3>
    949c:	1009883a 	mov	r4,r2
    94a0:	180b883a 	mov	r5,r3
    94a4:	2005883a 	mov	r2,r4
    94a8:	2807883a 	mov	r3,r5
    94ac:	a009883a 	mov	r4,r20
    94b0:	a80b883a 	mov	r5,r21
    94b4:	100d883a 	mov	r6,r2
    94b8:	180f883a 	mov	r7,r3
    94bc:	000a6f00 	call	a6f0 <__muldf3>
    94c0:	1009883a 	mov	r4,r2
    94c4:	180b883a 	mov	r5,r3
    94c8:	2005883a 	mov	r2,r4
    94cc:	2807883a 	mov	r3,r5
    94d0:	9009883a 	mov	r4,r18
    94d4:	980b883a 	mov	r5,r19
    94d8:	100d883a 	mov	r6,r2
    94dc:	180f883a 	mov	r7,r3
    94e0:	000a63c0 	call	a63c <__adddf3>
    94e4:	1009883a 	mov	r4,r2
    94e8:	180b883a 	mov	r5,r3
    94ec:	2025883a 	mov	r18,r4
    94f0:	2827883a 	mov	r19,r5
    94f4:	00800074 	movhi	r2,1
    94f8:	10b98604 	addi	r2,r2,-6632
    94fc:	11400217 	ldw	r5,8(r2)
    9500:	11800317 	ldw	r6,12(r2)
    9504:	d0a00917 	ldw	r2,-32732(gp)
    9508:	01000074 	movhi	r4,1
    950c:	21384104 	addi	r4,r4,-7932
    9510:	20c00017 	ldw	r3,0(r4)
    9514:	2809883a 	mov	r4,r5
    9518:	300b883a 	mov	r5,r6
    951c:	100d883a 	mov	r6,r2
    9520:	180f883a 	mov	r7,r3
    9524:	000a6f00 	call	a6f0 <__muldf3>
    9528:	100f883a 	mov	r7,r2
    952c:	1811883a 	mov	r8,r3
    9530:	380b883a 	mov	r5,r7
    9534:	400d883a 	mov	r6,r8
    9538:	01000074 	movhi	r4,1
    953c:	21399404 	addi	r4,r4,-6576
    9540:	20800217 	ldw	r2,8(r4)
    9544:	20c00317 	ldw	r3,12(r4)
    9548:	2809883a 	mov	r4,r5
    954c:	300b883a 	mov	r5,r6
    9550:	100d883a 	mov	r6,r2
    9554:	180f883a 	mov	r7,r3
    9558:	000a6f00 	call	a6f0 <__muldf3>
    955c:	1009883a 	mov	r4,r2
    9560:	180b883a 	mov	r5,r3
    9564:	2005883a 	mov	r2,r4
    9568:	2807883a 	mov	r3,r5
    956c:	9009883a 	mov	r4,r18
    9570:	980b883a 	mov	r5,r19
    9574:	100d883a 	mov	r6,r2
    9578:	180f883a 	mov	r7,r3
    957c:	000a63c0 	call	a63c <__adddf3>
    9580:	1009883a 	mov	r4,r2
    9584:	180b883a 	mov	r5,r3
    9588:	2005883a 	mov	r2,r4
    958c:	2807883a 	mov	r3,r5
    9590:	8009883a 	mov	r4,r16
    9594:	880b883a 	mov	r5,r17
    9598:	100d883a 	mov	r6,r2
    959c:	180f883a 	mov	r7,r3
    95a0:	000a6f00 	call	a6f0 <__muldf3>
    95a4:	1009883a 	mov	r4,r2
    95a8:	180b883a 	mov	r5,r3
    95ac:	2005883a 	mov	r2,r4
    95b0:	2807883a 	mov	r3,r5
    95b4:	01000074 	movhi	r4,1
    95b8:	21399404 	addi	r4,r4,-6576
    95bc:	20800015 	stw	r2,0(r4)
    95c0:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	Tilt_R[2] = Tilt_s[2] + (Tilt_step_size * Tilt_R[0]) / Tilt_P[4];
    95c4:	00800074 	movhi	r2,1
    95c8:	10b99a04 	addi	r2,r2,-6552
    95cc:	14000417 	ldw	r16,16(r2)
    95d0:	14400517 	ldw	r17,20(r2)
    95d4:	00800074 	movhi	r2,1
    95d8:	10b99404 	addi	r2,r2,-6576
    95dc:	11400017 	ldw	r5,0(r2)
    95e0:	11800117 	ldw	r6,4(r2)
    95e4:	d0a00917 	ldw	r2,-32732(gp)
    95e8:	01000074 	movhi	r4,1
    95ec:	21384104 	addi	r4,r4,-7932
    95f0:	20c00017 	ldw	r3,0(r4)
    95f4:	2809883a 	mov	r4,r5
    95f8:	300b883a 	mov	r5,r6
    95fc:	100d883a 	mov	r6,r2
    9600:	180f883a 	mov	r7,r3
    9604:	000a6f00 	call	a6f0 <__muldf3>
    9608:	100f883a 	mov	r7,r2
    960c:	1811883a 	mov	r8,r3
    9610:	380b883a 	mov	r5,r7
    9614:	400d883a 	mov	r6,r8
    9618:	01000074 	movhi	r4,1
    961c:	21398604 	addi	r4,r4,-6632
    9620:	20800817 	ldw	r2,32(r4)
    9624:	20c00917 	ldw	r3,36(r4)
    9628:	2809883a 	mov	r4,r5
    962c:	300b883a 	mov	r5,r6
    9630:	100d883a 	mov	r6,r2
    9634:	180f883a 	mov	r7,r3
    9638:	000a9d40 	call	a9d4 <__divdf3>
    963c:	1009883a 	mov	r4,r2
    9640:	180b883a 	mov	r5,r3
    9644:	2005883a 	mov	r2,r4
    9648:	2807883a 	mov	r3,r5
    964c:	8009883a 	mov	r4,r16
    9650:	880b883a 	mov	r5,r17
    9654:	100d883a 	mov	r6,r2
    9658:	180f883a 	mov	r7,r3
    965c:	000a63c0 	call	a63c <__adddf3>
    9660:	1009883a 	mov	r4,r2
    9664:	180b883a 	mov	r5,r3
    9668:	2005883a 	mov	r2,r4
    966c:	2807883a 	mov	r3,r5
    9670:	01000074 	movhi	r4,1
    9674:	21399404 	addi	r4,r4,-6576
    9678:	20800415 	stw	r2,16(r4)
    967c:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	Tilt_V[2] = Tilt_R[2] + Tilt_R[0];
    9680:	00800074 	movhi	r2,1
    9684:	10b99404 	addi	r2,r2,-6576
    9688:	11400417 	ldw	r5,16(r2)
    968c:	11800517 	ldw	r6,20(r2)
    9690:	01000074 	movhi	r4,1
    9694:	21399404 	addi	r4,r4,-6576
    9698:	20800017 	ldw	r2,0(r4)
    969c:	20c00117 	ldw	r3,4(r4)
    96a0:	2809883a 	mov	r4,r5
    96a4:	300b883a 	mov	r5,r6
    96a8:	100d883a 	mov	r6,r2
    96ac:	180f883a 	mov	r7,r3
    96b0:	000a63c0 	call	a63c <__adddf3>
    96b4:	1009883a 	mov	r4,r2
    96b8:	180b883a 	mov	r5,r3
    96bc:	2005883a 	mov	r2,r4
    96c0:	2807883a 	mov	r3,r5
    96c4:	01000074 	movhi	r4,1
    96c8:	21396804 	addi	r4,r4,-6752
    96cc:	20800415 	stw	r2,16(r4)
    96d0:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	Tilt_V[4] = Tilt_V[1] + Tilt_V[2];
    96d4:	00800074 	movhi	r2,1
    96d8:	10b96804 	addi	r2,r2,-6752
    96dc:	11400217 	ldw	r5,8(r2)
    96e0:	11800317 	ldw	r6,12(r2)
    96e4:	01000074 	movhi	r4,1
    96e8:	21396804 	addi	r4,r4,-6752
    96ec:	20800417 	ldw	r2,16(r4)
    96f0:	20c00517 	ldw	r3,20(r4)
    96f4:	2809883a 	mov	r4,r5
    96f8:	300b883a 	mov	r5,r6
    96fc:	100d883a 	mov	r6,r2
    9700:	180f883a 	mov	r7,r3
    9704:	000a63c0 	call	a63c <__adddf3>
    9708:	1009883a 	mov	r4,r2
    970c:	180b883a 	mov	r5,r3
    9710:	2005883a 	mov	r2,r4
    9714:	2807883a 	mov	r3,r5
    9718:	01000074 	movhi	r4,1
    971c:	21396804 	addi	r4,r4,-6752
    9720:	20800815 	stw	r2,32(r4)
    9724:	20c00915 	stw	r3,36(r4)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	Tilt_V[7] = ((Tilt_V[4] < Tilt_P[5]) ? 
    9728:	00800074 	movhi	r2,1
    972c:	10b96804 	addi	r2,r2,-6752
    9730:	11400817 	ldw	r5,32(r2)
    9734:	11800917 	ldw	r6,36(r2)
    9738:	01000074 	movhi	r4,1
    973c:	21398604 	addi	r4,r4,-6632
    9740:	20800a17 	ldw	r2,40(r4)
    9744:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		Tilt_P[5]
	:
    9748:	2809883a 	mov	r4,r5
    974c:	300b883a 	mov	r5,r6
    9750:	100d883a 	mov	r6,r2
    9754:	180f883a 	mov	r7,r3
    9758:	000abec0 	call	abec <__ltdf2>
    975c:	1000050e 	bge	r2,zero,9774 <TiltCalculateDynamic+0x5b4>
    9760:	01000074 	movhi	r4,1
    9764:	21398604 	addi	r4,r4,-6632
    9768:	20800a17 	ldw	r2,40(r4)
    976c:	20c00b17 	ldw	r3,44(r4)
    9770:	00001906 	br	97d8 <TiltCalculateDynamic+0x618>
		/* (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) */
		((Tilt_V[4] > Tilt_P[6]) ? 
    9774:	00800074 	movhi	r2,1
    9778:	10b96804 	addi	r2,r2,-6752
    977c:	11400817 	ldw	r5,32(r2)
    9780:	11800917 	ldw	r6,36(r2)
    9784:	01000074 	movhi	r4,1
    9788:	21398604 	addi	r4,r4,-6632
    978c:	20800c17 	ldw	r2,48(r4)
    9790:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			Tilt_P[6]
		:
    9794:	2809883a 	mov	r4,r5
    9798:	300b883a 	mov	r5,r6
    979c:	100d883a 	mov	r6,r2
    97a0:	180f883a 	mov	r7,r3
    97a4:	000ab880 	call	ab88 <__gtdf2>
    97a8:	0080050e 	bge	zero,r2,97c0 <TiltCalculateDynamic+0x600>
    97ac:	00800074 	movhi	r2,1
    97b0:	10b98604 	addi	r2,r2,-6632
    97b4:	11000c17 	ldw	r4,48(r2)
    97b8:	11400d17 	ldw	r5,52(r2)
    97bc:	00000406 	br	97d0 <TiltCalculateDynamic+0x610>
    97c0:	00800074 	movhi	r2,1
    97c4:	10b96804 	addi	r2,r2,-6752
    97c8:	11000817 	ldw	r4,32(r2)
    97cc:	11400917 	ldw	r5,36(r2)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	Tilt_V[7] = ((Tilt_V[4] < Tilt_P[5]) ? 
		/* SignalLimiter2\minimum */
		Tilt_P[5]
	:
    97d0:	2005883a 	mov	r2,r4
    97d4:	2807883a 	mov	r3,r5

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	Tilt_V[4] = Tilt_V[1] + Tilt_V[2];

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	Tilt_V[7] = ((Tilt_V[4] < Tilt_P[5]) ? 
    97d8:	01000074 	movhi	r4,1
    97dc:	21396804 	addi	r4,r4,-6752
    97e0:	20800e15 	stw	r2,56(r4)
    97e4:	20c00f15 	stw	r3,60(r4)
		)
	);


	/* increment the step counter */
	Tilt_steps++;
    97e8:	d0a0f417 	ldw	r2,-31792(gp)
    97ec:	10800044 	addi	r2,r2,1
    97f0:	d0a0f415 	stw	r2,-31792(gp)
}
    97f4:	e037883a 	mov	sp,fp
    97f8:	dfc00717 	ldw	ra,28(sp)
    97fc:	df000617 	ldw	fp,24(sp)
    9800:	dd400517 	ldw	r21,20(sp)
    9804:	dd000417 	ldw	r20,16(sp)
    9808:	dcc00317 	ldw	r19,12(sp)
    980c:	dc800217 	ldw	r18,8(sp)
    9810:	dc400117 	ldw	r17,4(sp)
    9814:	dc000017 	ldw	r16,0(sp)
    9818:	dec00804 	addi	sp,sp,32
    981c:	f800283a 	ret

00009820 <TiltCalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void TiltCalculateOutput (void)
{
    9820:	deffff04 	addi	sp,sp,-4
    9824:	df000015 	stw	fp,0(sp)
    9828:	d839883a 	mov	fp,sp
	/* out = SignalLimiter2\output; */
	Tilt_V[11] = Tilt_V[7];
    982c:	01000074 	movhi	r4,1
    9830:	21396804 	addi	r4,r4,-6752
    9834:	20800e17 	ldw	r2,56(r4)
    9838:	20c00f17 	ldw	r3,60(r4)
    983c:	01000074 	movhi	r4,1
    9840:	21396804 	addi	r4,r4,-6752
    9844:	20801615 	stw	r2,88(r4)
    9848:	20c01715 	stw	r3,92(r4)

}
    984c:	e037883a 	mov	sp,fp
    9850:	df000017 	ldw	fp,0(sp)
    9854:	dec00104 	addi	sp,sp,4
    9858:	f800283a 	ret

0000985c <TiltCalculateFinal>:
/* This function calculates the final equations of the model.
 * These equations are calculated after all the calculations
 * are performed
 */
void TiltCalculateFinal (void)
{
    985c:	deffff04 	addi	sp,sp,-4
    9860:	df000015 	stw	fp,0(sp)
    9864:	d839883a 	mov	fp,sp

}
    9868:	e037883a 	mov	sp,fp
    986c:	df000017 	ldw	fp,0(sp)
    9870:	dec00104 	addi	sp,sp,4
    9874:	f800283a 	ret

00009878 <TiltModelTerminate>:

/* this method is called after all calculations are performed */
void TiltModelTerminate(void)
{
    9878:	deffff04 	addi	sp,sp,-4
    987c:	df000015 	stw	fp,0(sp)
    9880:	d839883a 	mov	fp,sp
}
    9884:	e037883a 	mov	sp,fp
    9888:	df000017 	ldw	fp,0(sp)
    988c:	dec00104 	addi	sp,sp,4
    9890:	f800283a 	ret

00009894 <TiltCopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void TiltCopyInputsToVariables (XXDouble *u)
{
    9894:	defffe04 	addi	sp,sp,-8
    9898:	df000115 	stw	fp,4(sp)
    989c:	df000104 	addi	fp,sp,4
    98a0:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	Tilt_V[8] = u[0];		/* corr */
    98a4:	e13fff17 	ldw	r4,-4(fp)
    98a8:	20800017 	ldw	r2,0(r4)
    98ac:	20c00117 	ldw	r3,4(r4)
    98b0:	01000074 	movhi	r4,1
    98b4:	21396804 	addi	r4,r4,-6752
    98b8:	20801015 	stw	r2,64(r4)
    98bc:	20c01115 	stw	r3,68(r4)
	Tilt_V[9] = u[1];		/* in */
    98c0:	e13fff17 	ldw	r4,-4(fp)
    98c4:	20800217 	ldw	r2,8(r4)
    98c8:	20c00317 	ldw	r3,12(r4)
    98cc:	01000074 	movhi	r4,1
    98d0:	21396804 	addi	r4,r4,-6752
    98d4:	20801215 	stw	r2,72(r4)
    98d8:	20c01315 	stw	r3,76(r4)
	Tilt_V[10] = u[2];		/* position */
    98dc:	e13fff17 	ldw	r4,-4(fp)
    98e0:	20800417 	ldw	r2,16(r4)
    98e4:	20c00517 	ldw	r3,20(r4)
    98e8:	01000074 	movhi	r4,1
    98ec:	21396804 	addi	r4,r4,-6752
    98f0:	20801415 	stw	r2,80(r4)
    98f4:	20c01515 	stw	r3,84(r4)

}
    98f8:	e037883a 	mov	sp,fp
    98fc:	df000017 	ldw	fp,0(sp)
    9900:	dec00104 	addi	sp,sp,4
    9904:	f800283a 	ret

00009908 <TiltCopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void TiltCopyVariablesToOutputs (XXDouble *y)
{
    9908:	defffe04 	addi	sp,sp,-8
    990c:	df000115 	stw	fp,4(sp)
    9910:	df000104 	addi	fp,sp,4
    9914:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	Tilt_V[11];		/* out */
    9918:	01000074 	movhi	r4,1
    991c:	21396804 	addi	r4,r4,-6752
    9920:	20801617 	ldw	r2,88(r4)
    9924:	20c01717 	ldw	r3,92(r4)
    9928:	e13fff17 	ldw	r4,-4(fp)
    992c:	20800015 	stw	r2,0(r4)
    9930:	20c00115 	stw	r3,4(r4)

}
    9934:	e037883a 	mov	sp,fp
    9938:	df000017 	ldw	fp,0(sp)
    993c:	dec00104 	addi	sp,sp,4
    9940:	f800283a 	ret

00009944 <TiltInitializeSubmodel>:

/* The initialization function for submodel */
void TiltInitializeSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    9944:	defffa04 	addi	sp,sp,-24
    9948:	dfc00515 	stw	ra,20(sp)
    994c:	df000415 	stw	fp,16(sp)
    9950:	df000404 	addi	fp,sp,16
    9954:	e13ffc15 	stw	r4,-16(fp)
    9958:	e17ffd15 	stw	r5,-12(fp)
    995c:	e1bffe15 	stw	r6,-8(fp)
    9960:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	Tilt_initialize = XXTRUE;
    9964:	00800074 	movhi	r2,1
    9968:	10b84204 	addi	r2,r2,-7928
    996c:	00c00044 	movi	r3,1
    9970:	10c00005 	stb	r3,0(r2)
	Tilt_steps = 0;
    9974:	00800074 	movhi	r2,1
    9978:	10b92b04 	addi	r2,r2,-6996
    997c:	10000015 	stw	zero,0(r2)
	TiltModelInitialize ();
    9980:	00091380 	call	9138 <TiltModelInitialize>
	TiltDiscreteInitialize ();
    9984:	0008e2c0 	call	8e2c <TiltDiscreteInitialize>

	/* Copy the inputs */
	Tilt_time = t;
    9988:	00800074 	movhi	r2,1
    998c:	10b92904 	addi	r2,r2,-7004
    9990:	e0fffe17 	ldw	r3,-8(fp)
    9994:	10c00015 	stw	r3,0(r2)
    9998:	e0ffff17 	ldw	r3,-4(fp)
    999c:	10c00115 	stw	r3,4(r2)
	TiltCopyInputsToVariables (u);
    99a0:	e13ffc17 	ldw	r4,-16(fp)
    99a4:	00098940 	call	9894 <TiltCopyInputsToVariables>

	/* Calculate the model for the first time */
	TiltCalculateInitial ();
    99a8:	000916c0 	call	916c <TiltCalculateInitial>
	TiltCalculateStatic ();
    99ac:	00091880 	call	9188 <TiltCalculateStatic>
	TiltCalculateInput ();
    99b0:	00091a40 	call	91a4 <TiltCalculateInput>
	TiltCalculateDynamic ();
    99b4:	00091c00 	call	91c0 <TiltCalculateDynamic>
	TiltCalculateOutput ();
    99b8:	00098200 	call	9820 <TiltCalculateOutput>

	/* Set the outputs */
	TiltCopyVariablesToOutputs (y);
    99bc:	e13ffd17 	ldw	r4,-12(fp)
    99c0:	00099080 	call	9908 <TiltCopyVariablesToOutputs>

	/* End of initialization phase */
	Tilt_initialize = XXFALSE;
    99c4:	00800074 	movhi	r2,1
    99c8:	10b84204 	addi	r2,r2,-7928
    99cc:	10000005 	stb	zero,0(r2)
}
    99d0:	e037883a 	mov	sp,fp
    99d4:	dfc00117 	ldw	ra,4(sp)
    99d8:	df000017 	ldw	fp,0(sp)
    99dc:	dec00204 	addi	sp,sp,8
    99e0:	f800283a 	ret

000099e4 <TiltCalculateSubmodel>:

/* The function that calculates the submodel */
void TiltCalculateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    99e4:	defffa04 	addi	sp,sp,-24
    99e8:	dfc00515 	stw	ra,20(sp)
    99ec:	df000415 	stw	fp,16(sp)
    99f0:	df000404 	addi	fp,sp,16
    99f4:	e13ffc15 	stw	r4,-16(fp)
    99f8:	e17ffd15 	stw	r5,-12(fp)
    99fc:	e1bffe15 	stw	r6,-8(fp)
    9a00:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	Tilt_time = t;
    9a04:	00800074 	movhi	r2,1
    9a08:	10b92904 	addi	r2,r2,-7004
    9a0c:	e0fffe17 	ldw	r3,-8(fp)
    9a10:	10c00015 	stw	r3,0(r2)
    9a14:	e0ffff17 	ldw	r3,-4(fp)
    9a18:	10c00115 	stw	r3,4(r2)
	TiltCopyInputsToVariables (u);
    9a1c:	e13ffc17 	ldw	r4,-16(fp)
    9a20:	00098940 	call	9894 <TiltCopyInputsToVariables>

	/* Calculate the model */
	TiltCalculateInput ();
    9a24:	00091a40 	call	91a4 <TiltCalculateInput>
	TiltDiscreteStep ();
    9a28:	0008e740 	call	8e74 <TiltDiscreteStep>
	TiltCalculateOutput ();
    9a2c:	00098200 	call	9820 <TiltCalculateOutput>

	/* Copy the outputs */
	TiltCopyVariablesToOutputs (y);
    9a30:	e13ffd17 	ldw	r4,-12(fp)
    9a34:	00099080 	call	9908 <TiltCopyVariablesToOutputs>
}
    9a38:	e037883a 	mov	sp,fp
    9a3c:	dfc00117 	ldw	ra,4(sp)
    9a40:	df000017 	ldw	fp,0(sp)
    9a44:	dec00204 	addi	sp,sp,8
    9a48:	f800283a 	ret

00009a4c <TiltTerminateSubmodel>:

/* The termination function for submodel */
void TiltTerminateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    9a4c:	defffa04 	addi	sp,sp,-24
    9a50:	dfc00515 	stw	ra,20(sp)
    9a54:	df000415 	stw	fp,16(sp)
    9a58:	df000404 	addi	fp,sp,16
    9a5c:	e13ffc15 	stw	r4,-16(fp)
    9a60:	e17ffd15 	stw	r5,-12(fp)
    9a64:	e1bffe15 	stw	r6,-8(fp)
    9a68:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	Tilt_time = t;
    9a6c:	00800074 	movhi	r2,1
    9a70:	10b92904 	addi	r2,r2,-7004
    9a74:	e0fffe17 	ldw	r3,-8(fp)
    9a78:	10c00015 	stw	r3,0(r2)
    9a7c:	e0ffff17 	ldw	r3,-4(fp)
    9a80:	10c00115 	stw	r3,4(r2)
	TiltCopyInputsToVariables (u);
    9a84:	e13ffc17 	ldw	r4,-16(fp)
    9a88:	00098940 	call	9894 <TiltCopyInputsToVariables>

	/* Calculate the final model equations */
	TiltCalculateFinal ();
    9a8c:	000985c0 	call	985c <TiltCalculateFinal>

	/* Set the outputs */
	TiltCopyVariablesToOutputs (y);
    9a90:	e13ffd17 	ldw	r4,-12(fp)
    9a94:	00099080 	call	9908 <TiltCopyVariablesToOutputs>

	/* and terminate the model itself (releasing memory) */
	TiltModelTerminate ();
    9a98:	00098780 	call	9878 <TiltModelTerminate>
	TiltDiscreteTerminate ();
    9a9c:	0008e580 	call	8e58 <TiltDiscreteTerminate>
}
    9aa0:	e037883a 	mov	sp,fp
    9aa4:	dfc00117 	ldw	ra,4(sp)
    9aa8:	df000017 	ldw	fp,0(sp)
    9aac:	dec00204 	addi	sp,sp,8
    9ab0:	f800283a 	ret

00009ab4 <convertToPwm>:
#include "Pansubmod.h"
//#include "Tiltsubmod.h"

# define	PI	3.1415

int convertToPwm(XXDouble pidOutput) {
    9ab4:	defffa04 	addi	sp,sp,-24
    9ab8:	dfc00515 	stw	ra,20(sp)
    9abc:	df000415 	stw	fp,16(sp)
    9ac0:	df000404 	addi	fp,sp,16
    9ac4:	e13ffe15 	stw	r4,-8(fp)
    9ac8:	e17fff15 	stw	r5,-4(fp)
	const int bitSize = 4096;
    9acc:	00840004 	movi	r2,4096
    9ad0:	e0bffc15 	stw	r2,-16(fp)
	const int bits = bitSize / 2;
    9ad4:	e0bffc17 	ldw	r2,-16(fp)
    9ad8:	1006d7fa 	srli	r3,r2,31
    9adc:	1885883a 	add	r2,r3,r2
    9ae0:	1005d07a 	srai	r2,r2,1
    9ae4:	e0bffd15 	stw	r2,-12(fp)

	/* Calculation */
	return (int)(bits * pidOutput);
    9ae8:	e13ffd17 	ldw	r4,-12(fp)
    9aec:	000ac480 	call	ac48 <__floatsidf>
    9af0:	100b883a 	mov	r5,r2
    9af4:	180d883a 	mov	r6,r3
    9af8:	2809883a 	mov	r4,r5
    9afc:	300b883a 	mov	r5,r6
    9b00:	e1bffe17 	ldw	r6,-8(fp)
    9b04:	e1ffff17 	ldw	r7,-4(fp)
    9b08:	000a6f00 	call	a6f0 <__muldf3>
    9b0c:	1009883a 	mov	r4,r2
    9b10:	180b883a 	mov	r5,r3
    9b14:	2005883a 	mov	r2,r4
    9b18:	2807883a 	mov	r3,r5
    9b1c:	1009883a 	mov	r4,r2
    9b20:	180b883a 	mov	r5,r3
    9b24:	000ad1c0 	call	ad1c <__fixdfsi>
}
    9b28:	e037883a 	mov	sp,fp
    9b2c:	dfc00117 	ldw	ra,4(sp)
    9b30:	df000017 	ldw	fp,0(sp)
    9b34:	dec00204 	addi	sp,sp,8
    9b38:	f800283a 	ret

00009b3c <convertPanToRadian>:

float convertPanToRadian(int panEncoderInput) {
    9b3c:	defff804 	addi	sp,sp,-32
    9b40:	dfc00715 	stw	ra,28(sp)
    9b44:	df000615 	stw	fp,24(sp)
    9b48:	dc000515 	stw	r16,20(sp)
    9b4c:	df000504 	addi	fp,sp,20
    9b50:	e13fff15 	stw	r4,-4(fp)
	const int countsPerRev = 5000;
    9b54:	0084e204 	movi	r2,5000
    9b58:	e0bffb15 	stw	r2,-20(fp)
	const int centerPos = countsPerRev / 2;
    9b5c:	e0bffb17 	ldw	r2,-20(fp)
    9b60:	1006d7fa 	srli	r3,r2,31
    9b64:	1885883a 	add	r2,r3,r2
    9b68:	1005d07a 	srai	r2,r2,1
    9b6c:	e0bffc15 	stw	r2,-16(fp)
	const float countPerDeg = (float)countsPerRev / 360;
    9b70:	e13ffb17 	ldw	r4,-20(fp)
    9b74:	000a2000 	call	a200 <__floatsisf>
    9b78:	1007883a 	mov	r3,r2
    9b7c:	1809883a 	mov	r4,r3
    9b80:	0150ed34 	movhi	r5,17332
    9b84:	000a0c40 	call	a0c4 <__divsf3>
    9b88:	1007883a 	mov	r3,r2
    9b8c:	e0fffd15 	stw	r3,-12(fp)

	const float degToRadian = (float)(PI / 180);
    9b90:	008f23f4 	movhi	r2,15503
    9b94:	10be4844 	addi	r2,r2,-1759
    9b98:	e0bffe15 	stw	r2,-8(fp)

	//printf("countPerDeg Tilt: %f \n", countPerDeg);
	//printf("degToRadian Tilt: %f \n", degToRadian);

	/* Calculation */
	return (float) (panEncoderInput - centerPos) * (degToRadian / countPerDeg);
    9b9c:	e0ffff17 	ldw	r3,-4(fp)
    9ba0:	e0bffc17 	ldw	r2,-16(fp)
    9ba4:	1885c83a 	sub	r2,r3,r2
    9ba8:	1009883a 	mov	r4,r2
    9bac:	000a2000 	call	a200 <__floatsisf>
    9bb0:	1021883a 	mov	r16,r2
    9bb4:	e13ffe17 	ldw	r4,-8(fp)
    9bb8:	e17ffd17 	ldw	r5,-12(fp)
    9bbc:	000a0c40 	call	a0c4 <__divsf3>
    9bc0:	1007883a 	mov	r3,r2
    9bc4:	1805883a 	mov	r2,r3
    9bc8:	8009883a 	mov	r4,r16
    9bcc:	100b883a 	mov	r5,r2
    9bd0:	0009f340 	call	9f34 <__mulsf3>
    9bd4:	1009883a 	mov	r4,r2
    9bd8:	2007883a 	mov	r3,r4
    9bdc:	1805883a 	mov	r2,r3
}
    9be0:	e037883a 	mov	sp,fp
    9be4:	dfc00217 	ldw	ra,8(sp)
    9be8:	df000117 	ldw	fp,4(sp)
    9bec:	dc000017 	ldw	r16,0(sp)
    9bf0:	dec00304 	addi	sp,sp,12
    9bf4:	f800283a 	ret

00009bf8 <convertTiltToRadian>:

float convertTiltToRadian(int tiltEncoderInput) {
    9bf8:	defff804 	addi	sp,sp,-32
    9bfc:	dfc00715 	stw	ra,28(sp)
    9c00:	df000615 	stw	fp,24(sp)
    9c04:	dc000515 	stw	r16,20(sp)
    9c08:	df000504 	addi	fp,sp,20
    9c0c:	e13fff15 	stw	r4,-4(fp)
	const int countsPerRev = 2000;
    9c10:	0081f404 	movi	r2,2000
    9c14:	e0bffb15 	stw	r2,-20(fp)
	const int centerPos = countsPerRev / 2;
    9c18:	e0bffb17 	ldw	r2,-20(fp)
    9c1c:	1006d7fa 	srli	r3,r2,31
    9c20:	1885883a 	add	r2,r3,r2
    9c24:	1005d07a 	srai	r2,r2,1
    9c28:	e0bffc15 	stw	r2,-16(fp)
	const float countPerDeg = (float)countsPerRev / 360;
    9c2c:	e13ffb17 	ldw	r4,-20(fp)
    9c30:	000a2000 	call	a200 <__floatsisf>
    9c34:	1007883a 	mov	r3,r2
    9c38:	1809883a 	mov	r4,r3
    9c3c:	0150ed34 	movhi	r5,17332
    9c40:	000a0c40 	call	a0c4 <__divsf3>
    9c44:	1007883a 	mov	r3,r2
    9c48:	e0fffd15 	stw	r3,-12(fp)

	const float degToRadian = (float) (PI / 180);
    9c4c:	008f23f4 	movhi	r2,15503
    9c50:	10be4844 	addi	r2,r2,-1759
    9c54:	e0bffe15 	stw	r2,-8(fp)

	//printf("countPerDeg Tilt: %f \n", countPerDeg);
	//printf("degToRadian Tilt: %f \n", degToRadian);

	/* Calculation */
	return (float) (tiltEncoderInput - centerPos) * (degToRadian / countPerDeg);
    9c58:	e0ffff17 	ldw	r3,-4(fp)
    9c5c:	e0bffc17 	ldw	r2,-16(fp)
    9c60:	1885c83a 	sub	r2,r3,r2
    9c64:	1009883a 	mov	r4,r2
    9c68:	000a2000 	call	a200 <__floatsisf>
    9c6c:	1021883a 	mov	r16,r2
    9c70:	e13ffe17 	ldw	r4,-8(fp)
    9c74:	e17ffd17 	ldw	r5,-12(fp)
    9c78:	000a0c40 	call	a0c4 <__divsf3>
    9c7c:	1007883a 	mov	r3,r2
    9c80:	1805883a 	mov	r2,r3
    9c84:	8009883a 	mov	r4,r16
    9c88:	100b883a 	mov	r5,r2
    9c8c:	0009f340 	call	9f34 <__mulsf3>
    9c90:	1009883a 	mov	r4,r2
    9c94:	2007883a 	mov	r3,r4
    9c98:	1805883a 	mov	r2,r3
}
    9c9c:	e037883a 	mov	sp,fp
    9ca0:	dfc00217 	ldw	ra,8(sp)
    9ca4:	df000117 	ldw	fp,4(sp)
    9ca8:	dc000017 	ldw	r16,0(sp)
    9cac:	dec00304 	addi	sp,sp,12
    9cb0:	f800283a 	ret

00009cb4 <main>:

int main() {
    9cb4:	deffd904 	addi	sp,sp,-156
    9cb8:	dfc02615 	stw	ra,152(sp)
    9cbc:	df002515 	stw	fp,148(sp)
    9cc0:	df002504 	addi	fp,sp,148
	// Say hello through the debug interface
	printf("Hello from Nios II!\n");
    9cc4:	01000074 	movhi	r4,1
    9cc8:	21371304 	addi	r4,r4,-9140
    9ccc:	000b7a80 	call	b7a8 <puts>

	// Put 0x08 in the memory of the IP and enable the count down
	IOWR(ESL_BUS_DEMO_0_BASE, 0x00, 1 << 31 | 0x20);
    9cd0:	00e00034 	movhi	r3,32768
    9cd4:	18c00804 	addi	r3,r3,32
    9cd8:	00800074 	movhi	r2,1
    9cdc:	10840004 	addi	r2,r2,4096
    9ce0:	10c00035 	stwio	r3,0(r2)

	// Verify that it is there
	int nReadOut = IORD(ESL_BUS_DEMO_0_BASE, 0x00);
    9ce4:	00800074 	movhi	r2,1
    9ce8:	10840004 	addi	r2,r2,4096
    9cec:	10800037 	ldwio	r2,0(r2)
    9cf0:	e0bfdc15 	stw	r2,-144(fp)
	printf("From the IP: %u \n\r", nReadOut);
    9cf4:	01000074 	movhi	r4,1
    9cf8:	21371804 	addi	r4,r4,-9120
    9cfc:	e17fdc17 	ldw	r5,-144(fp)
    9d00:	000b6dc0 	call	b6dc <printf>

	XXDouble u_Pan[2 + 1];
	XXDouble y_Pan[2 + 1];

	/* Initialize the inputs and outputs of TIlt controller with correct initial values */
	u_Tilt[0] = 0.0;		/* corr */
    9d04:	e03fe415 	stw	zero,-112(fp)
    9d08:	e03fe515 	stw	zero,-108(fp)
	u_Tilt[1] = 1.0;		/* in */
    9d0c:	e03fe615 	stw	zero,-104(fp)
    9d10:	008ffc34 	movhi	r2,16368
    9d14:	e0bfe715 	stw	r2,-100(fp)
	u_Tilt[2] = 0.0;		/* position */
    9d18:	e03fe815 	stw	zero,-96(fp)
    9d1c:	e03fe915 	stw	zero,-92(fp)

	y_Tilt[0] = 0.0;		/* out */
    9d20:	e03fec15 	stw	zero,-80(fp)
    9d24:	e03fed15 	stw	zero,-76(fp)

	/* Initialize the inputs and outputs of Pan Controller with correct initial values */
	u_Pan[0] = 1.0;		/* in */
    9d28:	e03ff015 	stw	zero,-64(fp)
    9d2c:	008ffc34 	movhi	r2,16368
    9d30:	e0bff115 	stw	r2,-60(fp)
	u_Pan[1] = 0.0;		/* position */
    9d34:	e03ff215 	stw	zero,-56(fp)
    9d38:	e03ff315 	stw	zero,-52(fp)

	y_Pan[0] = 0.0;		/* corr */
    9d3c:	e03ff615 	stw	zero,-40(fp)
    9d40:	e03ff715 	stw	zero,-36(fp)
	y_Pan[1] = 0.0;		/* out */
    9d44:	e03ff815 	stw	zero,-32(fp)
    9d48:	e03ff915 	stw	zero,-28(fp)

	/* Initialize the submodel itself */
	//TiltInitializeSubmodel(u_Tilt, y_Tilt, Tilt_time);
	PanInitializeSubmodel(u_Pan, y_Pan, Pan_time);
    9d4c:	01000074 	movhi	r4,1
    9d50:	21392304 	addi	r4,r4,-7028
    9d54:	20800017 	ldw	r2,0(r4)
    9d58:	20c00117 	ldw	r3,4(r4)
    9d5c:	e13ff004 	addi	r4,fp,-64
    9d60:	e17ff604 	addi	r5,fp,-40
    9d64:	100d883a 	mov	r6,r2
    9d68:	180f883a 	mov	r7,r3
    9d6c:	0008cbc0 	call	8cbc <PanInitializeSubmodel>
	while (1) {
			//read(file, &read_buffer, 3);
			// write(file, &echo_back, 3);
			//usleep(10000000);
			//printf("%c \n", read_buffer);
		   printf("WTF");
    9d70:	01000074 	movhi	r4,1
    9d74:	21371d04 	addi	r4,r4,-9100
    9d78:	000b6dc0 	call	b6dc <printf>
			while (1)//(Pan_time < Pan_finish_time))
			{

				//printf("test2 %d \n", (int)Pan_time);

				int EncoderAxis = IORD(ESL_BUS_DEMO_0_BASE, 0x00);
    9d7c:	00800074 	movhi	r2,1
    9d80:	10840004 	addi	r2,r2,4096
    9d84:	10800037 	ldwio	r2,0(r2)
    9d88:	e0bfdd15 	stw	r2,-140(fp)
				int encoderPan = EncoderAxis >> 16;
    9d8c:	e0bfdd17 	ldw	r2,-140(fp)
    9d90:	1005d43a 	srai	r2,r2,16
    9d94:	e0bfde15 	stw	r2,-136(fp)
				int temp = EncoderAxis << 16;
    9d98:	e0bfdd17 	ldw	r2,-140(fp)
    9d9c:	1004943a 	slli	r2,r2,16
    9da0:	e0bfdf15 	stw	r2,-132(fp)
				int encoderTilt = temp >> 16;
    9da4:	e0bfdf17 	ldw	r2,-132(fp)
    9da8:	1005d43a 	srai	r2,r2,16
    9dac:	e0bfe015 	stw	r2,-128(fp)
				u_Pan[0] = convertPanToRadian(encoderPan);
    9db0:	e13fde17 	ldw	r4,-136(fp)
    9db4:	0009b3c0 	call	9b3c <convertPanToRadian>
    9db8:	1007883a 	mov	r3,r2
    9dbc:	1809883a 	mov	r4,r3
    9dc0:	000a2a40 	call	a2a4 <__extendsfdf2>
    9dc4:	1009883a 	mov	r4,r2
    9dc8:	180b883a 	mov	r5,r3
    9dcc:	e13ff015 	stw	r4,-64(fp)
    9dd0:	e17ff115 	stw	r5,-60(fp)
				//printf("Pan encoder: %d \n", (int)encoderPan);
				//printf("Pan tilt: %d \n", (int)encoderTilt);

				//usleep(10000);
				//generate inputs
				u_Pan[1] = 0;
    9dd4:	e03ff215 	stw	zero,-56(fp)
    9dd8:	e03ff315 	stw	zero,-52(fp)
				//if(Pan_time >= 10){

				//	u_Pan[1] = 0.5*PI;
				//}

				PanCalculateSubmodel(u_Pan, y_Pan, Pan_time);
    9ddc:	01000074 	movhi	r4,1
    9de0:	21392304 	addi	r4,r4,-7028
    9de4:	20800017 	ldw	r2,0(r4)
    9de8:	20c00117 	ldw	r3,4(r4)
    9dec:	e13ff004 	addi	r4,fp,-64
    9df0:	e17ff604 	addi	r5,fp,-40
    9df4:	100d883a 	mov	r6,r2
    9df8:	180f883a 	mov	r7,r3
    9dfc:	0008d5c0 	call	8d5c <PanCalculateSubmodel>

				int pwmPan = convertToPwm(y_Pan[1]);
    9e00:	e0bff817 	ldw	r2,-32(fp)
    9e04:	e0fff917 	ldw	r3,-28(fp)
    9e08:	1009883a 	mov	r4,r2
    9e0c:	180b883a 	mov	r5,r3
    9e10:	0009ab40 	call	9ab4 <convertToPwm>
    9e14:	e0bfe115 	stw	r2,-124(fp)
				//int pwmPan = 100;
				int panDir = 0;
    9e18:	e03fdb15 	stw	zero,-148(fp)
				if (pwmPan < 0) {
    9e1c:	e0bfe117 	ldw	r2,-124(fp)
    9e20:	1000020e 	bge	r2,zero,9e2c <main+0x178>
					panDir = 1;
    9e24:	00800044 	movi	r2,1
    9e28:	e0bfdb15 	stw	r2,-148(fp)
				}
				pwmPan = abs(pwmPan);
    9e2c:	e0bfe117 	ldw	r2,-124(fp)
    9e30:	1000010e 	bge	r2,zero,9e38 <main+0x184>
    9e34:	0085c83a 	sub	r2,zero,r2
    9e38:	e0bfe115 	stw	r2,-124(fp)
				printf("Pan direction: %d \n", panDir);
    9e3c:	01000074 	movhi	r4,1
    9e40:	21371e04 	addi	r4,r4,-9096
    9e44:	e17fdb17 	ldw	r5,-148(fp)
    9e48:	000b6dc0 	call	b6dc <printf>
				printf("Pan pwm: %d \n", pwmPan);
    9e4c:	01000074 	movhi	r4,1
    9e50:	21372304 	addi	r4,r4,-9076
    9e54:	e17fe117 	ldw	r5,-124(fp)
    9e58:	000b6dc0 	call	b6dc <printf>
				int packable = 0;
    9e5c:	e03fe215 	stw	zero,-120(fp)
				uint32_t message = 0;
    9e60:	e03fe315 	stw	zero,-116(fp)
				message = panDir << 30 | pwmPan << 8 | packable;
    9e64:	e0bfdb17 	ldw	r2,-148(fp)
    9e68:	100697ba 	slli	r3,r2,30
    9e6c:	e0bfe117 	ldw	r2,-124(fp)
    9e70:	1004923a 	slli	r2,r2,8
    9e74:	1886b03a 	or	r3,r3,r2
    9e78:	e0bfe217 	ldw	r2,-120(fp)
    9e7c:	1884b03a 	or	r2,r3,r2
    9e80:	e0bfe315 	stw	r2,-116(fp)

				//printf("To the IP: %u \n\r", message);
				IOWR(ESL_BUS_DEMO_0_BASE, 0x00, message);
    9e84:	e0ffe317 	ldw	r3,-116(fp)
    9e88:	00800074 	movhi	r2,1
    9e8c:	10840004 	addi	r2,r2,4096
    9e90:	10c00035 	stwio	r3,0(r2)

				/* Perform the final calculations */
				//TiltTerminateSubmodel(u_Tilt, y_Tilt, Tilt_time);
				PanTerminateSubmodel(u_Pan, y_Pan, Pan_time);
    9e94:	01000074 	movhi	r4,1
    9e98:	21392304 	addi	r4,r4,-7028
    9e9c:	20800017 	ldw	r2,0(r4)
    9ea0:	20c00117 	ldw	r3,4(r4)
    9ea4:	e13ff004 	addi	r4,fp,-64
    9ea8:	e17ff604 	addi	r5,fp,-40
    9eac:	100d883a 	mov	r6,r2
    9eb0:	180f883a 	mov	r7,r3
    9eb4:	0008dc40 	call	8dc4 <PanTerminateSubmodel>
    	    }
    9eb8:	003fb006 	br	9d7c <main+0xc8>

00009ebc <XXString2Double>:
	double m_double;
	const char* m_char;
}str2dbl;

XXDouble XXString2Double(const char* argument)
{
    9ebc:	defffc04 	addi	sp,sp,-16
    9ec0:	df000315 	stw	fp,12(sp)
    9ec4:	df000304 	addi	fp,sp,12
    9ec8:	e13fff15 	stw	r4,-4(fp)
	str2dbl myConversion;
	myConversion.m_char = argument;
    9ecc:	e0bfff17 	ldw	r2,-4(fp)
    9ed0:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_double;
    9ed4:	e17ffd17 	ldw	r5,-12(fp)
    9ed8:	e1bffe17 	ldw	r6,-8(fp)
    9edc:	2807883a 	mov	r3,r5
    9ee0:	3009883a 	mov	r4,r6

}
    9ee4:	1805883a 	mov	r2,r3
    9ee8:	2007883a 	mov	r3,r4
    9eec:	e037883a 	mov	sp,fp
    9ef0:	df000017 	ldw	fp,0(sp)
    9ef4:	dec00104 	addi	sp,sp,4
    9ef8:	f800283a 	ret

00009efc <XXDouble2String>:

const char* XXDouble2String(XXDouble argument)
{
    9efc:	defffb04 	addi	sp,sp,-20
    9f00:	df000415 	stw	fp,16(sp)
    9f04:	df000404 	addi	fp,sp,16
    9f08:	e13ffe15 	stw	r4,-8(fp)
    9f0c:	e17fff15 	stw	r5,-4(fp)
	str2dbl myConversion;
	myConversion.m_double = argument;
    9f10:	e0bffe17 	ldw	r2,-8(fp)
    9f14:	e0bffc15 	stw	r2,-16(fp)
    9f18:	e0bfff17 	ldw	r2,-4(fp)
    9f1c:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_char;
    9f20:	e0bffc17 	ldw	r2,-16(fp)
}
    9f24:	e037883a 	mov	sp,fp
    9f28:	df000017 	ldw	fp,0(sp)
    9f2c:	dec00104 	addi	sp,sp,4
    9f30:	f800283a 	ret

00009f34 <__mulsf3>:
    9f34:	defff104 	addi	sp,sp,-60
    9f38:	d9000d15 	stw	r4,52(sp)
    9f3c:	d9400c15 	stw	r5,48(sp)
    9f40:	d9000d04 	addi	r4,sp,52
    9f44:	d9400804 	addi	r5,sp,32
    9f48:	dfc00e15 	stw	ra,56(sp)
    9f4c:	000b1100 	call	b110 <__unpack_f>
    9f50:	d9000c04 	addi	r4,sp,48
    9f54:	d9400404 	addi	r5,sp,16
    9f58:	000b1100 	call	b110 <__unpack_f>
    9f5c:	d8c00817 	ldw	r3,32(sp)
    9f60:	00800044 	movi	r2,1
    9f64:	10c00936 	bltu	r2,r3,9f8c <__mulsf3+0x58>
    9f68:	d8c00917 	ldw	r3,36(sp)
    9f6c:	d8800517 	ldw	r2,20(sp)
    9f70:	d9000804 	addi	r4,sp,32
    9f74:	1884c03a 	cmpne	r2,r3,r2
    9f78:	d8800915 	stw	r2,36(sp)
    9f7c:	000afe40 	call	afe4 <__pack_f>
    9f80:	dfc00e17 	ldw	ra,56(sp)
    9f84:	dec00f04 	addi	sp,sp,60
    9f88:	f800283a 	ret
    9f8c:	d9000417 	ldw	r4,16(sp)
    9f90:	11000936 	bltu	r2,r4,9fb8 <__mulsf3+0x84>
    9f94:	d8800517 	ldw	r2,20(sp)
    9f98:	d8c00917 	ldw	r3,36(sp)
    9f9c:	d9000404 	addi	r4,sp,16
    9fa0:	1884c03a 	cmpne	r2,r3,r2
    9fa4:	d8800515 	stw	r2,20(sp)
    9fa8:	000afe40 	call	afe4 <__pack_f>
    9fac:	dfc00e17 	ldw	ra,56(sp)
    9fb0:	dec00f04 	addi	sp,sp,60
    9fb4:	f800283a 	ret
    9fb8:	00800104 	movi	r2,4
    9fbc:	1880051e 	bne	r3,r2,9fd4 <__mulsf3+0xa0>
    9fc0:	00800084 	movi	r2,2
    9fc4:	20bfe81e 	bne	r4,r2,9f68 <__mulsf3+0x34>
    9fc8:	01000074 	movhi	r4,1
    9fcc:	21372704 	addi	r4,r4,-9060
    9fd0:	003fea06 	br	9f7c <__mulsf3+0x48>
    9fd4:	2080031e 	bne	r4,r2,9fe4 <__mulsf3+0xb0>
    9fd8:	00800084 	movi	r2,2
    9fdc:	18bffa26 	beq	r3,r2,9fc8 <__mulsf3+0x94>
    9fe0:	003fec06 	br	9f94 <__mulsf3+0x60>
    9fe4:	00800084 	movi	r2,2
    9fe8:	18bfdf26 	beq	r3,r2,9f68 <__mulsf3+0x34>
    9fec:	20bfe926 	beq	r4,r2,9f94 <__mulsf3+0x60>
    9ff0:	d9000717 	ldw	r4,28(sp)
    9ff4:	d9800b17 	ldw	r6,44(sp)
    9ff8:	000b883a 	mov	r5,zero
    9ffc:	000f883a 	mov	r7,zero
    a000:	000ae280 	call	ae28 <__muldi3>
    a004:	d9000617 	ldw	r4,24(sp)
    a008:	d9400a17 	ldw	r5,40(sp)
    a00c:	d9c00917 	ldw	r7,36(sp)
    a010:	290b883a 	add	r5,r5,r4
    a014:	d9000517 	ldw	r4,20(sp)
    a018:	29800084 	addi	r6,r5,2
    a01c:	d9800215 	stw	r6,8(sp)
    a020:	3908c03a 	cmpne	r4,r7,r4
    a024:	d9000115 	stw	r4,4(sp)
    a028:	1809883a 	mov	r4,r3
    a02c:	1800070e 	bge	r3,zero,a04c <__mulsf3+0x118>
    a030:	1900004c 	andi	r4,r3,1
    a034:	294000c4 	addi	r5,r5,3
    a038:	20000226 	beq	r4,zero,a044 <__mulsf3+0x110>
    a03c:	1004d07a 	srli	r2,r2,1
    a040:	10a00034 	orhi	r2,r2,32768
    a044:	1808d07a 	srli	r4,r3,1
    a048:	d9400215 	stw	r5,8(sp)
    a04c:	01900034 	movhi	r6,16384
    a050:	31bfffc4 	addi	r6,r6,-1
    a054:	31000c36 	bltu	r6,r4,a088 <__mulsf3+0x154>
    a058:	d8c00217 	ldw	r3,8(sp)
    a05c:	18ffffc4 	addi	r3,r3,-1
    a060:	00000306 	br	a070 <__mulsf3+0x13c>
    a064:	1085883a 	add	r2,r2,r2
    a068:	18ffffc4 	addi	r3,r3,-1
    a06c:	31000536 	bltu	r6,r4,a084 <__mulsf3+0x150>
    a070:	2109883a 	add	r4,r4,r4
    a074:	180b883a 	mov	r5,r3
    a078:	103ffa0e 	bge	r2,zero,a064 <__mulsf3+0x130>
    a07c:	21000054 	ori	r4,r4,1
    a080:	003ff806 	br	a064 <__mulsf3+0x130>
    a084:	d9400215 	stw	r5,8(sp)
    a088:	21401fcc 	andi	r5,r4,127
    a08c:	00c01004 	movi	r3,64
    a090:	28c00526 	beq	r5,r3,a0a8 <__mulsf3+0x174>
    a094:	008000c4 	movi	r2,3
    a098:	d9000315 	stw	r4,12(sp)
    a09c:	d8800015 	stw	r2,0(sp)
    a0a0:	d809883a 	mov	r4,sp
    a0a4:	003fb506 	br	9f7c <__mulsf3+0x48>
    a0a8:	20c0200c 	andi	r3,r4,128
    a0ac:	183ff91e 	bne	r3,zero,a094 <__mulsf3+0x160>
    a0b0:	103ff826 	beq	r2,zero,a094 <__mulsf3+0x160>
    a0b4:	21001004 	addi	r4,r4,64
    a0b8:	00bfe004 	movi	r2,-128
    a0bc:	2088703a 	and	r4,r4,r2
    a0c0:	003ff406 	br	a094 <__mulsf3+0x160>

0000a0c4 <__divsf3>:
    a0c4:	defff504 	addi	sp,sp,-44
    a0c8:	d9000915 	stw	r4,36(sp)
    a0cc:	d9400815 	stw	r5,32(sp)
    a0d0:	d9000904 	addi	r4,sp,36
    a0d4:	d9400404 	addi	r5,sp,16
    a0d8:	dfc00a15 	stw	ra,40(sp)
    a0dc:	000b1100 	call	b110 <__unpack_f>
    a0e0:	d9000804 	addi	r4,sp,32
    a0e4:	d80b883a 	mov	r5,sp
    a0e8:	000b1100 	call	b110 <__unpack_f>
    a0ec:	d8c00417 	ldw	r3,16(sp)
    a0f0:	00800044 	movi	r2,1
    a0f4:	10c00536 	bltu	r2,r3,a10c <__divsf3+0x48>
    a0f8:	d9000404 	addi	r4,sp,16
    a0fc:	000afe40 	call	afe4 <__pack_f>
    a100:	dfc00a17 	ldw	ra,40(sp)
    a104:	dec00b04 	addi	sp,sp,44
    a108:	f800283a 	ret
    a10c:	d9000017 	ldw	r4,0(sp)
    a110:	11000536 	bltu	r2,r4,a128 <__divsf3+0x64>
    a114:	d809883a 	mov	r4,sp
    a118:	000afe40 	call	afe4 <__pack_f>
    a11c:	dfc00a17 	ldw	ra,40(sp)
    a120:	dec00b04 	addi	sp,sp,44
    a124:	f800283a 	ret
    a128:	d9800517 	ldw	r6,20(sp)
    a12c:	d9400117 	ldw	r5,4(sp)
    a130:	00800104 	movi	r2,4
    a134:	314af03a 	xor	r5,r6,r5
    a138:	d9400515 	stw	r5,20(sp)
    a13c:	18800226 	beq	r3,r2,a148 <__divsf3+0x84>
    a140:	01400084 	movi	r5,2
    a144:	1940041e 	bne	r3,r5,a158 <__divsf3+0x94>
    a148:	193feb1e 	bne	r3,r4,a0f8 <__divsf3+0x34>
    a14c:	01000074 	movhi	r4,1
    a150:	21372704 	addi	r4,r4,-9060
    a154:	003fe906 	br	a0fc <__divsf3+0x38>
    a158:	20802226 	beq	r4,r2,a1e4 <__divsf3+0x120>
    a15c:	21402526 	beq	r4,r5,a1f4 <__divsf3+0x130>
    a160:	d9000617 	ldw	r4,24(sp)
    a164:	d8c00217 	ldw	r3,8(sp)
    a168:	d8800717 	ldw	r2,28(sp)
    a16c:	d9400317 	ldw	r5,12(sp)
    a170:	20c7c83a 	sub	r3,r4,r3
    a174:	d8c00615 	stw	r3,24(sp)
    a178:	1140032e 	bgeu	r2,r5,a188 <__divsf3+0xc4>
    a17c:	18ffffc4 	addi	r3,r3,-1
    a180:	1085883a 	add	r2,r2,r2
    a184:	d8c00615 	stw	r3,24(sp)
    a188:	00c007c4 	movi	r3,31
    a18c:	01100034 	movhi	r4,16384
    a190:	000d883a 	mov	r6,zero
    a194:	18ffffc4 	addi	r3,r3,-1
    a198:	11400236 	bltu	r2,r5,a1a4 <__divsf3+0xe0>
    a19c:	310cb03a 	or	r6,r6,r4
    a1a0:	1145c83a 	sub	r2,r2,r5
    a1a4:	2008d07a 	srli	r4,r4,1
    a1a8:	1085883a 	add	r2,r2,r2
    a1ac:	183ff91e 	bne	r3,zero,a194 <__divsf3+0xd0>
    a1b0:	31001fcc 	andi	r4,r6,127
    a1b4:	00c01004 	movi	r3,64
    a1b8:	20c00226 	beq	r4,r3,a1c4 <__divsf3+0x100>
    a1bc:	d9800715 	stw	r6,28(sp)
    a1c0:	003fcd06 	br	a0f8 <__divsf3+0x34>
    a1c4:	30c0200c 	andi	r3,r6,128
    a1c8:	183ffc1e 	bne	r3,zero,a1bc <__divsf3+0xf8>
    a1cc:	103ffb26 	beq	r2,zero,a1bc <__divsf3+0xf8>
    a1d0:	31801004 	addi	r6,r6,64
    a1d4:	00bfe004 	movi	r2,-128
    a1d8:	308c703a 	and	r6,r6,r2
    a1dc:	d9800715 	stw	r6,28(sp)
    a1e0:	003fc506 	br	a0f8 <__divsf3+0x34>
    a1e4:	d8000715 	stw	zero,28(sp)
    a1e8:	d8000615 	stw	zero,24(sp)
    a1ec:	d9000404 	addi	r4,sp,16
    a1f0:	003fc206 	br	a0fc <__divsf3+0x38>
    a1f4:	d8800415 	stw	r2,16(sp)
    a1f8:	d9000404 	addi	r4,sp,16
    a1fc:	003fbf06 	br	a0fc <__divsf3+0x38>

0000a200 <__floatsisf>:
    a200:	2004d7fa 	srli	r2,r4,31
    a204:	defffa04 	addi	sp,sp,-24
    a208:	00c000c4 	movi	r3,3
    a20c:	dfc00515 	stw	ra,20(sp)
    a210:	dc000415 	stw	r16,16(sp)
    a214:	d8c00015 	stw	r3,0(sp)
    a218:	d8800115 	stw	r2,4(sp)
    a21c:	2000081e 	bne	r4,zero,a240 <__floatsisf+0x40>
    a220:	00800084 	movi	r2,2
    a224:	d8800015 	stw	r2,0(sp)
    a228:	d809883a 	mov	r4,sp
    a22c:	000afe40 	call	afe4 <__pack_f>
    a230:	dfc00517 	ldw	ra,20(sp)
    a234:	dc000417 	ldw	r16,16(sp)
    a238:	dec00604 	addi	sp,sp,24
    a23c:	f800283a 	ret
    a240:	00c00784 	movi	r3,30
    a244:	d8c00215 	stw	r3,8(sp)
    a248:	10000b1e 	bne	r2,zero,a278 <__floatsisf+0x78>
    a24c:	2021883a 	mov	r16,r4
    a250:	8009883a 	mov	r4,r16
    a254:	000af380 	call	af38 <__clzsi2>
    a258:	113fffc4 	addi	r4,r2,-1
    a25c:	01000d0e 	bge	zero,r4,a294 <__floatsisf+0x94>
    a260:	8108983a 	sll	r4,r16,r4
    a264:	00c007c4 	movi	r3,31
    a268:	1885c83a 	sub	r2,r3,r2
    a26c:	d9000315 	stw	r4,12(sp)
    a270:	d8800215 	stw	r2,8(sp)
    a274:	003fec06 	br	a228 <__floatsisf+0x28>
    a278:	00a00034 	movhi	r2,32768
    a27c:	20800726 	beq	r4,r2,a29c <__floatsisf+0x9c>
    a280:	0121c83a 	sub	r16,zero,r4
    a284:	8009883a 	mov	r4,r16
    a288:	000af380 	call	af38 <__clzsi2>
    a28c:	113fffc4 	addi	r4,r2,-1
    a290:	013ff316 	blt	zero,r4,a260 <__floatsisf+0x60>
    a294:	dc000315 	stw	r16,12(sp)
    a298:	003fe306 	br	a228 <__floatsisf+0x28>
    a29c:	00b3c034 	movhi	r2,52992
    a2a0:	003fe306 	br	a230 <__floatsisf+0x30>

0000a2a4 <__extendsfdf2>:
    a2a4:	defff904 	addi	sp,sp,-28
    a2a8:	d9000515 	stw	r4,20(sp)
    a2ac:	d9400104 	addi	r5,sp,4
    a2b0:	d9000504 	addi	r4,sp,20
    a2b4:	dfc00615 	stw	ra,24(sp)
    a2b8:	000b1100 	call	b110 <__unpack_f>
    a2bc:	d9c00417 	ldw	r7,16(sp)
    a2c0:	d9000117 	ldw	r4,4(sp)
    a2c4:	d9400217 	ldw	r5,8(sp)
    a2c8:	3804d0ba 	srli	r2,r7,2
    a2cc:	d9800317 	ldw	r6,12(sp)
    a2d0:	380e97ba 	slli	r7,r7,30
    a2d4:	d8800015 	stw	r2,0(sp)
    a2d8:	000adf00 	call	adf0 <__make_dp>
    a2dc:	dfc00617 	ldw	ra,24(sp)
    a2e0:	dec00704 	addi	sp,sp,28
    a2e4:	f800283a 	ret

0000a2e8 <_fpadd_parts>:
    a2e8:	2005883a 	mov	r2,r4
    a2ec:	21000017 	ldw	r4,0(r4)
    a2f0:	01c00044 	movi	r7,1
    a2f4:	3900622e 	bgeu	r7,r4,a480 <_fpadd_parts+0x198>
    a2f8:	28c00017 	ldw	r3,0(r5)
    a2fc:	38c05f2e 	bgeu	r7,r3,a47c <_fpadd_parts+0x194>
    a300:	01c00104 	movi	r7,4
    a304:	21c0c626 	beq	r4,r7,a620 <_fpadd_parts+0x338>
    a308:	19c05c26 	beq	r3,r7,a47c <_fpadd_parts+0x194>
    a30c:	01c00084 	movi	r7,2
    a310:	19c06b26 	beq	r3,r7,a4c0 <_fpadd_parts+0x1d8>
    a314:	21c05926 	beq	r4,r7,a47c <_fpadd_parts+0x194>
    a318:	11c00217 	ldw	r7,8(r2)
    a31c:	2ac00217 	ldw	r11,8(r5)
    a320:	13000317 	ldw	r12,12(r2)
    a324:	13400417 	ldw	r13,16(r2)
    a328:	3ac9c83a 	sub	r4,r7,r11
    a32c:	2a000317 	ldw	r8,12(r5)
    a330:	2a400417 	ldw	r9,16(r5)
    a334:	2015883a 	mov	r10,r4
    a338:	20007516 	blt	r4,zero,a510 <_fpadd_parts+0x228>
    a33c:	00c00fc4 	movi	r3,63
    a340:	1a805016 	blt	r3,r10,a484 <_fpadd_parts+0x19c>
    a344:	0100870e 	bge	zero,r4,a564 <_fpadd_parts+0x27c>
    a348:	50fff804 	addi	r3,r10,-32
    a34c:	18009916 	blt	r3,zero,a5b4 <_fpadd_parts+0x2cc>
    a350:	48d6d83a 	srl	r11,r9,r3
    a354:	001d883a 	mov	r14,zero
    a358:	18009e16 	blt	r3,zero,a5d4 <_fpadd_parts+0x2ec>
    a35c:	01000044 	movi	r4,1
    a360:	20c6983a 	sll	r3,r4,r3
    a364:	0015883a 	mov	r10,zero
    a368:	513fffc4 	addi	r4,r10,-1
    a36c:	2295403a 	cmpgeu	r10,r4,r10
    a370:	1a87c83a 	sub	r3,r3,r10
    a374:	1a52703a 	and	r9,r3,r9
    a378:	2210703a 	and	r8,r4,r8
    a37c:	4250b03a 	or	r8,r8,r9
    a380:	4010c03a 	cmpne	r8,r8,zero
    a384:	42d0b03a 	or	r8,r8,r11
    a388:	7013883a 	mov	r9,r14
    a38c:	11000117 	ldw	r4,4(r2)
    a390:	28800117 	ldw	r2,4(r5)
    a394:	20804126 	beq	r4,r2,a49c <_fpadd_parts+0x1b4>
    a398:	20006326 	beq	r4,zero,a528 <_fpadd_parts+0x240>
    a39c:	4305c83a 	sub	r2,r8,r12
    a3a0:	4091803a 	cmpltu	r8,r8,r2
    a3a4:	4b47c83a 	sub	r3,r9,r13
    a3a8:	1a07c83a 	sub	r3,r3,r8
    a3ac:	18006316 	blt	r3,zero,a53c <_fpadd_parts+0x254>
    a3b0:	30000115 	stw	zero,4(r6)
    a3b4:	31c00215 	stw	r7,8(r6)
    a3b8:	30800315 	stw	r2,12(r6)
    a3bc:	30c00415 	stw	r3,16(r6)
    a3c0:	11ffffc4 	addi	r7,r2,-1
    a3c4:	388b403a 	cmpgeu	r5,r7,r2
    a3c8:	194bc83a 	sub	r5,r3,r5
    a3cc:	01040034 	movhi	r4,4096
    a3d0:	213fffc4 	addi	r4,r4,-1
    a3d4:	21401736 	bltu	r4,r5,a434 <_fpadd_parts+0x14c>
    a3d8:	29008226 	beq	r5,r4,a5e4 <_fpadd_parts+0x2fc>
    a3dc:	31400217 	ldw	r5,8(r6)
    a3e0:	02840034 	movhi	r10,4096
    a3e4:	52bfffc4 	addi	r10,r10,-1
    a3e8:	033fff84 	movi	r12,-2
    a3ec:	297fffc4 	addi	r5,r5,-1
    a3f0:	00000106 	br	a3f8 <_fpadd_parts+0x110>
    a3f4:	3a804a26 	beq	r7,r10,a520 <_fpadd_parts+0x238>
    a3f8:	1089883a 	add	r4,r2,r2
    a3fc:	2091803a 	cmpltu	r8,r4,r2
    a400:	18c7883a 	add	r3,r3,r3
    a404:	227fffc4 	addi	r9,r4,-1
    a408:	40d1883a 	add	r8,r8,r3
    a40c:	490f403a 	cmpgeu	r7,r9,r4
    a410:	41cfc83a 	sub	r7,r8,r7
    a414:	2817883a 	mov	r11,r5
    a418:	2005883a 	mov	r2,r4
    a41c:	4007883a 	mov	r3,r8
    a420:	297fffc4 	addi	r5,r5,-1
    a424:	51fff32e 	bgeu	r10,r7,a3f4 <_fpadd_parts+0x10c>
    a428:	31000315 	stw	r4,12(r6)
    a42c:	32000415 	stw	r8,16(r6)
    a430:	32c00215 	stw	r11,8(r6)
    a434:	010000c4 	movi	r4,3
    a438:	31000015 	stw	r4,0(r6)
    a43c:	01080034 	movhi	r4,8192
    a440:	213fffc4 	addi	r4,r4,-1
    a444:	20c00b2e 	bgeu	r4,r3,a474 <_fpadd_parts+0x18c>
    a448:	180e97fa 	slli	r7,r3,31
    a44c:	1008d07a 	srli	r4,r2,1
    a450:	31400217 	ldw	r5,8(r6)
    a454:	1806d07a 	srli	r3,r3,1
    a458:	1080004c 	andi	r2,r2,1
    a45c:	3908b03a 	or	r4,r7,r4
    a460:	1108b03a 	or	r4,r2,r4
    a464:	29400044 	addi	r5,r5,1
    a468:	31000315 	stw	r4,12(r6)
    a46c:	30c00415 	stw	r3,16(r6)
    a470:	31400215 	stw	r5,8(r6)
    a474:	3005883a 	mov	r2,r6
    a478:	f800283a 	ret
    a47c:	2805883a 	mov	r2,r5
    a480:	f800283a 	ret
    a484:	59c01e0e 	bge	r11,r7,a500 <_fpadd_parts+0x218>
    a488:	11000117 	ldw	r4,4(r2)
    a48c:	28800117 	ldw	r2,4(r5)
    a490:	0011883a 	mov	r8,zero
    a494:	0013883a 	mov	r9,zero
    a498:	20bfbf1e 	bne	r4,r2,a398 <_fpadd_parts+0xb0>
    a49c:	4305883a 	add	r2,r8,r12
    a4a0:	1207803a 	cmpltu	r3,r2,r8
    a4a4:	4b53883a 	add	r9,r9,r13
    a4a8:	1a47883a 	add	r3,r3,r9
    a4ac:	31000115 	stw	r4,4(r6)
    a4b0:	31c00215 	stw	r7,8(r6)
    a4b4:	30800315 	stw	r2,12(r6)
    a4b8:	30c00415 	stw	r3,16(r6)
    a4bc:	003fdd06 	br	a434 <_fpadd_parts+0x14c>
    a4c0:	20ffef1e 	bne	r4,r3,a480 <_fpadd_parts+0x198>
    a4c4:	31000015 	stw	r4,0(r6)
    a4c8:	10c00117 	ldw	r3,4(r2)
    a4cc:	30c00115 	stw	r3,4(r6)
    a4d0:	10c00217 	ldw	r3,8(r2)
    a4d4:	11000117 	ldw	r4,4(r2)
    a4d8:	29400117 	ldw	r5,4(r5)
    a4dc:	30c00215 	stw	r3,8(r6)
    a4e0:	10c00317 	ldw	r3,12(r2)
    a4e4:	2908703a 	and	r4,r5,r4
    a4e8:	30c00315 	stw	r3,12(r6)
    a4ec:	10c00417 	ldw	r3,16(r2)
    a4f0:	31000115 	stw	r4,4(r6)
    a4f4:	3005883a 	mov	r2,r6
    a4f8:	30c00415 	stw	r3,16(r6)
    a4fc:	f800283a 	ret
    a500:	580f883a 	mov	r7,r11
    a504:	0019883a 	mov	r12,zero
    a508:	001b883a 	mov	r13,zero
    a50c:	003f9f06 	br	a38c <_fpadd_parts+0xa4>
    a510:	0115c83a 	sub	r10,zero,r4
    a514:	00c00fc4 	movi	r3,63
    a518:	1abfda16 	blt	r3,r10,a484 <_fpadd_parts+0x19c>
    a51c:	003f8906 	br	a344 <_fpadd_parts+0x5c>
    a520:	627fb52e 	bgeu	r12,r9,a3f8 <_fpadd_parts+0x110>
    a524:	003fc006 	br	a428 <_fpadd_parts+0x140>
    a528:	6205c83a 	sub	r2,r12,r8
    a52c:	6099803a 	cmpltu	r12,r12,r2
    a530:	6a47c83a 	sub	r3,r13,r9
    a534:	1b07c83a 	sub	r3,r3,r12
    a538:	183f9d0e 	bge	r3,zero,a3b0 <_fpadd_parts+0xc8>
    a53c:	0085c83a 	sub	r2,zero,r2
    a540:	1008c03a 	cmpne	r4,r2,zero
    a544:	00c7c83a 	sub	r3,zero,r3
    a548:	1907c83a 	sub	r3,r3,r4
    a54c:	01000044 	movi	r4,1
    a550:	31000115 	stw	r4,4(r6)
    a554:	31c00215 	stw	r7,8(r6)
    a558:	30800315 	stw	r2,12(r6)
    a55c:	30c00415 	stw	r3,16(r6)
    a560:	003f9706 	br	a3c0 <_fpadd_parts+0xd8>
    a564:	203f8926 	beq	r4,zero,a38c <_fpadd_parts+0xa4>
    a568:	50fff804 	addi	r3,r10,-32
    a56c:	3a8f883a 	add	r7,r7,r10
    a570:	18002316 	blt	r3,zero,a600 <_fpadd_parts+0x318>
    a574:	68d6d83a 	srl	r11,r13,r3
    a578:	001d883a 	mov	r14,zero
    a57c:	18001c16 	blt	r3,zero,a5f0 <_fpadd_parts+0x308>
    a580:	01000044 	movi	r4,1
    a584:	20c6983a 	sll	r3,r4,r3
    a588:	0015883a 	mov	r10,zero
    a58c:	513fffc4 	addi	r4,r10,-1
    a590:	2295403a 	cmpgeu	r10,r4,r10
    a594:	1a87c83a 	sub	r3,r3,r10
    a598:	1b5a703a 	and	r13,r3,r13
    a59c:	2318703a 	and	r12,r4,r12
    a5a0:	6358b03a 	or	r12,r12,r13
    a5a4:	6018c03a 	cmpne	r12,r12,zero
    a5a8:	62d8b03a 	or	r12,r12,r11
    a5ac:	701b883a 	mov	r13,r14
    a5b0:	003f7606 	br	a38c <_fpadd_parts+0xa4>
    a5b4:	4808907a 	slli	r4,r9,1
    a5b8:	02c007c4 	movi	r11,31
    a5bc:	5a97c83a 	sub	r11,r11,r10
    a5c0:	22c8983a 	sll	r4,r4,r11
    a5c4:	4296d83a 	srl	r11,r8,r10
    a5c8:	4a9cd83a 	srl	r14,r9,r10
    a5cc:	22d6b03a 	or	r11,r4,r11
    a5d0:	003f6106 	br	a358 <_fpadd_parts+0x70>
    a5d4:	00c00044 	movi	r3,1
    a5d8:	1a94983a 	sll	r10,r3,r10
    a5dc:	0007883a 	mov	r3,zero
    a5e0:	003f6106 	br	a368 <_fpadd_parts+0x80>
    a5e4:	013fff84 	movi	r4,-2
    a5e8:	21ff7c2e 	bgeu	r4,r7,a3dc <_fpadd_parts+0xf4>
    a5ec:	003f9106 	br	a434 <_fpadd_parts+0x14c>
    a5f0:	00c00044 	movi	r3,1
    a5f4:	1a94983a 	sll	r10,r3,r10
    a5f8:	0007883a 	mov	r3,zero
    a5fc:	003fe306 	br	a58c <_fpadd_parts+0x2a4>
    a600:	6816907a 	slli	r11,r13,1
    a604:	010007c4 	movi	r4,31
    a608:	2289c83a 	sub	r4,r4,r10
    a60c:	5908983a 	sll	r4,r11,r4
    a610:	6296d83a 	srl	r11,r12,r10
    a614:	6a9cd83a 	srl	r14,r13,r10
    a618:	22d6b03a 	or	r11,r4,r11
    a61c:	003fd706 	br	a57c <_fpadd_parts+0x294>
    a620:	193f971e 	bne	r3,r4,a480 <_fpadd_parts+0x198>
    a624:	11000117 	ldw	r4,4(r2)
    a628:	28c00117 	ldw	r3,4(r5)
    a62c:	20ff9426 	beq	r4,r3,a480 <_fpadd_parts+0x198>
    a630:	00800074 	movhi	r2,1
    a634:	10b72b04 	addi	r2,r2,-9044
    a638:	f800283a 	ret

0000a63c <__adddf3>:
    a63c:	deffec04 	addi	sp,sp,-80
    a640:	d9001115 	stw	r4,68(sp)
    a644:	d9401215 	stw	r5,72(sp)
    a648:	d9001104 	addi	r4,sp,68
    a64c:	d9400a04 	addi	r5,sp,40
    a650:	dfc01315 	stw	ra,76(sp)
    a654:	d9c01015 	stw	r7,64(sp)
    a658:	d9800f15 	stw	r6,60(sp)
    a65c:	000b3fc0 	call	b3fc <__unpack_d>
    a660:	d9000f04 	addi	r4,sp,60
    a664:	d9400504 	addi	r5,sp,20
    a668:	000b3fc0 	call	b3fc <__unpack_d>
    a66c:	d9000a04 	addi	r4,sp,40
    a670:	d9400504 	addi	r5,sp,20
    a674:	d80d883a 	mov	r6,sp
    a678:	000a2e80 	call	a2e8 <_fpadd_parts>
    a67c:	1009883a 	mov	r4,r2
    a680:	000b1d80 	call	b1d8 <__pack_d>
    a684:	dfc01317 	ldw	ra,76(sp)
    a688:	dec01404 	addi	sp,sp,80
    a68c:	f800283a 	ret

0000a690 <__subdf3>:
    a690:	deffec04 	addi	sp,sp,-80
    a694:	d9001115 	stw	r4,68(sp)
    a698:	d9401215 	stw	r5,72(sp)
    a69c:	d9001104 	addi	r4,sp,68
    a6a0:	d9400a04 	addi	r5,sp,40
    a6a4:	dfc01315 	stw	ra,76(sp)
    a6a8:	d9c01015 	stw	r7,64(sp)
    a6ac:	d9800f15 	stw	r6,60(sp)
    a6b0:	000b3fc0 	call	b3fc <__unpack_d>
    a6b4:	d9000f04 	addi	r4,sp,60
    a6b8:	d9400504 	addi	r5,sp,20
    a6bc:	000b3fc0 	call	b3fc <__unpack_d>
    a6c0:	d8800617 	ldw	r2,24(sp)
    a6c4:	d9000a04 	addi	r4,sp,40
    a6c8:	d9400504 	addi	r5,sp,20
    a6cc:	d80d883a 	mov	r6,sp
    a6d0:	1080005c 	xori	r2,r2,1
    a6d4:	d8800615 	stw	r2,24(sp)
    a6d8:	000a2e80 	call	a2e8 <_fpadd_parts>
    a6dc:	1009883a 	mov	r4,r2
    a6e0:	000b1d80 	call	b1d8 <__pack_d>
    a6e4:	dfc01317 	ldw	ra,76(sp)
    a6e8:	dec01404 	addi	sp,sp,80
    a6ec:	f800283a 	ret

0000a6f0 <__muldf3>:
    a6f0:	deffe404 	addi	sp,sp,-112
    a6f4:	d9001115 	stw	r4,68(sp)
    a6f8:	d9401215 	stw	r5,72(sp)
    a6fc:	d9001104 	addi	r4,sp,68
    a700:	d9400a04 	addi	r5,sp,40
    a704:	dfc01b15 	stw	ra,108(sp)
    a708:	d9800f15 	stw	r6,60(sp)
    a70c:	d9c01015 	stw	r7,64(sp)
    a710:	ddc01a15 	stw	r23,104(sp)
    a714:	dd801915 	stw	r22,100(sp)
    a718:	dd401815 	stw	r21,96(sp)
    a71c:	dd001715 	stw	r20,92(sp)
    a720:	dcc01615 	stw	r19,88(sp)
    a724:	dc801515 	stw	r18,84(sp)
    a728:	dc401415 	stw	r17,80(sp)
    a72c:	dc001315 	stw	r16,76(sp)
    a730:	000b3fc0 	call	b3fc <__unpack_d>
    a734:	d9000f04 	addi	r4,sp,60
    a738:	d9400504 	addi	r5,sp,20
    a73c:	000b3fc0 	call	b3fc <__unpack_d>
    a740:	d8c00a17 	ldw	r3,40(sp)
    a744:	00800044 	movi	r2,1
    a748:	10c01136 	bltu	r2,r3,a790 <__muldf3+0xa0>
    a74c:	d8c00b17 	ldw	r3,44(sp)
    a750:	d8800617 	ldw	r2,24(sp)
    a754:	d9000a04 	addi	r4,sp,40
    a758:	1884c03a 	cmpne	r2,r3,r2
    a75c:	d8800b15 	stw	r2,44(sp)
    a760:	000b1d80 	call	b1d8 <__pack_d>
    a764:	dfc01b17 	ldw	ra,108(sp)
    a768:	ddc01a17 	ldw	r23,104(sp)
    a76c:	dd801917 	ldw	r22,100(sp)
    a770:	dd401817 	ldw	r21,96(sp)
    a774:	dd001717 	ldw	r20,92(sp)
    a778:	dcc01617 	ldw	r19,88(sp)
    a77c:	dc801517 	ldw	r18,84(sp)
    a780:	dc401417 	ldw	r17,80(sp)
    a784:	dc001317 	ldw	r16,76(sp)
    a788:	dec01c04 	addi	sp,sp,112
    a78c:	f800283a 	ret
    a790:	d9000517 	ldw	r4,20(sp)
    a794:	11000636 	bltu	r2,r4,a7b0 <__muldf3+0xc0>
    a798:	d8800617 	ldw	r2,24(sp)
    a79c:	d8c00b17 	ldw	r3,44(sp)
    a7a0:	d9000504 	addi	r4,sp,20
    a7a4:	1884c03a 	cmpne	r2,r3,r2
    a7a8:	d8800615 	stw	r2,24(sp)
    a7ac:	003fec06 	br	a760 <__muldf3+0x70>
    a7b0:	00800104 	movi	r2,4
    a7b4:	1880051e 	bne	r3,r2,a7cc <__muldf3+0xdc>
    a7b8:	00800084 	movi	r2,2
    a7bc:	20bfe31e 	bne	r4,r2,a74c <__muldf3+0x5c>
    a7c0:	01000074 	movhi	r4,1
    a7c4:	21372b04 	addi	r4,r4,-9044
    a7c8:	003fe506 	br	a760 <__muldf3+0x70>
    a7cc:	2080031e 	bne	r4,r2,a7dc <__muldf3+0xec>
    a7d0:	00800084 	movi	r2,2
    a7d4:	18bffa26 	beq	r3,r2,a7c0 <__muldf3+0xd0>
    a7d8:	003fef06 	br	a798 <__muldf3+0xa8>
    a7dc:	00800084 	movi	r2,2
    a7e0:	18bfda26 	beq	r3,r2,a74c <__muldf3+0x5c>
    a7e4:	20bfec26 	beq	r4,r2,a798 <__muldf3+0xa8>
    a7e8:	dc000d17 	ldw	r16,52(sp)
    a7ec:	dd000817 	ldw	r20,32(sp)
    a7f0:	dc800917 	ldw	r18,36(sp)
    a7f4:	8009883a 	mov	r4,r16
    a7f8:	000b883a 	mov	r5,zero
    a7fc:	a00d883a 	mov	r6,r20
    a800:	000f883a 	mov	r7,zero
    a804:	000ae280 	call	ae28 <__muldi3>
    a808:	dc400e17 	ldw	r17,56(sp)
    a80c:	9009883a 	mov	r4,r18
    a810:	800d883a 	mov	r6,r16
    a814:	000b883a 	mov	r5,zero
    a818:	000f883a 	mov	r7,zero
    a81c:	102f883a 	mov	r23,r2
    a820:	1827883a 	mov	r19,r3
    a824:	000ae280 	call	ae28 <__muldi3>
    a828:	900d883a 	mov	r6,r18
    a82c:	8809883a 	mov	r4,r17
    a830:	000b883a 	mov	r5,zero
    a834:	000f883a 	mov	r7,zero
    a838:	102b883a 	mov	r21,r2
    a83c:	1821883a 	mov	r16,r3
    a840:	000ae280 	call	ae28 <__muldi3>
    a844:	8809883a 	mov	r4,r17
    a848:	000b883a 	mov	r5,zero
    a84c:	a00d883a 	mov	r6,r20
    a850:	000f883a 	mov	r7,zero
    a854:	102d883a 	mov	r22,r2
    a858:	1825883a 	mov	r18,r3
    a85c:	000ae280 	call	ae28 <__muldi3>
    a860:	154b883a 	add	r5,r2,r21
    a864:	2889803a 	cmpltu	r4,r5,r2
    a868:	1c07883a 	add	r3,r3,r16
    a86c:	20c9883a 	add	r4,r4,r3
    a870:	24004b36 	bltu	r4,r16,a9a0 <__muldf3+0x2b0>
    a874:	8100011e 	bne	r16,r4,a87c <__muldf3+0x18c>
    a878:	2d404936 	bltu	r5,r21,a9a0 <__muldf3+0x2b0>
    a87c:	0011883a 	mov	r8,zero
    a880:	0007883a 	mov	r3,zero
    a884:	2ccb883a 	add	r5,r5,r19
    a888:	b80d883a 	mov	r6,r23
    a88c:	2cc0012e 	bgeu	r5,r19,a894 <__muldf3+0x1a4>
    a890:	02000044 	movi	r8,1
    a894:	258f883a 	add	r7,r4,r22
    a898:	3909803a 	cmpltu	r4,r7,r4
    a89c:	da400c17 	ldw	r9,48(sp)
    a8a0:	2489883a 	add	r4,r4,r18
    a8a4:	d8800717 	ldw	r2,28(sp)
    a8a8:	20c9883a 	add	r4,r4,r3
    a8ac:	da800b17 	ldw	r10,44(sp)
    a8b0:	d8c00617 	ldw	r3,24(sp)
    a8b4:	3a11883a 	add	r8,r7,r8
    a8b8:	4885883a 	add	r2,r9,r2
    a8bc:	50c6c03a 	cmpne	r3,r10,r3
    a8c0:	41cf803a 	cmpltu	r7,r8,r7
    a8c4:	12400104 	addi	r9,r2,4
    a8c8:	d8c00115 	stw	r3,4(sp)
    a8cc:	3909883a 	add	r4,r7,r4
    a8d0:	da400215 	stw	r9,8(sp)
    a8d4:	03480034 	movhi	r13,8192
    a8d8:	6b7fffc4 	addi	r13,r13,-1
    a8dc:	4007883a 	mov	r3,r8
    a8e0:	6900102e 	bgeu	r13,r4,a924 <__muldf3+0x234>
    a8e4:	10800144 	addi	r2,r2,5
    a8e8:	180ed07a 	srli	r7,r3,1
    a8ec:	18c0004c 	andi	r3,r3,1
    a8f0:	201097fa 	slli	r8,r4,31
    a8f4:	281697fa 	slli	r11,r5,31
    a8f8:	2008d07a 	srli	r4,r4,1
    a8fc:	3014d07a 	srli	r10,r6,1
    a900:	2812d07a 	srli	r9,r5,1
    a904:	1019883a 	mov	r12,r2
    a908:	18000226 	beq	r3,zero,a914 <__muldf3+0x224>
    a90c:	5a8cb03a 	or	r6,r11,r10
    a910:	49600034 	orhi	r5,r9,32768
    a914:	41c6b03a 	or	r3,r8,r7
    a918:	10800044 	addi	r2,r2,1
    a91c:	693ff236 	bltu	r13,r4,a8e8 <__muldf3+0x1f8>
    a920:	db000215 	stw	r12,8(sp)
    a924:	03440034 	movhi	r13,4096
    a928:	6b7fffc4 	addi	r13,r13,-1
    a92c:	69001336 	bltu	r13,r4,a97c <__muldf3+0x28c>
    a930:	d8800217 	ldw	r2,8(sp)
    a934:	10bfffc4 	addi	r2,r2,-1
    a938:	18d3883a 	add	r9,r3,r3
    a93c:	48c7803a 	cmpltu	r3,r9,r3
    a940:	2109883a 	add	r4,r4,r4
    a944:	190f883a 	add	r7,r3,r4
    a948:	3191883a 	add	r8,r6,r6
    a94c:	4197803a 	cmpltu	r11,r8,r6
    a950:	2955883a 	add	r10,r5,r5
    a954:	1019883a 	mov	r12,r2
    a958:	4807883a 	mov	r3,r9
    a95c:	3809883a 	mov	r4,r7
    a960:	2800010e 	bge	r5,zero,a968 <__muldf3+0x278>
    a964:	48c00054 	ori	r3,r9,1
    a968:	400d883a 	mov	r6,r8
    a96c:	5a8b883a 	add	r5,r11,r10
    a970:	10bfffc4 	addi	r2,r2,-1
    a974:	69fff02e 	bgeu	r13,r7,a938 <__muldf3+0x248>
    a978:	db000215 	stw	r12,8(sp)
    a97c:	18803fcc 	andi	r2,r3,255
    a980:	01c02004 	movi	r7,128
    a984:	11c00926 	beq	r2,r7,a9ac <__muldf3+0x2bc>
    a988:	008000c4 	movi	r2,3
    a98c:	d9000415 	stw	r4,16(sp)
    a990:	d8c00315 	stw	r3,12(sp)
    a994:	d8800015 	stw	r2,0(sp)
    a998:	d809883a 	mov	r4,sp
    a99c:	003f7006 	br	a760 <__muldf3+0x70>
    a9a0:	0011883a 	mov	r8,zero
    a9a4:	00c00044 	movi	r3,1
    a9a8:	003fb606 	br	a884 <__muldf3+0x194>
    a9ac:	19c0400c 	andi	r7,r3,256
    a9b0:	383ff51e 	bne	r7,zero,a988 <__muldf3+0x298>
    a9b4:	314ab03a 	or	r5,r6,r5
    a9b8:	283ff326 	beq	r5,zero,a988 <__muldf3+0x298>
    a9bc:	1885883a 	add	r2,r3,r2
    a9c0:	10cb803a 	cmpltu	r5,r2,r3
    a9c4:	00ffc004 	movi	r3,-256
    a9c8:	10c6703a 	and	r3,r2,r3
    a9cc:	2909883a 	add	r4,r5,r4
    a9d0:	003fed06 	br	a988 <__muldf3+0x298>

0000a9d4 <__divdf3>:
    a9d4:	defff104 	addi	sp,sp,-60
    a9d8:	d9000c15 	stw	r4,48(sp)
    a9dc:	d9400d15 	stw	r5,52(sp)
    a9e0:	d9000c04 	addi	r4,sp,48
    a9e4:	d9400504 	addi	r5,sp,20
    a9e8:	dfc00e15 	stw	ra,56(sp)
    a9ec:	d9800a15 	stw	r6,40(sp)
    a9f0:	d9c00b15 	stw	r7,44(sp)
    a9f4:	000b3fc0 	call	b3fc <__unpack_d>
    a9f8:	d9000a04 	addi	r4,sp,40
    a9fc:	d80b883a 	mov	r5,sp
    aa00:	000b3fc0 	call	b3fc <__unpack_d>
    aa04:	d8c00517 	ldw	r3,20(sp)
    aa08:	00800044 	movi	r2,1
    aa0c:	10c00536 	bltu	r2,r3,aa24 <__divdf3+0x50>
    aa10:	d9000504 	addi	r4,sp,20
    aa14:	000b1d80 	call	b1d8 <__pack_d>
    aa18:	dfc00e17 	ldw	ra,56(sp)
    aa1c:	dec00f04 	addi	sp,sp,60
    aa20:	f800283a 	ret
    aa24:	d9000017 	ldw	r4,0(sp)
    aa28:	11000536 	bltu	r2,r4,aa40 <__divdf3+0x6c>
    aa2c:	d809883a 	mov	r4,sp
    aa30:	000b1d80 	call	b1d8 <__pack_d>
    aa34:	dfc00e17 	ldw	ra,56(sp)
    aa38:	dec00f04 	addi	sp,sp,60
    aa3c:	f800283a 	ret
    aa40:	d9800617 	ldw	r6,24(sp)
    aa44:	d9400117 	ldw	r5,4(sp)
    aa48:	00800104 	movi	r2,4
    aa4c:	314af03a 	xor	r5,r6,r5
    aa50:	d9400615 	stw	r5,24(sp)
    aa54:	18800226 	beq	r3,r2,aa60 <__divdf3+0x8c>
    aa58:	01400084 	movi	r5,2
    aa5c:	1940041e 	bne	r3,r5,aa70 <__divdf3+0x9c>
    aa60:	193feb1e 	bne	r3,r4,aa10 <__divdf3+0x3c>
    aa64:	01000074 	movhi	r4,1
    aa68:	21372b04 	addi	r4,r4,-9044
    aa6c:	003fe906 	br	aa14 <__divdf3+0x40>
    aa70:	20803326 	beq	r4,r2,ab40 <__divdf3+0x16c>
    aa74:	21403726 	beq	r4,r5,ab54 <__divdf3+0x180>
    aa78:	d8800217 	ldw	r2,8(sp)
    aa7c:	d9000717 	ldw	r4,28(sp)
    aa80:	d8c00917 	ldw	r3,36(sp)
    aa84:	da000417 	ldw	r8,16(sp)
    aa88:	2089c83a 	sub	r4,r4,r2
    aa8c:	d9000715 	stw	r4,28(sp)
    aa90:	d8800817 	ldw	r2,32(sp)
    aa94:	dbc00317 	ldw	r15,12(sp)
    aa98:	1a000236 	bltu	r3,r8,aaa4 <__divdf3+0xd0>
    aa9c:	40c0081e 	bne	r8,r3,aac0 <__divdf3+0xec>
    aaa0:	13c0072e 	bgeu	r2,r15,aac0 <__divdf3+0xec>
    aaa4:	108b883a 	add	r5,r2,r2
    aaa8:	288d803a 	cmpltu	r6,r5,r2
    aaac:	18c7883a 	add	r3,r3,r3
    aab0:	213fffc4 	addi	r4,r4,-1
    aab4:	2805883a 	mov	r2,r5
    aab8:	30c7883a 	add	r3,r6,r3
    aabc:	d9000715 	stw	r4,28(sp)
    aac0:	01400f44 	movi	r5,61
    aac4:	000f883a 	mov	r7,zero
    aac8:	01040034 	movhi	r4,4096
    aacc:	0019883a 	mov	r12,zero
    aad0:	001b883a 	mov	r13,zero
    aad4:	201697fa 	slli	r11,r4,31
    aad8:	3814d07a 	srli	r10,r7,1
    aadc:	297fffc4 	addi	r5,r5,-1
    aae0:	1a000936 	bltu	r3,r8,ab08 <__divdf3+0x134>
    aae4:	13cdc83a 	sub	r6,r2,r15
    aae8:	1193803a 	cmpltu	r9,r2,r6
    aaec:	1a1dc83a 	sub	r14,r3,r8
    aaf0:	40c0011e 	bne	r8,r3,aaf8 <__divdf3+0x124>
    aaf4:	13c00436 	bltu	r2,r15,ab08 <__divdf3+0x134>
    aaf8:	3005883a 	mov	r2,r6
    aafc:	7247c83a 	sub	r3,r14,r9
    ab00:	61d8b03a 	or	r12,r12,r7
    ab04:	691ab03a 	or	r13,r13,r4
    ab08:	108d883a 	add	r6,r2,r2
    ab0c:	3093803a 	cmpltu	r9,r6,r2
    ab10:	18c7883a 	add	r3,r3,r3
    ab14:	5a8eb03a 	or	r7,r11,r10
    ab18:	2008d07a 	srli	r4,r4,1
    ab1c:	3005883a 	mov	r2,r6
    ab20:	48c7883a 	add	r3,r9,r3
    ab24:	283feb1e 	bne	r5,zero,aad4 <__divdf3+0x100>
    ab28:	61003fcc 	andi	r4,r12,255
    ab2c:	01402004 	movi	r5,128
    ab30:	21400b26 	beq	r4,r5,ab60 <__divdf3+0x18c>
    ab34:	db000815 	stw	r12,32(sp)
    ab38:	db400915 	stw	r13,36(sp)
    ab3c:	003fb406 	br	aa10 <__divdf3+0x3c>
    ab40:	d8000815 	stw	zero,32(sp)
    ab44:	d8000915 	stw	zero,36(sp)
    ab48:	d8000715 	stw	zero,28(sp)
    ab4c:	d9000504 	addi	r4,sp,20
    ab50:	003fb006 	br	aa14 <__divdf3+0x40>
    ab54:	d8800515 	stw	r2,20(sp)
    ab58:	d9000504 	addi	r4,sp,20
    ab5c:	003fad06 	br	aa14 <__divdf3+0x40>
    ab60:	6140400c 	andi	r5,r12,256
    ab64:	283ff31e 	bne	r5,zero,ab34 <__divdf3+0x160>
    ab68:	30c4b03a 	or	r2,r6,r3
    ab6c:	103ff126 	beq	r2,zero,ab34 <__divdf3+0x160>
    ab70:	6109883a 	add	r4,r12,r4
    ab74:	2305803a 	cmpltu	r2,r4,r12
    ab78:	033fc004 	movi	r12,-256
    ab7c:	2318703a 	and	r12,r4,r12
    ab80:	135b883a 	add	r13,r2,r13
    ab84:	003feb06 	br	ab34 <__divdf3+0x160>

0000ab88 <__gtdf2>:
    ab88:	defff104 	addi	sp,sp,-60
    ab8c:	d9000c15 	stw	r4,48(sp)
    ab90:	d9400d15 	stw	r5,52(sp)
    ab94:	d9000c04 	addi	r4,sp,48
    ab98:	d9400504 	addi	r5,sp,20
    ab9c:	dfc00e15 	stw	ra,56(sp)
    aba0:	d9800a15 	stw	r6,40(sp)
    aba4:	d9c00b15 	stw	r7,44(sp)
    aba8:	000b3fc0 	call	b3fc <__unpack_d>
    abac:	d9000a04 	addi	r4,sp,40
    abb0:	d80b883a 	mov	r5,sp
    abb4:	000b3fc0 	call	b3fc <__unpack_d>
    abb8:	d8c00517 	ldw	r3,20(sp)
    abbc:	00800044 	movi	r2,1
    abc0:	10c0082e 	bgeu	r2,r3,abe4 <__gtdf2+0x5c>
    abc4:	d8c00017 	ldw	r3,0(sp)
    abc8:	10c0062e 	bgeu	r2,r3,abe4 <__gtdf2+0x5c>
    abcc:	d9000504 	addi	r4,sp,20
    abd0:	d80b883a 	mov	r5,sp
    abd4:	000b5000 	call	b500 <__fpcmp_parts_d>
    abd8:	dfc00e17 	ldw	ra,56(sp)
    abdc:	dec00f04 	addi	sp,sp,60
    abe0:	f800283a 	ret
    abe4:	00bfffc4 	movi	r2,-1
    abe8:	003ffb06 	br	abd8 <__gtdf2+0x50>

0000abec <__ltdf2>:
    abec:	defff104 	addi	sp,sp,-60
    abf0:	d9000c15 	stw	r4,48(sp)
    abf4:	d9400d15 	stw	r5,52(sp)
    abf8:	d9000c04 	addi	r4,sp,48
    abfc:	d9400504 	addi	r5,sp,20
    ac00:	dfc00e15 	stw	ra,56(sp)
    ac04:	d9800a15 	stw	r6,40(sp)
    ac08:	d9c00b15 	stw	r7,44(sp)
    ac0c:	000b3fc0 	call	b3fc <__unpack_d>
    ac10:	d9000a04 	addi	r4,sp,40
    ac14:	d80b883a 	mov	r5,sp
    ac18:	000b3fc0 	call	b3fc <__unpack_d>
    ac1c:	d8c00517 	ldw	r3,20(sp)
    ac20:	00800044 	movi	r2,1
    ac24:	10c0052e 	bgeu	r2,r3,ac3c <__ltdf2+0x50>
    ac28:	d8c00017 	ldw	r3,0(sp)
    ac2c:	10c0032e 	bgeu	r2,r3,ac3c <__ltdf2+0x50>
    ac30:	d9000504 	addi	r4,sp,20
    ac34:	d80b883a 	mov	r5,sp
    ac38:	000b5000 	call	b500 <__fpcmp_parts_d>
    ac3c:	dfc00e17 	ldw	ra,56(sp)
    ac40:	dec00f04 	addi	sp,sp,60
    ac44:	f800283a 	ret

0000ac48 <__floatsidf>:
    ac48:	2004d7fa 	srli	r2,r4,31
    ac4c:	defff904 	addi	sp,sp,-28
    ac50:	00c000c4 	movi	r3,3
    ac54:	dfc00615 	stw	ra,24(sp)
    ac58:	dc000515 	stw	r16,20(sp)
    ac5c:	d8c00015 	stw	r3,0(sp)
    ac60:	d8800115 	stw	r2,4(sp)
    ac64:	2000081e 	bne	r4,zero,ac88 <__floatsidf+0x40>
    ac68:	00800084 	movi	r2,2
    ac6c:	d8800015 	stw	r2,0(sp)
    ac70:	d809883a 	mov	r4,sp
    ac74:	000b1d80 	call	b1d8 <__pack_d>
    ac78:	dfc00617 	ldw	ra,24(sp)
    ac7c:	dc000517 	ldw	r16,20(sp)
    ac80:	dec00704 	addi	sp,sp,28
    ac84:	f800283a 	ret
    ac88:	00c00f04 	movi	r3,60
    ac8c:	d8c00215 	stw	r3,8(sp)
    ac90:	10000f1e 	bne	r2,zero,acd0 <__floatsidf+0x88>
    ac94:	2021883a 	mov	r16,r4
    ac98:	8009883a 	mov	r4,r16
    ac9c:	000af380 	call	af38 <__clzsi2>
    aca0:	11000744 	addi	r4,r2,29
    aca4:	0100110e 	bge	zero,r4,acec <__floatsidf+0xa4>
    aca8:	10ffff44 	addi	r3,r2,-3
    acac:	18001216 	blt	r3,zero,acf8 <__floatsidf+0xb0>
    acb0:	80c6983a 	sll	r3,r16,r3
    acb4:	0009883a 	mov	r4,zero
    acb8:	014007c4 	movi	r5,31
    acbc:	2885c83a 	sub	r2,r5,r2
    acc0:	d9000315 	stw	r4,12(sp)
    acc4:	d8c00415 	stw	r3,16(sp)
    acc8:	d8800215 	stw	r2,8(sp)
    accc:	003fe806 	br	ac70 <__floatsidf+0x28>
    acd0:	00a00034 	movhi	r2,32768
    acd4:	20800e26 	beq	r4,r2,ad10 <__floatsidf+0xc8>
    acd8:	0121c83a 	sub	r16,zero,r4
    acdc:	8009883a 	mov	r4,r16
    ace0:	000af380 	call	af38 <__clzsi2>
    ace4:	11000744 	addi	r4,r2,29
    ace8:	013fef16 	blt	zero,r4,aca8 <__floatsidf+0x60>
    acec:	dc000315 	stw	r16,12(sp)
    acf0:	d8000415 	stw	zero,16(sp)
    acf4:	003fde06 	br	ac70 <__floatsidf+0x28>
    acf8:	800ad07a 	srli	r5,r16,1
    acfc:	00c007c4 	movi	r3,31
    ad00:	1907c83a 	sub	r3,r3,r4
    ad04:	28c6d83a 	srl	r3,r5,r3
    ad08:	8108983a 	sll	r4,r16,r4
    ad0c:	003fea06 	br	acb8 <__floatsidf+0x70>
    ad10:	0005883a 	mov	r2,zero
    ad14:	00f07834 	movhi	r3,49632
    ad18:	003fd706 	br	ac78 <__floatsidf+0x30>

0000ad1c <__fixdfsi>:
    ad1c:	defff804 	addi	sp,sp,-32
    ad20:	d9000515 	stw	r4,20(sp)
    ad24:	d9400615 	stw	r5,24(sp)
    ad28:	d9000504 	addi	r4,sp,20
    ad2c:	d80b883a 	mov	r5,sp
    ad30:	dfc00715 	stw	ra,28(sp)
    ad34:	000b3fc0 	call	b3fc <__unpack_d>
    ad38:	d8800017 	ldw	r2,0(sp)
    ad3c:	00c00084 	movi	r3,2
    ad40:	10c01c26 	beq	r2,r3,adb4 <__fixdfsi+0x98>
    ad44:	00c00044 	movi	r3,1
    ad48:	18801a2e 	bgeu	r3,r2,adb4 <__fixdfsi+0x98>
    ad4c:	00c00104 	movi	r3,4
    ad50:	10c01126 	beq	r2,r3,ad98 <__fixdfsi+0x7c>
    ad54:	d8800217 	ldw	r2,8(sp)
    ad58:	10001616 	blt	r2,zero,adb4 <__fixdfsi+0x98>
    ad5c:	00c00784 	movi	r3,30
    ad60:	18800d16 	blt	r3,r2,ad98 <__fixdfsi+0x7c>
    ad64:	00c00f04 	movi	r3,60
    ad68:	1885c83a 	sub	r2,r3,r2
    ad6c:	10fff804 	addi	r3,r2,-32
    ad70:	d9400317 	ldw	r5,12(sp)
    ad74:	d9000417 	ldw	r4,16(sp)
    ad78:	18001616 	blt	r3,zero,add4 <__fixdfsi+0xb8>
    ad7c:	20c4d83a 	srl	r2,r4,r3
    ad80:	d8c00117 	ldw	r3,4(sp)
    ad84:	18000126 	beq	r3,zero,ad8c <__fixdfsi+0x70>
    ad88:	0085c83a 	sub	r2,zero,r2
    ad8c:	dfc00717 	ldw	ra,28(sp)
    ad90:	dec00804 	addi	sp,sp,32
    ad94:	f800283a 	ret
    ad98:	d8800117 	ldw	r2,4(sp)
    ad9c:	1000091e 	bne	r2,zero,adc4 <__fixdfsi+0xa8>
    ada0:	00a00034 	movhi	r2,32768
    ada4:	10bfffc4 	addi	r2,r2,-1
    ada8:	dfc00717 	ldw	ra,28(sp)
    adac:	dec00804 	addi	sp,sp,32
    adb0:	f800283a 	ret
    adb4:	0005883a 	mov	r2,zero
    adb8:	dfc00717 	ldw	ra,28(sp)
    adbc:	dec00804 	addi	sp,sp,32
    adc0:	f800283a 	ret
    adc4:	00a00034 	movhi	r2,32768
    adc8:	dfc00717 	ldw	ra,28(sp)
    adcc:	dec00804 	addi	sp,sp,32
    add0:	f800283a 	ret
    add4:	2008907a 	slli	r4,r4,1
    add8:	018007c4 	movi	r6,31
    addc:	308dc83a 	sub	r6,r6,r2
    ade0:	2188983a 	sll	r4,r4,r6
    ade4:	2884d83a 	srl	r2,r5,r2
    ade8:	2084b03a 	or	r2,r4,r2
    adec:	003fe406 	br	ad80 <__fixdfsi+0x64>

0000adf0 <__make_dp>:
    adf0:	defff904 	addi	sp,sp,-28
    adf4:	d8800717 	ldw	r2,28(sp)
    adf8:	d9000015 	stw	r4,0(sp)
    adfc:	d809883a 	mov	r4,sp
    ae00:	dfc00515 	stw	ra,20(sp)
    ae04:	d9c00615 	stw	r7,24(sp)
    ae08:	d9400115 	stw	r5,4(sp)
    ae0c:	d9800215 	stw	r6,8(sp)
    ae10:	d9c00315 	stw	r7,12(sp)
    ae14:	d8800415 	stw	r2,16(sp)
    ae18:	000b1d80 	call	b1d8 <__pack_d>
    ae1c:	dfc00517 	ldw	ra,20(sp)
    ae20:	dec00704 	addi	sp,sp,28
    ae24:	f800283a 	ret

0000ae28 <__muldi3>:
    ae28:	defff604 	addi	sp,sp,-40
    ae2c:	dd400515 	stw	r21,20(sp)
    ae30:	dd000415 	stw	r20,16(sp)
    ae34:	257fffcc 	andi	r21,r4,65535
    ae38:	353fffcc 	andi	r20,r6,65535
    ae3c:	dcc00315 	stw	r19,12(sp)
    ae40:	3026d43a 	srli	r19,r6,16
    ae44:	dd800615 	stw	r22,24(sp)
    ae48:	dc800215 	stw	r18,8(sp)
    ae4c:	dc400115 	stw	r17,4(sp)
    ae50:	2024d43a 	srli	r18,r4,16
    ae54:	2023883a 	mov	r17,r4
    ae58:	282d883a 	mov	r22,r5
    ae5c:	a009883a 	mov	r4,r20
    ae60:	a80b883a 	mov	r5,r21
    ae64:	dfc00915 	stw	ra,36(sp)
    ae68:	df000815 	stw	fp,32(sp)
    ae6c:	ddc00715 	stw	r23,28(sp)
    ae70:	3839883a 	mov	fp,r7
    ae74:	dc000015 	stw	r16,0(sp)
    ae78:	3021883a 	mov	r16,r6
    ae7c:	000b5d00 	call	b5d0 <__mulsi3>
    ae80:	a80b883a 	mov	r5,r21
    ae84:	9809883a 	mov	r4,r19
    ae88:	102f883a 	mov	r23,r2
    ae8c:	000b5d00 	call	b5d0 <__mulsi3>
    ae90:	a009883a 	mov	r4,r20
    ae94:	900b883a 	mov	r5,r18
    ae98:	102b883a 	mov	r21,r2
    ae9c:	000b5d00 	call	b5d0 <__mulsi3>
    aea0:	9809883a 	mov	r4,r19
    aea4:	900b883a 	mov	r5,r18
    aea8:	1029883a 	mov	r20,r2
    aeac:	000b5d00 	call	b5d0 <__mulsi3>
    aeb0:	1007883a 	mov	r3,r2
    aeb4:	b804d43a 	srli	r2,r23,16
    aeb8:	a549883a 	add	r4,r20,r21
    aebc:	2089883a 	add	r4,r4,r2
    aec0:	2500022e 	bgeu	r4,r20,aecc <__muldi3+0xa4>
    aec4:	00800074 	movhi	r2,1
    aec8:	1887883a 	add	r3,r3,r2
    aecc:	200cd43a 	srli	r6,r4,16
    aed0:	2004943a 	slli	r2,r4,16
    aed4:	e00b883a 	mov	r5,fp
    aed8:	8809883a 	mov	r4,r17
    aedc:	bdffffcc 	andi	r23,r23,65535
    aee0:	19a3883a 	add	r17,r3,r6
    aee4:	15ef883a 	add	r23,r2,r23
    aee8:	000b5d00 	call	b5d0 <__mulsi3>
    aeec:	8009883a 	mov	r4,r16
    aef0:	b00b883a 	mov	r5,r22
    aef4:	1025883a 	mov	r18,r2
    aef8:	000b5d00 	call	b5d0 <__mulsi3>
    aefc:	9085883a 	add	r2,r18,r2
    af00:	1447883a 	add	r3,r2,r17
    af04:	b805883a 	mov	r2,r23
    af08:	dfc00917 	ldw	ra,36(sp)
    af0c:	df000817 	ldw	fp,32(sp)
    af10:	ddc00717 	ldw	r23,28(sp)
    af14:	dd800617 	ldw	r22,24(sp)
    af18:	dd400517 	ldw	r21,20(sp)
    af1c:	dd000417 	ldw	r20,16(sp)
    af20:	dcc00317 	ldw	r19,12(sp)
    af24:	dc800217 	ldw	r18,8(sp)
    af28:	dc400117 	ldw	r17,4(sp)
    af2c:	dc000017 	ldw	r16,0(sp)
    af30:	dec00a04 	addi	sp,sp,40
    af34:	f800283a 	ret

0000af38 <__clzsi2>:
    af38:	00bfffd4 	movui	r2,65535
    af3c:	11000b36 	bltu	r2,r4,af6c <__clzsi2+0x34>
    af40:	00803fc4 	movi	r2,255
    af44:	11001e2e 	bgeu	r2,r4,afc0 <__clzsi2+0x88>
    af48:	00c00204 	movi	r3,8
    af4c:	20c8d83a 	srl	r4,r4,r3
    af50:	00c00074 	movhi	r3,1
    af54:	18f73004 	addi	r3,r3,-9024
    af58:	00800604 	movi	r2,24
    af5c:	1909883a 	add	r4,r3,r4
    af60:	20c00003 	ldbu	r3,0(r4)
    af64:	10c5c83a 	sub	r2,r2,r3
    af68:	f800283a 	ret
    af6c:	00804034 	movhi	r2,256
    af70:	10bfffc4 	addi	r2,r2,-1
    af74:	11000936 	bltu	r2,r4,af9c <__clzsi2+0x64>
    af78:	00800404 	movi	r2,16
    af7c:	1007883a 	mov	r3,r2
    af80:	20c8d83a 	srl	r4,r4,r3
    af84:	00c00074 	movhi	r3,1
    af88:	18f73004 	addi	r3,r3,-9024
    af8c:	1909883a 	add	r4,r3,r4
    af90:	20c00003 	ldbu	r3,0(r4)
    af94:	10c5c83a 	sub	r2,r2,r3
    af98:	f800283a 	ret
    af9c:	00c00604 	movi	r3,24
    afa0:	20c8d83a 	srl	r4,r4,r3
    afa4:	00c00074 	movhi	r3,1
    afa8:	18f73004 	addi	r3,r3,-9024
    afac:	00800204 	movi	r2,8
    afb0:	1909883a 	add	r4,r3,r4
    afb4:	20c00003 	ldbu	r3,0(r4)
    afb8:	10c5c83a 	sub	r2,r2,r3
    afbc:	f800283a 	ret
    afc0:	0007883a 	mov	r3,zero
    afc4:	20c8d83a 	srl	r4,r4,r3
    afc8:	00c00074 	movhi	r3,1
    afcc:	18f73004 	addi	r3,r3,-9024
    afd0:	00800804 	movi	r2,32
    afd4:	1909883a 	add	r4,r3,r4
    afd8:	20c00003 	ldbu	r3,0(r4)
    afdc:	10c5c83a 	sub	r2,r2,r3
    afe0:	f800283a 	ret

0000afe4 <__pack_f>:
    afe4:	21400017 	ldw	r5,0(r4)
    afe8:	01800044 	movi	r6,1
    afec:	20c00317 	ldw	r3,12(r4)
    aff0:	21c00117 	ldw	r7,4(r4)
    aff4:	3140282e 	bgeu	r6,r5,b098 <__pack_f+0xb4>
    aff8:	00800104 	movi	r2,4
    affc:	28802326 	beq	r5,r2,b08c <__pack_f+0xa8>
    b000:	00800084 	movi	r2,2
    b004:	28800f26 	beq	r5,r2,b044 <__pack_f+0x60>
    b008:	18000e26 	beq	r3,zero,b044 <__pack_f+0x60>
    b00c:	21000217 	ldw	r4,8(r4)
    b010:	00bfe084 	movi	r2,-126
    b014:	20802616 	blt	r4,r2,b0b0 <__pack_f+0xcc>
    b018:	00801fc4 	movi	r2,127
    b01c:	11001b16 	blt	r2,r4,b08c <__pack_f+0xa8>
    b020:	188a703a 	and	r5,r3,r2
    b024:	00801004 	movi	r2,64
    b028:	28801126 	beq	r5,r2,b070 <__pack_f+0x8c>
    b02c:	18c00fc4 	addi	r3,r3,63
    b030:	18001316 	blt	r3,zero,b080 <__pack_f+0x9c>
    b034:	21001fc4 	addi	r4,r4,127
    b038:	180690ba 	slli	r3,r3,2
    b03c:	1806d27a 	srli	r3,r3,9
    b040:	00000206 	br	b04c <__pack_f+0x68>
    b044:	0009883a 	mov	r4,zero
    b048:	0007883a 	mov	r3,zero
    b04c:	21003fcc 	andi	r4,r4,255
    b050:	200895fa 	slli	r4,r4,23
    b054:	380a97fa 	slli	r5,r7,31
    b058:	00802034 	movhi	r2,128
    b05c:	10bfffc4 	addi	r2,r2,-1
    b060:	1886703a 	and	r3,r3,r2
    b064:	1904b03a 	or	r2,r3,r4
    b068:	1144b03a 	or	r2,r2,r5
    b06c:	f800283a 	ret
    b070:	1880200c 	andi	r2,r3,128
    b074:	103fee26 	beq	r2,zero,b030 <__pack_f+0x4c>
    b078:	18c01004 	addi	r3,r3,64
    b07c:	183fed0e 	bge	r3,zero,b034 <__pack_f+0x50>
    b080:	1806d07a 	srli	r3,r3,1
    b084:	21002004 	addi	r4,r4,128
    b088:	003feb06 	br	b038 <__pack_f+0x54>
    b08c:	013fffc4 	movi	r4,-1
    b090:	0007883a 	mov	r3,zero
    b094:	003fed06 	br	b04c <__pack_f+0x68>
    b098:	18c00434 	orhi	r3,r3,16
    b09c:	00802034 	movhi	r2,128
    b0a0:	10bfffc4 	addi	r2,r2,-1
    b0a4:	1886703a 	and	r3,r3,r2
    b0a8:	013fffc4 	movi	r4,-1
    b0ac:	003fe706 	br	b04c <__pack_f+0x68>
    b0b0:	1105c83a 	sub	r2,r2,r4
    b0b4:	01000644 	movi	r4,25
    b0b8:	20801216 	blt	r4,r2,b104 <__pack_f+0x120>
    b0bc:	3088983a 	sll	r4,r6,r2
    b0c0:	1884d83a 	srl	r2,r3,r2
    b0c4:	213fffc4 	addi	r4,r4,-1
    b0c8:	20c6703a 	and	r3,r4,r3
    b0cc:	1806c03a 	cmpne	r3,r3,zero
    b0d0:	1884b03a 	or	r2,r3,r2
    b0d4:	11001fcc 	andi	r4,r2,127
    b0d8:	00c01004 	movi	r3,64
    b0dc:	20c00a1e 	bne	r4,r3,b108 <__pack_f+0x124>
    b0e0:	10c0200c 	andi	r3,r2,128
    b0e4:	18000126 	beq	r3,zero,b0ec <__pack_f+0x108>
    b0e8:	10801004 	addi	r2,r2,64
    b0ec:	100690ba 	slli	r3,r2,2
    b0f0:	01100034 	movhi	r4,16384
    b0f4:	1105403a 	cmpgeu	r2,r2,r4
    b0f8:	1806d27a 	srli	r3,r3,9
    b0fc:	1009883a 	mov	r4,r2
    b100:	003fd206 	br	b04c <__pack_f+0x68>
    b104:	0005883a 	mov	r2,zero
    b108:	10800fc4 	addi	r2,r2,63
    b10c:	003ff706 	br	b0ec <__pack_f+0x108>

0000b110 <__unpack_f>:
    b110:	20c00017 	ldw	r3,0(r4)
    b114:	00802034 	movhi	r2,128
    b118:	10bfffc4 	addi	r2,r2,-1
    b11c:	1808d5fa 	srli	r4,r3,23
    b120:	180cd7fa 	srli	r6,r3,31
    b124:	1884703a 	and	r2,r3,r2
    b128:	21003fcc 	andi	r4,r4,255
    b12c:	29800115 	stw	r6,4(r5)
    b130:	2000111e 	bne	r4,zero,b178 <__unpack_f+0x68>
    b134:	10001a26 	beq	r2,zero,b1a0 <__unpack_f+0x90>
    b138:	00ffe084 	movi	r3,-126
    b13c:	100491fa 	slli	r2,r2,7
    b140:	28c00215 	stw	r3,8(r5)
    b144:	00c000c4 	movi	r3,3
    b148:	28c00015 	stw	r3,0(r5)
    b14c:	01900034 	movhi	r6,16384
    b150:	31bfffc4 	addi	r6,r6,-1
    b154:	30801036 	bltu	r6,r2,b198 <__unpack_f+0x88>
    b158:	00ffe044 	movi	r3,-127
    b15c:	1085883a 	add	r2,r2,r2
    b160:	1809883a 	mov	r4,r3
    b164:	18ffffc4 	addi	r3,r3,-1
    b168:	30bffc2e 	bgeu	r6,r2,b15c <__unpack_f+0x4c>
    b16c:	29000215 	stw	r4,8(r5)
    b170:	28800315 	stw	r2,12(r5)
    b174:	f800283a 	ret
    b178:	01803fc4 	movi	r6,255
    b17c:	21800b26 	beq	r4,r6,b1ac <__unpack_f+0x9c>
    b180:	100491fa 	slli	r2,r2,7
    b184:	213fe044 	addi	r4,r4,-127
    b188:	00c000c4 	movi	r3,3
    b18c:	10900034 	orhi	r2,r2,16384
    b190:	29000215 	stw	r4,8(r5)
    b194:	28c00015 	stw	r3,0(r5)
    b198:	28800315 	stw	r2,12(r5)
    b19c:	f800283a 	ret
    b1a0:	00800084 	movi	r2,2
    b1a4:	28800015 	stw	r2,0(r5)
    b1a8:	f800283a 	ret
    b1ac:	10000526 	beq	r2,zero,b1c4 <__unpack_f+0xb4>
    b1b0:	18c0042c 	andhi	r3,r3,16
    b1b4:	18000626 	beq	r3,zero,b1d0 <__unpack_f+0xc0>
    b1b8:	00c00044 	movi	r3,1
    b1bc:	28c00015 	stw	r3,0(r5)
    b1c0:	003ff506 	br	b198 <__unpack_f+0x88>
    b1c4:	00800104 	movi	r2,4
    b1c8:	28800015 	stw	r2,0(r5)
    b1cc:	f800283a 	ret
    b1d0:	28000015 	stw	zero,0(r5)
    b1d4:	003ff006 	br	b198 <__unpack_f+0x88>

0000b1d8 <__pack_d>:
    b1d8:	20800017 	ldw	r2,0(r4)
    b1dc:	defff804 	addi	sp,sp,-32
    b1e0:	dcc00315 	stw	r19,12(sp)
    b1e4:	dc800215 	stw	r18,8(sp)
    b1e8:	dfc00715 	stw	ra,28(sp)
    b1ec:	dd800615 	stw	r22,24(sp)
    b1f0:	dd400515 	stw	r21,20(sp)
    b1f4:	dd000415 	stw	r20,16(sp)
    b1f8:	dc400115 	stw	r17,4(sp)
    b1fc:	dc000015 	stw	r16,0(sp)
    b200:	04800044 	movi	r18,1
    b204:	24400317 	ldw	r17,12(r4)
    b208:	24000417 	ldw	r16,16(r4)
    b20c:	24c00117 	ldw	r19,4(r4)
    b210:	9080422e 	bgeu	r18,r2,b31c <__pack_d+0x144>
    b214:	00c00104 	movi	r3,4
    b218:	10c03c26 	beq	r2,r3,b30c <__pack_d+0x134>
    b21c:	00c00084 	movi	r3,2
    b220:	10c01926 	beq	r2,r3,b288 <__pack_d+0xb0>
    b224:	8c04b03a 	or	r2,r17,r16
    b228:	10001726 	beq	r2,zero,b288 <__pack_d+0xb0>
    b22c:	21000217 	ldw	r4,8(r4)
    b230:	00bf0084 	movi	r2,-1022
    b234:	20804016 	blt	r4,r2,b338 <__pack_d+0x160>
    b238:	0080ffc4 	movi	r2,1023
    b23c:	11003316 	blt	r2,r4,b30c <__pack_d+0x134>
    b240:	88803fcc 	andi	r2,r17,255
    b244:	00c02004 	movi	r3,128
    b248:	10c02926 	beq	r2,r3,b2f0 <__pack_d+0x118>
    b24c:	88801fc4 	addi	r2,r17,127
    b250:	1463803a 	cmpltu	r17,r2,r17
    b254:	8c21883a 	add	r16,r17,r16
    b258:	1023883a 	mov	r17,r2
    b25c:	00880034 	movhi	r2,8192
    b260:	10bfffc4 	addi	r2,r2,-1
    b264:	14001c36 	bltu	r2,r16,b2d8 <__pack_d+0x100>
    b268:	2100ffc4 	addi	r4,r4,1023
    b26c:	8006963a 	slli	r3,r16,24
    b270:	8804d23a 	srli	r2,r17,8
    b274:	8020913a 	slli	r16,r16,4
    b278:	2101ffcc 	andi	r4,r4,2047
    b27c:	1884b03a 	or	r2,r3,r2
    b280:	8020d33a 	srli	r16,r16,12
    b284:	00000306 	br	b294 <__pack_d+0xbc>
    b288:	0009883a 	mov	r4,zero
    b28c:	0005883a 	mov	r2,zero
    b290:	0021883a 	mov	r16,zero
    b294:	2008953a 	slli	r4,r4,20
    b298:	982697fa 	slli	r19,r19,31
    b29c:	00c00434 	movhi	r3,16
    b2a0:	18ffffc4 	addi	r3,r3,-1
    b2a4:	80e0703a 	and	r16,r16,r3
    b2a8:	8106b03a 	or	r3,r16,r4
    b2ac:	1cc6b03a 	or	r3,r3,r19
    b2b0:	dfc00717 	ldw	ra,28(sp)
    b2b4:	dd800617 	ldw	r22,24(sp)
    b2b8:	dd400517 	ldw	r21,20(sp)
    b2bc:	dd000417 	ldw	r20,16(sp)
    b2c0:	dcc00317 	ldw	r19,12(sp)
    b2c4:	dc800217 	ldw	r18,8(sp)
    b2c8:	dc400117 	ldw	r17,4(sp)
    b2cc:	dc000017 	ldw	r16,0(sp)
    b2d0:	dec00804 	addi	sp,sp,32
    b2d4:	f800283a 	ret
    b2d8:	800697fa 	slli	r3,r16,31
    b2dc:	8804d07a 	srli	r2,r17,1
    b2e0:	21010004 	addi	r4,r4,1024
    b2e4:	8020d07a 	srli	r16,r16,1
    b2e8:	18a2b03a 	or	r17,r3,r2
    b2ec:	003fdf06 	br	b26c <__pack_d+0x94>
    b2f0:	88c0400c 	andi	r3,r17,256
    b2f4:	183fd926 	beq	r3,zero,b25c <__pack_d+0x84>
    b2f8:	8885883a 	add	r2,r17,r2
    b2fc:	1463803a 	cmpltu	r17,r2,r17
    b300:	8c21883a 	add	r16,r17,r16
    b304:	1023883a 	mov	r17,r2
    b308:	003fd406 	br	b25c <__pack_d+0x84>
    b30c:	0101ffc4 	movi	r4,2047
    b310:	0005883a 	mov	r2,zero
    b314:	0021883a 	mov	r16,zero
    b318:	003fde06 	br	b294 <__pack_d+0xbc>
    b31c:	84000234 	orhi	r16,r16,8
    b320:	00c00434 	movhi	r3,16
    b324:	18ffffc4 	addi	r3,r3,-1
    b328:	8805883a 	mov	r2,r17
    b32c:	80e0703a 	and	r16,r16,r3
    b330:	0101ffc4 	movi	r4,2047
    b334:	003fd706 	br	b294 <__pack_d+0xbc>
    b338:	1129c83a 	sub	r20,r2,r4
    b33c:	00800e04 	movi	r2,56
    b340:	15002716 	blt	r2,r20,b3e0 <__pack_d+0x208>
    b344:	800b883a 	mov	r5,r16
    b348:	a00d883a 	mov	r6,r20
    b34c:	8809883a 	mov	r4,r17
    b350:	000b5f80 	call	b5f8 <__lshrdi3>
    b354:	9009883a 	mov	r4,r18
    b358:	000b883a 	mov	r5,zero
    b35c:	a00d883a 	mov	r6,r20
    b360:	102d883a 	mov	r22,r2
    b364:	182b883a 	mov	r21,r3
    b368:	000b63c0 	call	b63c <__ashldi3>
    b36c:	1009003a 	cmpeq	r4,r2,zero
    b370:	1907c83a 	sub	r3,r3,r4
    b374:	10bfffc4 	addi	r2,r2,-1
    b378:	1c20703a 	and	r16,r3,r16
    b37c:	1444703a 	and	r2,r2,r17
    b380:	1404b03a 	or	r2,r2,r16
    b384:	1004c03a 	cmpne	r2,r2,zero
    b388:	1584b03a 	or	r2,r2,r22
    b38c:	11003fcc 	andi	r4,r2,255
    b390:	01402004 	movi	r5,128
    b394:	a807883a 	mov	r3,r21
    b398:	2140131e 	bne	r4,r5,b3e8 <__pack_d+0x210>
    b39c:	1140400c 	andi	r5,r2,256
    b3a0:	28000426 	beq	r5,zero,b3b4 <__pack_d+0x1dc>
    b3a4:	1109883a 	add	r4,r2,r4
    b3a8:	2085803a 	cmpltu	r2,r4,r2
    b3ac:	1547883a 	add	r3,r2,r21
    b3b0:	2005883a 	mov	r2,r4
    b3b4:	1808963a 	slli	r4,r3,24
    b3b8:	1004d23a 	srli	r2,r2,8
    b3bc:	1820913a 	slli	r16,r3,4
    b3c0:	01440034 	movhi	r5,4096
    b3c4:	297fffc4 	addi	r5,r5,-1
    b3c8:	2084b03a 	or	r2,r4,r2
    b3cc:	8020d33a 	srli	r16,r16,12
    b3d0:	01000044 	movi	r4,1
    b3d4:	28ffaf36 	bltu	r5,r3,b294 <__pack_d+0xbc>
    b3d8:	0009883a 	mov	r4,zero
    b3dc:	003fad06 	br	b294 <__pack_d+0xbc>
    b3e0:	0005883a 	mov	r2,zero
    b3e4:	0007883a 	mov	r3,zero
    b3e8:	11001fc4 	addi	r4,r2,127
    b3ec:	2085803a 	cmpltu	r2,r4,r2
    b3f0:	10c7883a 	add	r3,r2,r3
    b3f4:	2005883a 	mov	r2,r4
    b3f8:	003fee06 	br	b3b4 <__pack_d+0x1dc>

0000b3fc <__unpack_d>:
    b3fc:	21800117 	ldw	r6,4(r4)
    b400:	20c00017 	ldw	r3,0(r4)
    b404:	3004d7fa 	srli	r2,r6,31
    b408:	3008d53a 	srli	r4,r6,20
    b40c:	28800115 	stw	r2,4(r5)
    b410:	2101ffcc 	andi	r4,r4,2047
    b414:	00800434 	movhi	r2,16
    b418:	10bfffc4 	addi	r2,r2,-1
    b41c:	3084703a 	and	r2,r6,r2
    b420:	20001a1e 	bne	r4,zero,b48c <__unpack_d+0x90>
    b424:	1888b03a 	or	r4,r3,r2
    b428:	20002626 	beq	r4,zero,b4c4 <__unpack_d+0xc8>
    b42c:	1808d63a 	srli	r4,r3,24
    b430:	1004923a 	slli	r2,r2,8
    b434:	01bf0084 	movi	r6,-1022
    b438:	29800215 	stw	r6,8(r5)
    b43c:	2084b03a 	or	r2,r4,r2
    b440:	010000c4 	movi	r4,3
    b444:	29000015 	stw	r4,0(r5)
    b448:	02040034 	movhi	r8,4096
    b44c:	423fffc4 	addi	r8,r8,-1
    b450:	1806923a 	slli	r3,r3,8
    b454:	40801836 	bltu	r8,r2,b4b8 <__unpack_d+0xbc>
    b458:	013f0044 	movi	r4,-1023
    b45c:	18cd883a 	add	r6,r3,r3
    b460:	30c7803a 	cmpltu	r3,r6,r3
    b464:	1085883a 	add	r2,r2,r2
    b468:	1885883a 	add	r2,r3,r2
    b46c:	200f883a 	mov	r7,r4
    b470:	3007883a 	mov	r3,r6
    b474:	213fffc4 	addi	r4,r4,-1
    b478:	40bff82e 	bgeu	r8,r2,b45c <__unpack_d+0x60>
    b47c:	29c00215 	stw	r7,8(r5)
    b480:	28c00315 	stw	r3,12(r5)
    b484:	28800415 	stw	r2,16(r5)
    b488:	f800283a 	ret
    b48c:	01c1ffc4 	movi	r7,2047
    b490:	21c00f26 	beq	r4,r7,b4d0 <__unpack_d+0xd4>
    b494:	180cd63a 	srli	r6,r3,24
    b498:	1004923a 	slli	r2,r2,8
    b49c:	213f0044 	addi	r4,r4,-1023
    b4a0:	1806923a 	slli	r3,r3,8
    b4a4:	3084b03a 	or	r2,r6,r2
    b4a8:	29000215 	stw	r4,8(r5)
    b4ac:	010000c4 	movi	r4,3
    b4b0:	10840034 	orhi	r2,r2,4096
    b4b4:	29000015 	stw	r4,0(r5)
    b4b8:	28c00315 	stw	r3,12(r5)
    b4bc:	28800415 	stw	r2,16(r5)
    b4c0:	f800283a 	ret
    b4c4:	00800084 	movi	r2,2
    b4c8:	28800015 	stw	r2,0(r5)
    b4cc:	f800283a 	ret
    b4d0:	1888b03a 	or	r4,r3,r2
    b4d4:	20000526 	beq	r4,zero,b4ec <__unpack_d+0xf0>
    b4d8:	3180022c 	andhi	r6,r6,8
    b4dc:	30000626 	beq	r6,zero,b4f8 <__unpack_d+0xfc>
    b4e0:	01000044 	movi	r4,1
    b4e4:	29000015 	stw	r4,0(r5)
    b4e8:	003ff306 	br	b4b8 <__unpack_d+0xbc>
    b4ec:	00800104 	movi	r2,4
    b4f0:	28800015 	stw	r2,0(r5)
    b4f4:	f800283a 	ret
    b4f8:	28000015 	stw	zero,0(r5)
    b4fc:	003fee06 	br	b4b8 <__unpack_d+0xbc>

0000b500 <__fpcmp_parts_d>:
    b500:	20c00017 	ldw	r3,0(r4)
    b504:	00800044 	movi	r2,1
    b508:	10c0142e 	bgeu	r2,r3,b55c <__fpcmp_parts_d+0x5c>
    b50c:	29800017 	ldw	r6,0(r5)
    b510:	1180122e 	bgeu	r2,r6,b55c <__fpcmp_parts_d+0x5c>
    b514:	01c00104 	movi	r7,4
    b518:	19c02826 	beq	r3,r7,b5bc <__fpcmp_parts_d+0xbc>
    b51c:	31c00926 	beq	r6,r7,b544 <__fpcmp_parts_d+0x44>
    b520:	01c00084 	movi	r7,2
    b524:	19c00626 	beq	r3,r7,b540 <__fpcmp_parts_d+0x40>
    b528:	31c00a26 	beq	r6,r7,b554 <__fpcmp_parts_d+0x54>
    b52c:	20c00117 	ldw	r3,4(r4)
    b530:	29800117 	ldw	r6,4(r5)
    b534:	19800b26 	beq	r3,r6,b564 <__fpcmp_parts_d+0x64>
    b538:	1800041e 	bne	r3,zero,b54c <__fpcmp_parts_d+0x4c>
    b53c:	f800283a 	ret
    b540:	30c01a26 	beq	r6,r3,b5ac <__fpcmp_parts_d+0xac>
    b544:	28800117 	ldw	r2,4(r5)
    b548:	1000041e 	bne	r2,zero,b55c <__fpcmp_parts_d+0x5c>
    b54c:	00bfffc4 	movi	r2,-1
    b550:	f800283a 	ret
    b554:	20800117 	ldw	r2,4(r4)
    b558:	103ffc1e 	bne	r2,zero,b54c <__fpcmp_parts_d+0x4c>
    b55c:	00800044 	movi	r2,1
    b560:	f800283a 	ret
    b564:	21c00217 	ldw	r7,8(r4)
    b568:	29800217 	ldw	r6,8(r5)
    b56c:	31c0020e 	bge	r6,r7,b578 <__fpcmp_parts_d+0x78>
    b570:	183ff61e 	bne	r3,zero,b54c <__fpcmp_parts_d+0x4c>
    b574:	f800283a 	ret
    b578:	39800a16 	blt	r7,r6,b5a4 <__fpcmp_parts_d+0xa4>
    b57c:	20800417 	ldw	r2,16(r4)
    b580:	29800417 	ldw	r6,16(r5)
    b584:	21c00317 	ldw	r7,12(r4)
    b588:	29000317 	ldw	r4,12(r5)
    b58c:	30800936 	bltu	r6,r2,b5b4 <__fpcmp_parts_d+0xb4>
    b590:	1180011e 	bne	r2,r6,b598 <__fpcmp_parts_d+0x98>
    b594:	21c00736 	bltu	r4,r7,b5b4 <__fpcmp_parts_d+0xb4>
    b598:	11800236 	bltu	r2,r6,b5a4 <__fpcmp_parts_d+0xa4>
    b59c:	3080031e 	bne	r6,r2,b5ac <__fpcmp_parts_d+0xac>
    b5a0:	3900022e 	bgeu	r7,r4,b5ac <__fpcmp_parts_d+0xac>
    b5a4:	183fe926 	beq	r3,zero,b54c <__fpcmp_parts_d+0x4c>
    b5a8:	003fec06 	br	b55c <__fpcmp_parts_d+0x5c>
    b5ac:	0005883a 	mov	r2,zero
    b5b0:	f800283a 	ret
    b5b4:	183fe926 	beq	r3,zero,b55c <__fpcmp_parts_d+0x5c>
    b5b8:	003fe406 	br	b54c <__fpcmp_parts_d+0x4c>
    b5bc:	30ffe51e 	bne	r6,r3,b554 <__fpcmp_parts_d+0x54>
    b5c0:	28c00117 	ldw	r3,4(r5)
    b5c4:	20800117 	ldw	r2,4(r4)
    b5c8:	1885c83a 	sub	r2,r3,r2
    b5cc:	f800283a 	ret

0000b5d0 <__mulsi3>:
    b5d0:	0005883a 	mov	r2,zero
    b5d4:	20000726 	beq	r4,zero,b5f4 <__mulsi3+0x24>
    b5d8:	20c0004c 	andi	r3,r4,1
    b5dc:	2008d07a 	srli	r4,r4,1
    b5e0:	18000126 	beq	r3,zero,b5e8 <__mulsi3+0x18>
    b5e4:	1145883a 	add	r2,r2,r5
    b5e8:	294b883a 	add	r5,r5,r5
    b5ec:	203ffa1e 	bne	r4,zero,b5d8 <__mulsi3+0x8>
    b5f0:	f800283a 	ret
    b5f4:	f800283a 	ret

0000b5f8 <__lshrdi3>:
    b5f8:	2005883a 	mov	r2,r4
    b5fc:	2807883a 	mov	r3,r5
    b600:	30000826 	beq	r6,zero,b624 <__lshrdi3+0x2c>
    b604:	01000804 	movi	r4,32
    b608:	2189c83a 	sub	r4,r4,r6
    b60c:	0100060e 	bge	zero,r4,b628 <__lshrdi3+0x30>
    b610:	1184d83a 	srl	r2,r2,r6
    b614:	2908983a 	sll	r4,r5,r4
    b618:	298cd83a 	srl	r6,r5,r6
    b61c:	2084b03a 	or	r2,r4,r2
    b620:	3007883a 	mov	r3,r6
    b624:	f800283a 	ret
    b628:	0105c83a 	sub	r2,zero,r4
    b62c:	000d883a 	mov	r6,zero
    b630:	2884d83a 	srl	r2,r5,r2
    b634:	3007883a 	mov	r3,r6
    b638:	003ffa06 	br	b624 <__lshrdi3+0x2c>

0000b63c <__ashldi3>:
    b63c:	2005883a 	mov	r2,r4
    b640:	2807883a 	mov	r3,r5
    b644:	30000826 	beq	r6,zero,b668 <__ashldi3+0x2c>
    b648:	01000804 	movi	r4,32
    b64c:	2189c83a 	sub	r4,r4,r6
    b650:	0100060e 	bge	zero,r4,b66c <__ashldi3+0x30>
    b654:	1108d83a 	srl	r4,r2,r4
    b658:	2986983a 	sll	r3,r5,r6
    b65c:	118c983a 	sll	r6,r2,r6
    b660:	20c6b03a 	or	r3,r4,r3
    b664:	3005883a 	mov	r2,r6
    b668:	f800283a 	ret
    b66c:	0107c83a 	sub	r3,zero,r4
    b670:	000d883a 	mov	r6,zero
    b674:	10c6983a 	sll	r3,r2,r3
    b678:	3005883a 	mov	r2,r6
    b67c:	003ffa06 	br	b668 <__ashldi3+0x2c>

0000b680 <memset>:
    b680:	2005883a 	mov	r2,r4
    b684:	30000526 	beq	r6,zero,b69c <memset+0x1c>
    b688:	218d883a 	add	r6,r4,r6
    b68c:	2007883a 	mov	r3,r4
    b690:	19400005 	stb	r5,0(r3)
    b694:	18c00044 	addi	r3,r3,1
    b698:	19bffd1e 	bne	r3,r6,b690 <memset+0x10>
    b69c:	f800283a 	ret

0000b6a0 <_printf_r>:
    b6a0:	defffd04 	addi	sp,sp,-12
    b6a4:	dfc00015 	stw	ra,0(sp)
    b6a8:	d9800115 	stw	r6,4(sp)
    b6ac:	d9c00215 	stw	r7,8(sp)
    b6b0:	20800217 	ldw	r2,8(r4)
    b6b4:	00c00074 	movhi	r3,1
    b6b8:	18efcf04 	addi	r3,r3,-16580
    b6bc:	280d883a 	mov	r6,r5
    b6c0:	10c00115 	stw	r3,4(r2)
    b6c4:	100b883a 	mov	r5,r2
    b6c8:	d9c00104 	addi	r7,sp,4
    b6cc:	000b7e40 	call	b7e4 <___vfprintf_internal_r>
    b6d0:	dfc00017 	ldw	ra,0(sp)
    b6d4:	dec00304 	addi	sp,sp,12
    b6d8:	f800283a 	ret

0000b6dc <printf>:
    b6dc:	defffc04 	addi	sp,sp,-16
    b6e0:	dfc00015 	stw	ra,0(sp)
    b6e4:	d9400115 	stw	r5,4(sp)
    b6e8:	d9800215 	stw	r6,8(sp)
    b6ec:	d9c00315 	stw	r7,12(sp)
    b6f0:	00800074 	movhi	r2,1
    b6f4:	10b84604 	addi	r2,r2,-7912
    b6f8:	10800017 	ldw	r2,0(r2)
    b6fc:	00c00074 	movhi	r3,1
    b700:	18efcf04 	addi	r3,r3,-16580
    b704:	200b883a 	mov	r5,r4
    b708:	10800217 	ldw	r2,8(r2)
    b70c:	d9800104 	addi	r6,sp,4
    b710:	10c00115 	stw	r3,4(r2)
    b714:	1009883a 	mov	r4,r2
    b718:	000bf180 	call	bf18 <__vfprintf_internal>
    b71c:	dfc00017 	ldw	ra,0(sp)
    b720:	dec00404 	addi	sp,sp,16
    b724:	f800283a 	ret

0000b728 <_puts_r>:
    b728:	defffd04 	addi	sp,sp,-12
    b72c:	dc000015 	stw	r16,0(sp)
    b730:	2021883a 	mov	r16,r4
    b734:	2809883a 	mov	r4,r5
    b738:	dfc00215 	stw	ra,8(sp)
    b73c:	dc400115 	stw	r17,4(sp)
    b740:	2823883a 	mov	r17,r5
    b744:	000b7bc0 	call	b7bc <strlen>
    b748:	81400217 	ldw	r5,8(r16)
    b74c:	00c00074 	movhi	r3,1
    b750:	18efcf04 	addi	r3,r3,-16580
    b754:	880d883a 	mov	r6,r17
    b758:	8009883a 	mov	r4,r16
    b75c:	28c00115 	stw	r3,4(r5)
    b760:	100f883a 	mov	r7,r2
    b764:	183ee83a 	callr	r3
    b768:	047fffc4 	movi	r17,-1
    b76c:	14400926 	beq	r2,r17,b794 <_puts_r+0x6c>
    b770:	81400217 	ldw	r5,8(r16)
    b774:	8009883a 	mov	r4,r16
    b778:	01800074 	movhi	r6,1
    b77c:	31b77004 	addi	r6,r6,-8768
    b780:	28800117 	ldw	r2,4(r5)
    b784:	01c00044 	movi	r7,1
    b788:	103ee83a 	callr	r2
    b78c:	14400126 	beq	r2,r17,b794 <_puts_r+0x6c>
    b790:	0005883a 	mov	r2,zero
    b794:	dfc00217 	ldw	ra,8(sp)
    b798:	dc400117 	ldw	r17,4(sp)
    b79c:	dc000017 	ldw	r16,0(sp)
    b7a0:	dec00304 	addi	sp,sp,12
    b7a4:	f800283a 	ret

0000b7a8 <puts>:
    b7a8:	00800074 	movhi	r2,1
    b7ac:	10b84604 	addi	r2,r2,-7912
    b7b0:	200b883a 	mov	r5,r4
    b7b4:	11000017 	ldw	r4,0(r2)
    b7b8:	000b7281 	jmpi	b728 <_puts_r>

0000b7bc <strlen>:
    b7bc:	20800007 	ldb	r2,0(r4)
    b7c0:	10000626 	beq	r2,zero,b7dc <strlen+0x20>
    b7c4:	2005883a 	mov	r2,r4
    b7c8:	10800044 	addi	r2,r2,1
    b7cc:	10c00007 	ldb	r3,0(r2)
    b7d0:	183ffd1e 	bne	r3,zero,b7c8 <strlen+0xc>
    b7d4:	1105c83a 	sub	r2,r2,r4
    b7d8:	f800283a 	ret
    b7dc:	0005883a 	mov	r2,zero
    b7e0:	f800283a 	ret

0000b7e4 <___vfprintf_internal_r>:
    b7e4:	deffe004 	addi	sp,sp,-128
    b7e8:	d8c00804 	addi	r3,sp,32
    b7ec:	ddc01d15 	stw	r23,116(sp)
    b7f0:	dd401b15 	stw	r21,108(sp)
    b7f4:	dd001a15 	stw	r20,104(sp)
    b7f8:	dcc01915 	stw	r19,100(sp)
    b7fc:	dc801815 	stw	r18,96(sp)
    b800:	dc001615 	stw	r16,88(sp)
    b804:	dfc01f15 	stw	ra,124(sp)
    b808:	df001e15 	stw	fp,120(sp)
    b80c:	dd801c15 	stw	r22,112(sp)
    b810:	dc401715 	stw	r17,92(sp)
    b814:	d9000f15 	stw	r4,60(sp)
    b818:	d9c00e15 	stw	r7,56(sp)
    b81c:	3021883a 	mov	r16,r6
    b820:	0025883a 	mov	r18,zero
    b824:	d8001415 	stw	zero,80(sp)
    b828:	d8000d15 	stw	zero,52(sp)
    b82c:	0029883a 	mov	r20,zero
    b830:	d8000b15 	stw	zero,44(sp)
    b834:	d8000c15 	stw	zero,48(sp)
    b838:	d8001315 	stw	zero,76(sp)
    b83c:	d8001015 	stw	zero,64(sp)
    b840:	002b883a 	mov	r21,zero
    b844:	04c00044 	movi	r19,1
    b848:	d8c00a15 	stw	r3,40(sp)
    b84c:	282f883a 	mov	r23,r5
    b850:	80c00003 	ldbu	r3,0(r16)
    b854:	84000044 	addi	r16,r16,1
    b858:	18803fcc 	andi	r2,r3,255
    b85c:	1080201c 	xori	r2,r2,128
    b860:	10bfe004 	addi	r2,r2,-128
    b864:	10001426 	beq	r2,zero,b8b8 <___vfprintf_internal_r+0xd4>
    b868:	acc03026 	beq	r21,r19,b92c <___vfprintf_internal_r+0x148>
    b86c:	9d401f16 	blt	r19,r21,b8ec <___vfprintf_internal_r+0x108>
    b870:	a83ff71e 	bne	r21,zero,b850 <___vfprintf_internal_r+0x6c>
    b874:	01000944 	movi	r4,37
    b878:	1100d926 	beq	r2,r4,bbe0 <___vfprintf_internal_r+0x3fc>
    b87c:	b8800117 	ldw	r2,4(r23)
    b880:	d9000f17 	ldw	r4,60(sp)
    b884:	d8c00905 	stb	r3,36(sp)
    b888:	b80b883a 	mov	r5,r23
    b88c:	d9800904 	addi	r6,sp,36
    b890:	01c00044 	movi	r7,1
    b894:	103ee83a 	callr	r2
    b898:	1000a31e 	bne	r2,zero,bb28 <___vfprintf_internal_r+0x344>
    b89c:	80c00003 	ldbu	r3,0(r16)
    b8a0:	94800044 	addi	r18,r18,1
    b8a4:	84000044 	addi	r16,r16,1
    b8a8:	18803fcc 	andi	r2,r3,255
    b8ac:	1080201c 	xori	r2,r2,128
    b8b0:	10bfe004 	addi	r2,r2,-128
    b8b4:	103fec1e 	bne	r2,zero,b868 <___vfprintf_internal_r+0x84>
    b8b8:	9005883a 	mov	r2,r18
    b8bc:	dfc01f17 	ldw	ra,124(sp)
    b8c0:	df001e17 	ldw	fp,120(sp)
    b8c4:	ddc01d17 	ldw	r23,116(sp)
    b8c8:	dd801c17 	ldw	r22,112(sp)
    b8cc:	dd401b17 	ldw	r21,108(sp)
    b8d0:	dd001a17 	ldw	r20,104(sp)
    b8d4:	dcc01917 	ldw	r19,100(sp)
    b8d8:	dc801817 	ldw	r18,96(sp)
    b8dc:	dc401717 	ldw	r17,92(sp)
    b8e0:	dc001617 	ldw	r16,88(sp)
    b8e4:	dec02004 	addi	sp,sp,128
    b8e8:	f800283a 	ret
    b8ec:	01000084 	movi	r4,2
    b8f0:	a9001226 	beq	r21,r4,b93c <___vfprintf_internal_r+0x158>
    b8f4:	010000c4 	movi	r4,3
    b8f8:	a93fd51e 	bne	r21,r4,b850 <___vfprintf_internal_r+0x6c>
    b8fc:	1c7ff404 	addi	r17,r3,-48
    b900:	8c403fcc 	andi	r17,r17,255
    b904:	01000244 	movi	r4,9
    b908:	24401b36 	bltu	r4,r17,b978 <___vfprintf_internal_r+0x194>
    b90c:	d9000b17 	ldw	r4,44(sp)
    b910:	00bfffc4 	movi	r2,-1
    b914:	2080ea26 	beq	r4,r2,bcc0 <___vfprintf_internal_r+0x4dc>
    b918:	01400284 	movi	r5,10
    b91c:	000b5d00 	call	b5d0 <__mulsi3>
    b920:	88a3883a 	add	r17,r17,r2
    b924:	dc400b15 	stw	r17,44(sp)
    b928:	003fc906 	br	b850 <___vfprintf_internal_r+0x6c>
    b92c:	01000c04 	movi	r4,48
    b930:	1100de26 	beq	r2,r4,bcac <___vfprintf_internal_r+0x4c8>
    b934:	01000944 	movi	r4,37
    b938:	1100fd26 	beq	r2,r4,bd30 <___vfprintf_internal_r+0x54c>
    b93c:	1c7ff404 	addi	r17,r3,-48
    b940:	8c403fcc 	andi	r17,r17,255
    b944:	01000244 	movi	r4,9
    b948:	24400936 	bltu	r4,r17,b970 <___vfprintf_internal_r+0x18c>
    b94c:	d9000c17 	ldw	r4,48(sp)
    b950:	00bfffc4 	movi	r2,-1
    b954:	2080d826 	beq	r4,r2,bcb8 <___vfprintf_internal_r+0x4d4>
    b958:	01400284 	movi	r5,10
    b95c:	000b5d00 	call	b5d0 <__mulsi3>
    b960:	88a3883a 	add	r17,r17,r2
    b964:	dc400c15 	stw	r17,48(sp)
    b968:	05400084 	movi	r21,2
    b96c:	003fb806 	br	b850 <___vfprintf_internal_r+0x6c>
    b970:	01000b84 	movi	r4,46
    b974:	1100a726 	beq	r2,r4,bc14 <___vfprintf_internal_r+0x430>
    b978:	01401b04 	movi	r5,108
    b97c:	1140a326 	beq	r2,r5,bc0c <___vfprintf_internal_r+0x428>
    b980:	d9000b17 	ldw	r4,44(sp)
    b984:	00bfffc4 	movi	r2,-1
    b988:	2080e626 	beq	r4,r2,bd24 <___vfprintf_internal_r+0x540>
    b98c:	d8001015 	stw	zero,64(sp)
    b990:	18ffea04 	addi	r3,r3,-88
    b994:	18c03fcc 	andi	r3,r3,255
    b998:	00800804 	movi	r2,32
    b99c:	10c0022e 	bgeu	r2,r3,b9a8 <___vfprintf_internal_r+0x1c4>
    b9a0:	002b883a 	mov	r21,zero
    b9a4:	003faa06 	br	b850 <___vfprintf_internal_r+0x6c>
    b9a8:	18c7883a 	add	r3,r3,r3
    b9ac:	18c7883a 	add	r3,r3,r3
    b9b0:	01400074 	movhi	r5,1
    b9b4:	296e7104 	addi	r5,r5,-17980
    b9b8:	1947883a 	add	r3,r3,r5
    b9bc:	18800017 	ldw	r2,0(r3)
    b9c0:	1000683a 	jmp	r2
    b9c4:	0000bd5c 	xori	zero,zero,757
    b9c8:	0000b9a0 	cmpeqi	zero,zero,742
    b9cc:	0000b9a0 	cmpeqi	zero,zero,742
    b9d0:	0000b9a0 	cmpeqi	zero,zero,742
    b9d4:	0000b9a0 	cmpeqi	zero,zero,742
    b9d8:	0000b9a0 	cmpeqi	zero,zero,742
    b9dc:	0000b9a0 	cmpeqi	zero,zero,742
    b9e0:	0000b9a0 	cmpeqi	zero,zero,742
    b9e4:	0000b9a0 	cmpeqi	zero,zero,742
    b9e8:	0000b9a0 	cmpeqi	zero,zero,742
    b9ec:	0000b9a0 	cmpeqi	zero,zero,742
    b9f0:	0000bd6c 	andhi	zero,zero,757
    b9f4:	0000ba48 	cmpgei	zero,zero,745
    b9f8:	0000b9a0 	cmpeqi	zero,zero,742
    b9fc:	0000b9a0 	cmpeqi	zero,zero,742
    ba00:	0000b9a0 	cmpeqi	zero,zero,742
    ba04:	0000b9a0 	cmpeqi	zero,zero,742
    ba08:	0000ba48 	cmpgei	zero,zero,745
    ba0c:	0000b9a0 	cmpeqi	zero,zero,742
    ba10:	0000b9a0 	cmpeqi	zero,zero,742
    ba14:	0000b9a0 	cmpeqi	zero,zero,742
    ba18:	0000b9a0 	cmpeqi	zero,zero,742
    ba1c:	0000b9a0 	cmpeqi	zero,zero,742
    ba20:	0000bb30 	cmpltui	zero,zero,748
    ba24:	0000b9a0 	cmpeqi	zero,zero,742
    ba28:	0000b9a0 	cmpeqi	zero,zero,742
    ba2c:	0000b9a0 	cmpeqi	zero,zero,742
    ba30:	0000bdb8 	rdprs	zero,zero,758
    ba34:	0000b9a0 	cmpeqi	zero,zero,742
    ba38:	0000bb34 	movhi	zero,748
    ba3c:	0000b9a0 	cmpeqi	zero,zero,742
    ba40:	0000b9a0 	cmpeqi	zero,zero,742
    ba44:	0000bd64 	muli	zero,zero,757
    ba48:	d8c00d17 	ldw	r3,52(sp)
    ba4c:	18003926 	beq	r3,zero,bb34 <___vfprintf_internal_r+0x350>
    ba50:	d9000e17 	ldw	r4,56(sp)
    ba54:	00c00044 	movi	r3,1
    ba58:	25400017 	ldw	r21,0(r4)
    ba5c:	21000104 	addi	r4,r4,4
    ba60:	d9000e15 	stw	r4,56(sp)
    ba64:	d8c00d15 	stw	r3,52(sp)
    ba68:	a8012116 	blt	r21,zero,bef0 <___vfprintf_internal_r+0x70c>
    ba6c:	d8001215 	stw	zero,72(sp)
    ba70:	d823883a 	mov	r17,sp
    ba74:	a800371e 	bne	r21,zero,bb54 <___vfprintf_internal_r+0x370>
    ba78:	d9400b17 	ldw	r5,44(sp)
    ba7c:	d809883a 	mov	r4,sp
    ba80:	01400b0e 	bge	zero,r5,bab0 <___vfprintf_internal_r+0x2cc>
    ba84:	d8800b17 	ldw	r2,44(sp)
    ba88:	d823883a 	mov	r17,sp
    ba8c:	00c00c04 	movi	r3,48
    ba90:	00000206 	br	ba9c <___vfprintf_internal_r+0x2b8>
    ba94:	d9400a17 	ldw	r5,40(sp)
    ba98:	89400426 	beq	r17,r5,baac <___vfprintf_internal_r+0x2c8>
    ba9c:	88c00005 	stb	r3,0(r17)
    baa0:	10bfffc4 	addi	r2,r2,-1
    baa4:	8c400044 	addi	r17,r17,1
    baa8:	103ffa1e 	bne	r2,zero,ba94 <___vfprintf_internal_r+0x2b0>
    baac:	892bc83a 	sub	r21,r17,r4
    bab0:	d8c01217 	ldw	r3,72(sp)
    bab4:	d9000c17 	ldw	r4,48(sp)
    bab8:	a8c5883a 	add	r2,r21,r3
    babc:	d8c01017 	ldw	r3,64(sp)
    bac0:	2085c83a 	sub	r2,r4,r2
    bac4:	d8801115 	stw	r2,68(sp)
    bac8:	18007f26 	beq	r3,zero,bcc8 <___vfprintf_internal_r+0x4e4>
    bacc:	d8c01217 	ldw	r3,72(sp)
    bad0:	1800fa1e 	bne	r3,zero,bebc <___vfprintf_internal_r+0x6d8>
    bad4:	d8c01117 	ldw	r3,68(sp)
    bad8:	00c0620e 	bge	zero,r3,bc64 <___vfprintf_internal_r+0x480>
    badc:	00800c04 	movi	r2,48
    bae0:	d88008c5 	stb	r2,35(sp)
    bae4:	b805883a 	mov	r2,r23
    bae8:	dc001215 	stw	r16,72(sp)
    baec:	882f883a 	mov	r23,r17
    baf0:	1f3fffc4 	addi	fp,r3,-1
    baf4:	05bfffc4 	movi	r22,-1
    baf8:	dc000f17 	ldw	r16,60(sp)
    bafc:	1023883a 	mov	r17,r2
    bb00:	00000206 	br	bb0c <___vfprintf_internal_r+0x328>
    bb04:	e73fffc4 	addi	fp,fp,-1
    bb08:	e580fc26 	beq	fp,r22,befc <___vfprintf_internal_r+0x718>
    bb0c:	88800117 	ldw	r2,4(r17)
    bb10:	8009883a 	mov	r4,r16
    bb14:	880b883a 	mov	r5,r17
    bb18:	d98008c4 	addi	r6,sp,35
    bb1c:	01c00044 	movi	r7,1
    bb20:	103ee83a 	callr	r2
    bb24:	103ff726 	beq	r2,zero,bb04 <___vfprintf_internal_r+0x320>
    bb28:	04bfffc4 	movi	r18,-1
    bb2c:	003f6206 	br	b8b8 <___vfprintf_internal_r+0xd4>
    bb30:	05000204 	movi	r20,8
    bb34:	d9400e17 	ldw	r5,56(sp)
    bb38:	2d400017 	ldw	r21,0(r5)
    bb3c:	29400104 	addi	r5,r5,4
    bb40:	d9400e15 	stw	r5,56(sp)
    bb44:	d8000d15 	stw	zero,52(sp)
    bb48:	d8001215 	stw	zero,72(sp)
    bb4c:	d823883a 	mov	r17,sp
    bb50:	a83fc926 	beq	r21,zero,ba78 <___vfprintf_internal_r+0x294>
    bb54:	05800244 	movi	r22,9
    bb58:	dc001115 	stw	r16,68(sp)
    bb5c:	df001417 	ldw	fp,80(sp)
    bb60:	00000506 	br	bb78 <___vfprintf_internal_r+0x394>
    bb64:	15400c04 	addi	r21,r2,48
    bb68:	8d400005 	stb	r21,0(r17)
    bb6c:	802b883a 	mov	r21,r16
    bb70:	8c400044 	addi	r17,r17,1
    bb74:	80000f26 	beq	r16,zero,bbb4 <___vfprintf_internal_r+0x3d0>
    bb78:	a809883a 	mov	r4,r21
    bb7c:	a00b883a 	mov	r5,r20
    bb80:	000c1a80 	call	c1a8 <__udivsi3>
    bb84:	a009883a 	mov	r4,r20
    bb88:	100b883a 	mov	r5,r2
    bb8c:	1021883a 	mov	r16,r2
    bb90:	000b5d00 	call	b5d0 <__mulsi3>
    bb94:	a885c83a 	sub	r2,r21,r2
    bb98:	b0bff20e 	bge	r22,r2,bb64 <___vfprintf_internal_r+0x380>
    bb9c:	e0000e26 	beq	fp,zero,bbd8 <___vfprintf_internal_r+0x3f4>
    bba0:	15400dc4 	addi	r21,r2,55
    bba4:	8d400005 	stb	r21,0(r17)
    bba8:	802b883a 	mov	r21,r16
    bbac:	8c400044 	addi	r17,r17,1
    bbb0:	803ff11e 	bne	r16,zero,bb78 <___vfprintf_internal_r+0x394>
    bbb4:	d9000b17 	ldw	r4,44(sp)
    bbb8:	8eebc83a 	sub	r21,r17,sp
    bbbc:	dc001117 	ldw	r16,68(sp)
    bbc0:	2545c83a 	sub	r2,r4,r21
    bbc4:	d809883a 	mov	r4,sp
    bbc8:	00bfb90e 	bge	zero,r2,bab0 <___vfprintf_internal_r+0x2cc>
    bbcc:	d8c00a17 	ldw	r3,40(sp)
    bbd0:	88ffae36 	bltu	r17,r3,ba8c <___vfprintf_internal_r+0x2a8>
    bbd4:	003fb606 	br	bab0 <___vfprintf_internal_r+0x2cc>
    bbd8:	154015c4 	addi	r21,r2,87
    bbdc:	003fe206 	br	bb68 <___vfprintf_internal_r+0x384>
    bbe0:	00c00044 	movi	r3,1
    bbe4:	013fffc4 	movi	r4,-1
    bbe8:	d8c00d15 	stw	r3,52(sp)
    bbec:	d9000b15 	stw	r4,44(sp)
    bbf0:	d8001415 	stw	zero,80(sp)
    bbf4:	05000284 	movi	r20,10
    bbf8:	d9000c15 	stw	r4,48(sp)
    bbfc:	d8001315 	stw	zero,76(sp)
    bc00:	d8001015 	stw	zero,64(sp)
    bc04:	182b883a 	mov	r21,r3
    bc08:	003f1106 	br	b850 <___vfprintf_internal_r+0x6c>
    bc0c:	00c00044 	movi	r3,1
    bc10:	d8c01315 	stw	r3,76(sp)
    bc14:	054000c4 	movi	r21,3
    bc18:	003f0d06 	br	b850 <___vfprintf_internal_r+0x6c>
    bc1c:	d8c01117 	ldw	r3,68(sp)
    bc20:	dc001517 	ldw	r16,84(sp)
    bc24:	8805883a 	mov	r2,r17
    bc28:	90e5883a 	add	r18,r18,r3
    bc2c:	b823883a 	mov	r17,r23
    bc30:	102f883a 	mov	r23,r2
    bc34:	d8c01217 	ldw	r3,72(sp)
    bc38:	18000a26 	beq	r3,zero,bc64 <___vfprintf_internal_r+0x480>
    bc3c:	b8800117 	ldw	r2,4(r23)
    bc40:	d9000f17 	ldw	r4,60(sp)
    bc44:	00c00b44 	movi	r3,45
    bc48:	d8c00905 	stb	r3,36(sp)
    bc4c:	b80b883a 	mov	r5,r23
    bc50:	d9800904 	addi	r6,sp,36
    bc54:	01c00044 	movi	r7,1
    bc58:	103ee83a 	callr	r2
    bc5c:	103fb21e 	bne	r2,zero,bb28 <___vfprintf_internal_r+0x344>
    bc60:	94800044 	addi	r18,r18,1
    bc64:	8d6dc83a 	sub	r22,r17,r21
    bc68:	057f4d0e 	bge	zero,r21,b9a0 <___vfprintf_internal_r+0x1bc>
    bc6c:	dd400f17 	ldw	r21,60(sp)
    bc70:	00000206 	br	bc7c <___vfprintf_internal_r+0x498>
    bc74:	94800044 	addi	r18,r18,1
    bc78:	8dbf4926 	beq	r17,r22,b9a0 <___vfprintf_internal_r+0x1bc>
    bc7c:	8c7fffc4 	addi	r17,r17,-1
    bc80:	88c00003 	ldbu	r3,0(r17)
    bc84:	b8800117 	ldw	r2,4(r23)
    bc88:	a809883a 	mov	r4,r21
    bc8c:	d8c00905 	stb	r3,36(sp)
    bc90:	b80b883a 	mov	r5,r23
    bc94:	d9800904 	addi	r6,sp,36
    bc98:	01c00044 	movi	r7,1
    bc9c:	103ee83a 	callr	r2
    bca0:	103ff426 	beq	r2,zero,bc74 <___vfprintf_internal_r+0x490>
    bca4:	04bfffc4 	movi	r18,-1
    bca8:	003f0306 	br	b8b8 <___vfprintf_internal_r+0xd4>
    bcac:	dd401015 	stw	r21,64(sp)
    bcb0:	05400084 	movi	r21,2
    bcb4:	003ee606 	br	b850 <___vfprintf_internal_r+0x6c>
    bcb8:	0005883a 	mov	r2,zero
    bcbc:	003f2806 	br	b960 <___vfprintf_internal_r+0x17c>
    bcc0:	0005883a 	mov	r2,zero
    bcc4:	003f1606 	br	b920 <___vfprintf_internal_r+0x13c>
    bcc8:	d8c01117 	ldw	r3,68(sp)
    bccc:	00ffd90e 	bge	zero,r3,bc34 <___vfprintf_internal_r+0x450>
    bcd0:	00800804 	movi	r2,32
    bcd4:	d8800885 	stb	r2,34(sp)
    bcd8:	b805883a 	mov	r2,r23
    bcdc:	dc001515 	stw	r16,84(sp)
    bce0:	882f883a 	mov	r23,r17
    bce4:	1f3fffc4 	addi	fp,r3,-1
    bce8:	05bfffc4 	movi	r22,-1
    bcec:	dc000f17 	ldw	r16,60(sp)
    bcf0:	1023883a 	mov	r17,r2
    bcf4:	00000206 	br	bd00 <___vfprintf_internal_r+0x51c>
    bcf8:	e73fffc4 	addi	fp,fp,-1
    bcfc:	e5bfc726 	beq	fp,r22,bc1c <___vfprintf_internal_r+0x438>
    bd00:	88800117 	ldw	r2,4(r17)
    bd04:	8009883a 	mov	r4,r16
    bd08:	880b883a 	mov	r5,r17
    bd0c:	d9800884 	addi	r6,sp,34
    bd10:	01c00044 	movi	r7,1
    bd14:	103ee83a 	callr	r2
    bd18:	103ff726 	beq	r2,zero,bcf8 <___vfprintf_internal_r+0x514>
    bd1c:	04bfffc4 	movi	r18,-1
    bd20:	003ee506 	br	b8b8 <___vfprintf_internal_r+0xd4>
    bd24:	01000044 	movi	r4,1
    bd28:	d9000b15 	stw	r4,44(sp)
    bd2c:	003f1806 	br	b990 <___vfprintf_internal_r+0x1ac>
    bd30:	b8c00117 	ldw	r3,4(r23)
    bd34:	d9000f17 	ldw	r4,60(sp)
    bd38:	d8800905 	stb	r2,36(sp)
    bd3c:	b80b883a 	mov	r5,r23
    bd40:	d9800904 	addi	r6,sp,36
    bd44:	a80f883a 	mov	r7,r21
    bd48:	183ee83a 	callr	r3
    bd4c:	103f761e 	bne	r2,zero,bb28 <___vfprintf_internal_r+0x344>
    bd50:	94800044 	addi	r18,r18,1
    bd54:	002b883a 	mov	r21,zero
    bd58:	003ebd06 	br	b850 <___vfprintf_internal_r+0x6c>
    bd5c:	00c00044 	movi	r3,1
    bd60:	d8c01415 	stw	r3,80(sp)
    bd64:	05000404 	movi	r20,16
    bd68:	003f7206 	br	bb34 <___vfprintf_internal_r+0x350>
    bd6c:	d9000c17 	ldw	r4,48(sp)
    bd70:	9900420e 	bge	r19,r4,be7c <___vfprintf_internal_r+0x698>
    bd74:	df000f17 	ldw	fp,60(sp)
    bd78:	25bfffc4 	addi	r22,r4,-1
    bd7c:	00800804 	movi	r2,32
    bd80:	d8800845 	stb	r2,33(sp)
    bd84:	b023883a 	mov	r17,r22
    bd88:	057fffc4 	movi	r21,-1
    bd8c:	8c7fffc4 	addi	r17,r17,-1
    bd90:	8d403926 	beq	r17,r21,be78 <___vfprintf_internal_r+0x694>
    bd94:	b8800117 	ldw	r2,4(r23)
    bd98:	e009883a 	mov	r4,fp
    bd9c:	b80b883a 	mov	r5,r23
    bda0:	d9800844 	addi	r6,sp,33
    bda4:	01c00044 	movi	r7,1
    bda8:	103ee83a 	callr	r2
    bdac:	103ff726 	beq	r2,zero,bd8c <___vfprintf_internal_r+0x5a8>
    bdb0:	04bfffc4 	movi	r18,-1
    bdb4:	003ec006 	br	b8b8 <___vfprintf_internal_r+0xd4>
    bdb8:	d9000e17 	ldw	r4,56(sp)
    bdbc:	d8c00e17 	ldw	r3,56(sp)
    bdc0:	21000017 	ldw	r4,0(r4)
    bdc4:	18c00104 	addi	r3,r3,4
    bdc8:	d8c00e15 	stw	r3,56(sp)
    bdcc:	d9001215 	stw	r4,72(sp)
    bdd0:	000b7bc0 	call	b7bc <strlen>
    bdd4:	d9000c17 	ldw	r4,48(sp)
    bdd8:	102d883a 	mov	r22,r2
    bddc:	20b9c83a 	sub	fp,r4,r2
    bde0:	07001b0e 	bge	zero,fp,be50 <___vfprintf_internal_r+0x66c>
    bde4:	00800804 	movi	r2,32
    bde8:	d8800805 	stb	r2,32(sp)
    bdec:	b805883a 	mov	r2,r23
    bdf0:	dc001115 	stw	r16,68(sp)
    bdf4:	b02f883a 	mov	r23,r22
    bdf8:	e47fffc4 	addi	r17,fp,-1
    bdfc:	902d883a 	mov	r22,r18
    be00:	057fffc4 	movi	r21,-1
    be04:	dc000f17 	ldw	r16,60(sp)
    be08:	1025883a 	mov	r18,r2
    be0c:	00000206 	br	be18 <___vfprintf_internal_r+0x634>
    be10:	8c7fffc4 	addi	r17,r17,-1
    be14:	8d400826 	beq	r17,r21,be38 <___vfprintf_internal_r+0x654>
    be18:	90800117 	ldw	r2,4(r18)
    be1c:	8009883a 	mov	r4,r16
    be20:	900b883a 	mov	r5,r18
    be24:	d9800804 	addi	r6,sp,32
    be28:	01c00044 	movi	r7,1
    be2c:	103ee83a 	callr	r2
    be30:	103ff726 	beq	r2,zero,be10 <___vfprintf_internal_r+0x62c>
    be34:	003f3c06 	br	bb28 <___vfprintf_internal_r+0x344>
    be38:	dc001117 	ldw	r16,68(sp)
    be3c:	9005883a 	mov	r2,r18
    be40:	b025883a 	mov	r18,r22
    be44:	9725883a 	add	r18,r18,fp
    be48:	b82d883a 	mov	r22,r23
    be4c:	102f883a 	mov	r23,r2
    be50:	b8800117 	ldw	r2,4(r23)
    be54:	d9000f17 	ldw	r4,60(sp)
    be58:	d9801217 	ldw	r6,72(sp)
    be5c:	b80b883a 	mov	r5,r23
    be60:	b00f883a 	mov	r7,r22
    be64:	103ee83a 	callr	r2
    be68:	103f2f1e 	bne	r2,zero,bb28 <___vfprintf_internal_r+0x344>
    be6c:	95a5883a 	add	r18,r18,r22
    be70:	002b883a 	mov	r21,zero
    be74:	003e7606 	br	b850 <___vfprintf_internal_r+0x6c>
    be78:	95a5883a 	add	r18,r18,r22
    be7c:	d9400e17 	ldw	r5,56(sp)
    be80:	b8800117 	ldw	r2,4(r23)
    be84:	d9000f17 	ldw	r4,60(sp)
    be88:	28c00017 	ldw	r3,0(r5)
    be8c:	d9800904 	addi	r6,sp,36
    be90:	b80b883a 	mov	r5,r23
    be94:	d8c00905 	stb	r3,36(sp)
    be98:	d8c00e17 	ldw	r3,56(sp)
    be9c:	01c00044 	movi	r7,1
    bea0:	1c400104 	addi	r17,r3,4
    bea4:	103ee83a 	callr	r2
    bea8:	103f1f1e 	bne	r2,zero,bb28 <___vfprintf_internal_r+0x344>
    beac:	94800044 	addi	r18,r18,1
    beb0:	dc400e15 	stw	r17,56(sp)
    beb4:	002b883a 	mov	r21,zero
    beb8:	003e6506 	br	b850 <___vfprintf_internal_r+0x6c>
    bebc:	b8800117 	ldw	r2,4(r23)
    bec0:	d9000f17 	ldw	r4,60(sp)
    bec4:	00c00b44 	movi	r3,45
    bec8:	d8c00905 	stb	r3,36(sp)
    becc:	b80b883a 	mov	r5,r23
    bed0:	d9800904 	addi	r6,sp,36
    bed4:	01c00044 	movi	r7,1
    bed8:	103ee83a 	callr	r2
    bedc:	103f121e 	bne	r2,zero,bb28 <___vfprintf_internal_r+0x344>
    bee0:	d8c01117 	ldw	r3,68(sp)
    bee4:	94800044 	addi	r18,r18,1
    bee8:	00fefc16 	blt	zero,r3,badc <___vfprintf_internal_r+0x2f8>
    beec:	003f5d06 	br	bc64 <___vfprintf_internal_r+0x480>
    bef0:	056bc83a 	sub	r21,zero,r21
    bef4:	d8c01215 	stw	r3,72(sp)
    bef8:	003f1406 	br	bb4c <___vfprintf_internal_r+0x368>
    befc:	d8c01117 	ldw	r3,68(sp)
    bf00:	8805883a 	mov	r2,r17
    bf04:	dc001217 	ldw	r16,72(sp)
    bf08:	b823883a 	mov	r17,r23
    bf0c:	90e5883a 	add	r18,r18,r3
    bf10:	102f883a 	mov	r23,r2
    bf14:	003f5306 	br	bc64 <___vfprintf_internal_r+0x480>

0000bf18 <__vfprintf_internal>:
    bf18:	00800074 	movhi	r2,1
    bf1c:	10b84604 	addi	r2,r2,-7912
    bf20:	2007883a 	mov	r3,r4
    bf24:	11000017 	ldw	r4,0(r2)
    bf28:	2805883a 	mov	r2,r5
    bf2c:	300f883a 	mov	r7,r6
    bf30:	180b883a 	mov	r5,r3
    bf34:	100d883a 	mov	r6,r2
    bf38:	000b7e41 	jmpi	b7e4 <___vfprintf_internal_r>

0000bf3c <__sfvwrite_small_dev>:
    bf3c:	2880000b 	ldhu	r2,0(r5)
    bf40:	defffa04 	addi	sp,sp,-24
    bf44:	dcc00315 	stw	r19,12(sp)
    bf48:	10c0020c 	andi	r3,r2,8
    bf4c:	18ffffcc 	andi	r3,r3,65535
    bf50:	18e0001c 	xori	r3,r3,32768
    bf54:	dc800215 	stw	r18,8(sp)
    bf58:	dc400115 	stw	r17,4(sp)
    bf5c:	dfc00515 	stw	ra,20(sp)
    bf60:	dd000415 	stw	r20,16(sp)
    bf64:	dc000015 	stw	r16,0(sp)
    bf68:	18e00004 	addi	r3,r3,-32768
    bf6c:	2825883a 	mov	r18,r5
    bf70:	2027883a 	mov	r19,r4
    bf74:	3023883a 	mov	r17,r6
    bf78:	18002626 	beq	r3,zero,c014 <__sfvwrite_small_dev+0xd8>
    bf7c:	2940008f 	ldh	r5,2(r5)
    bf80:	28001016 	blt	r5,zero,bfc4 <__sfvwrite_small_dev+0x88>
    bf84:	01c01a0e 	bge	zero,r7,bff0 <__sfvwrite_small_dev+0xb4>
    bf88:	3821883a 	mov	r16,r7
    bf8c:	05010004 	movi	r20,1024
    bf90:	00000306 	br	bfa0 <__sfvwrite_small_dev+0x64>
    bf94:	88a3883a 	add	r17,r17,r2
    bf98:	0400150e 	bge	zero,r16,bff0 <__sfvwrite_small_dev+0xb4>
    bf9c:	9140008f 	ldh	r5,2(r18)
    bfa0:	880d883a 	mov	r6,r17
    bfa4:	9809883a 	mov	r4,r19
    bfa8:	800f883a 	mov	r7,r16
    bfac:	a400010e 	bge	r20,r16,bfb4 <__sfvwrite_small_dev+0x78>
    bfb0:	01c10004 	movi	r7,1024
    bfb4:	000c01c0 	call	c01c <_write_r>
    bfb8:	80a1c83a 	sub	r16,r16,r2
    bfbc:	00bff516 	blt	zero,r2,bf94 <__sfvwrite_small_dev+0x58>
    bfc0:	9080000b 	ldhu	r2,0(r18)
    bfc4:	10801014 	ori	r2,r2,64
    bfc8:	9080000d 	sth	r2,0(r18)
    bfcc:	00bfffc4 	movi	r2,-1
    bfd0:	dfc00517 	ldw	ra,20(sp)
    bfd4:	dd000417 	ldw	r20,16(sp)
    bfd8:	dcc00317 	ldw	r19,12(sp)
    bfdc:	dc800217 	ldw	r18,8(sp)
    bfe0:	dc400117 	ldw	r17,4(sp)
    bfe4:	dc000017 	ldw	r16,0(sp)
    bfe8:	dec00604 	addi	sp,sp,24
    bfec:	f800283a 	ret
    bff0:	0005883a 	mov	r2,zero
    bff4:	dfc00517 	ldw	ra,20(sp)
    bff8:	dd000417 	ldw	r20,16(sp)
    bffc:	dcc00317 	ldw	r19,12(sp)
    c000:	dc800217 	ldw	r18,8(sp)
    c004:	dc400117 	ldw	r17,4(sp)
    c008:	dc000017 	ldw	r16,0(sp)
    c00c:	dec00604 	addi	sp,sp,24
    c010:	f800283a 	ret
    c014:	00bfffc4 	movi	r2,-1
    c018:	003fed06 	br	bfd0 <__sfvwrite_small_dev+0x94>

0000c01c <_write_r>:
    c01c:	defffd04 	addi	sp,sp,-12
    c020:	dc400115 	stw	r17,4(sp)
    c024:	dc000015 	stw	r16,0(sp)
    c028:	2023883a 	mov	r17,r4
    c02c:	04000074 	movhi	r16,1
    c030:	84392d04 	addi	r16,r16,-6988
    c034:	2809883a 	mov	r4,r5
    c038:	300b883a 	mov	r5,r6
    c03c:	380d883a 	mov	r6,r7
    c040:	dfc00215 	stw	ra,8(sp)
    c044:	80000015 	stw	zero,0(r16)
    c048:	000c35c0 	call	c35c <write>
    c04c:	00ffffc4 	movi	r3,-1
    c050:	10c00526 	beq	r2,r3,c068 <_write_r+0x4c>
    c054:	dfc00217 	ldw	ra,8(sp)
    c058:	dc400117 	ldw	r17,4(sp)
    c05c:	dc000017 	ldw	r16,0(sp)
    c060:	dec00304 	addi	sp,sp,12
    c064:	f800283a 	ret
    c068:	80c00017 	ldw	r3,0(r16)
    c06c:	183ff926 	beq	r3,zero,c054 <_write_r+0x38>
    c070:	88c00015 	stw	r3,0(r17)
    c074:	dfc00217 	ldw	ra,8(sp)
    c078:	dc400117 	ldw	r17,4(sp)
    c07c:	dc000017 	ldw	r16,0(sp)
    c080:	dec00304 	addi	sp,sp,12
    c084:	f800283a 	ret

0000c088 <udivmodsi4>:
    c088:	2005883a 	mov	r2,r4
    c08c:	2900182e 	bgeu	r5,r4,c0f0 <udivmodsi4+0x68>
    c090:	28001716 	blt	r5,zero,c0f0 <udivmodsi4+0x68>
    c094:	01000804 	movi	r4,32
    c098:	00c00044 	movi	r3,1
    c09c:	00000206 	br	c0a8 <udivmodsi4+0x20>
    c0a0:	20001126 	beq	r4,zero,c0e8 <udivmodsi4+0x60>
    c0a4:	28000516 	blt	r5,zero,c0bc <udivmodsi4+0x34>
    c0a8:	294b883a 	add	r5,r5,r5
    c0ac:	213fffc4 	addi	r4,r4,-1
    c0b0:	18c7883a 	add	r3,r3,r3
    c0b4:	28bffa36 	bltu	r5,r2,c0a0 <udivmodsi4+0x18>
    c0b8:	18000b26 	beq	r3,zero,c0e8 <udivmodsi4+0x60>
    c0bc:	0009883a 	mov	r4,zero
    c0c0:	11400236 	bltu	r2,r5,c0cc <udivmodsi4+0x44>
    c0c4:	1145c83a 	sub	r2,r2,r5
    c0c8:	20c8b03a 	or	r4,r4,r3
    c0cc:	1806d07a 	srli	r3,r3,1
    c0d0:	280ad07a 	srli	r5,r5,1
    c0d4:	183ffa1e 	bne	r3,zero,c0c0 <udivmodsi4+0x38>
    c0d8:	3000021e 	bne	r6,zero,c0e4 <udivmodsi4+0x5c>
    c0dc:	2005883a 	mov	r2,r4
    c0e0:	f800283a 	ret
    c0e4:	f800283a 	ret
    c0e8:	0009883a 	mov	r4,zero
    c0ec:	003ffa06 	br	c0d8 <udivmodsi4+0x50>
    c0f0:	00c00044 	movi	r3,1
    c0f4:	0009883a 	mov	r4,zero
    c0f8:	003ff106 	br	c0c0 <udivmodsi4+0x38>

0000c0fc <__divsi3>:
    c0fc:	defffe04 	addi	sp,sp,-8
    c100:	dfc00115 	stw	ra,4(sp)
    c104:	dc000015 	stw	r16,0(sp)
    c108:	20000a16 	blt	r4,zero,c134 <__divsi3+0x38>
    c10c:	0021883a 	mov	r16,zero
    c110:	28000b16 	blt	r5,zero,c140 <__divsi3+0x44>
    c114:	000d883a 	mov	r6,zero
    c118:	000c0880 	call	c088 <udivmodsi4>
    c11c:	80000126 	beq	r16,zero,c124 <__divsi3+0x28>
    c120:	0085c83a 	sub	r2,zero,r2
    c124:	dfc00117 	ldw	ra,4(sp)
    c128:	dc000017 	ldw	r16,0(sp)
    c12c:	dec00204 	addi	sp,sp,8
    c130:	f800283a 	ret
    c134:	0109c83a 	sub	r4,zero,r4
    c138:	04000044 	movi	r16,1
    c13c:	283ff50e 	bge	r5,zero,c114 <__divsi3+0x18>
    c140:	014bc83a 	sub	r5,zero,r5
    c144:	8400005c 	xori	r16,r16,1
    c148:	003ff206 	br	c114 <__divsi3+0x18>

0000c14c <__modsi3>:
    c14c:	deffff04 	addi	sp,sp,-4
    c150:	dfc00015 	stw	ra,0(sp)
    c154:	20000516 	blt	r4,zero,c16c <__modsi3+0x20>
    c158:	28000c16 	blt	r5,zero,c18c <__modsi3+0x40>
    c15c:	01800044 	movi	r6,1
    c160:	dfc00017 	ldw	ra,0(sp)
    c164:	dec00104 	addi	sp,sp,4
    c168:	000c0881 	jmpi	c088 <udivmodsi4>
    c16c:	0109c83a 	sub	r4,zero,r4
    c170:	28000b16 	blt	r5,zero,c1a0 <__modsi3+0x54>
    c174:	01800044 	movi	r6,1
    c178:	000c0880 	call	c088 <udivmodsi4>
    c17c:	0085c83a 	sub	r2,zero,r2
    c180:	dfc00017 	ldw	ra,0(sp)
    c184:	dec00104 	addi	sp,sp,4
    c188:	f800283a 	ret
    c18c:	014bc83a 	sub	r5,zero,r5
    c190:	01800044 	movi	r6,1
    c194:	dfc00017 	ldw	ra,0(sp)
    c198:	dec00104 	addi	sp,sp,4
    c19c:	000c0881 	jmpi	c088 <udivmodsi4>
    c1a0:	014bc83a 	sub	r5,zero,r5
    c1a4:	003ff306 	br	c174 <__modsi3+0x28>

0000c1a8 <__udivsi3>:
    c1a8:	000d883a 	mov	r6,zero
    c1ac:	000c0881 	jmpi	c088 <udivmodsi4>

0000c1b0 <__umodsi3>:
    c1b0:	01800044 	movi	r6,1
    c1b4:	000c0881 	jmpi	c088 <udivmodsi4>

0000c1b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    c1b8:	defffc04 	addi	sp,sp,-16
    c1bc:	df000315 	stw	fp,12(sp)
    c1c0:	df000304 	addi	fp,sp,12
    c1c4:	e13ffd15 	stw	r4,-12(fp)
    c1c8:	e17ffe15 	stw	r5,-8(fp)
    c1cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    c1d0:	e0fffe17 	ldw	r3,-8(fp)
    c1d4:	e0bffd17 	ldw	r2,-12(fp)
    c1d8:	18800e26 	beq	r3,r2,c214 <alt_load_section+0x5c>
  {
    while( to != end )
    c1dc:	00000a06 	br	c208 <alt_load_section+0x50>
    {
      *to++ = *from++;
    c1e0:	e0bffd17 	ldw	r2,-12(fp)
    c1e4:	10c00017 	ldw	r3,0(r2)
    c1e8:	e0bffe17 	ldw	r2,-8(fp)
    c1ec:	10c00015 	stw	r3,0(r2)
    c1f0:	e0bffe17 	ldw	r2,-8(fp)
    c1f4:	10800104 	addi	r2,r2,4
    c1f8:	e0bffe15 	stw	r2,-8(fp)
    c1fc:	e0bffd17 	ldw	r2,-12(fp)
    c200:	10800104 	addi	r2,r2,4
    c204:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    c208:	e0fffe17 	ldw	r3,-8(fp)
    c20c:	e0bfff17 	ldw	r2,-4(fp)
    c210:	18bff31e 	bne	r3,r2,c1e0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    c214:	e037883a 	mov	sp,fp
    c218:	df000017 	ldw	fp,0(sp)
    c21c:	dec00104 	addi	sp,sp,4
    c220:	f800283a 	ret

0000c224 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    c224:	defffe04 	addi	sp,sp,-8
    c228:	dfc00115 	stw	ra,4(sp)
    c22c:	df000015 	stw	fp,0(sp)
    c230:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    c234:	01000074 	movhi	r4,1
    c238:	21385004 	addi	r4,r4,-7872
    c23c:	01400074 	movhi	r5,1
    c240:	29777f04 	addi	r5,r5,-8708
    c244:	01800074 	movhi	r6,1
    c248:	31b85004 	addi	r6,r6,-7872
    c24c:	000c1b80 	call	c1b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    c250:	01000074 	movhi	r4,1
    c254:	21200804 	addi	r4,r4,-32736
    c258:	01400074 	movhi	r5,1
    c25c:	29600804 	addi	r5,r5,-32736
    c260:	01800074 	movhi	r6,1
    c264:	31a06e04 	addi	r6,r6,-32328
    c268:	000c1b80 	call	c1b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    c26c:	01000074 	movhi	r4,1
    c270:	21371304 	addi	r4,r4,-9140
    c274:	01400074 	movhi	r5,1
    c278:	29771304 	addi	r5,r5,-9140
    c27c:	01800074 	movhi	r6,1
    c280:	31b77f04 	addi	r6,r6,-8708
    c284:	000c1b80 	call	c1b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    c288:	000cc700 	call	cc70 <alt_dcache_flush_all>
  alt_icache_flush_all();
    c28c:	000cda80 	call	cda8 <alt_icache_flush_all>
}
    c290:	e037883a 	mov	sp,fp
    c294:	dfc00117 	ldw	ra,4(sp)
    c298:	df000017 	ldw	fp,0(sp)
    c29c:	dec00204 	addi	sp,sp,8
    c2a0:	f800283a 	ret

0000c2a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    c2a4:	defffd04 	addi	sp,sp,-12
    c2a8:	dfc00215 	stw	ra,8(sp)
    c2ac:	df000115 	stw	fp,4(sp)
    c2b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    c2b4:	0009883a 	mov	r4,zero
    c2b8:	000c4840 	call	c484 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    c2bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    c2c0:	000c4b80 	call	c4b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    c2c4:	01000074 	movhi	r4,1
    c2c8:	21377104 	addi	r4,r4,-8764
    c2cc:	01400074 	movhi	r5,1
    c2d0:	29777104 	addi	r5,r5,-8764
    c2d4:	01800074 	movhi	r6,1
    c2d8:	31b77104 	addi	r6,r6,-8764
    c2dc:	000d1800 	call	d180 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    c2e0:	d120f717 	ldw	r4,-31780(gp)
    c2e4:	d0e0f817 	ldw	r3,-31776(gp)
    c2e8:	d0a0f917 	ldw	r2,-31772(gp)
    c2ec:	180b883a 	mov	r5,r3
    c2f0:	100d883a 	mov	r6,r2
    c2f4:	0009cb40 	call	9cb4 <main>
    c2f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    c2fc:	01000044 	movi	r4,1
    c300:	000cba40 	call	cba4 <close>
  exit (result);
    c304:	e13fff17 	ldw	r4,-4(fp)
    c308:	000d9d00 	call	d9d0 <exit>

0000c30c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c30c:	defffe04 	addi	sp,sp,-8
    c310:	dfc00115 	stw	ra,4(sp)
    c314:	df000015 	stw	fp,0(sp)
    c318:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c31c:	00800074 	movhi	r2,1
    c320:	10b84c04 	addi	r2,r2,-7888
    c324:	10800017 	ldw	r2,0(r2)
    c328:	10000526 	beq	r2,zero,c340 <alt_get_errno+0x34>
    c32c:	00800074 	movhi	r2,1
    c330:	10b84c04 	addi	r2,r2,-7888
    c334:	10800017 	ldw	r2,0(r2)
    c338:	103ee83a 	callr	r2
    c33c:	00000206 	br	c348 <alt_get_errno+0x3c>
    c340:	00800074 	movhi	r2,1
    c344:	10b92d04 	addi	r2,r2,-6988
}
    c348:	e037883a 	mov	sp,fp
    c34c:	dfc00117 	ldw	ra,4(sp)
    c350:	df000017 	ldw	fp,0(sp)
    c354:	dec00204 	addi	sp,sp,8
    c358:	f800283a 	ret

0000c35c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c35c:	defff904 	addi	sp,sp,-28
    c360:	dfc00615 	stw	ra,24(sp)
    c364:	df000515 	stw	fp,20(sp)
    c368:	df000504 	addi	fp,sp,20
    c36c:	e13ffd15 	stw	r4,-12(fp)
    c370:	e17ffe15 	stw	r5,-8(fp)
    c374:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c378:	e0bffd17 	ldw	r2,-12(fp)
    c37c:	10000716 	blt	r2,zero,c39c <write+0x40>
    c380:	e13ffd17 	ldw	r4,-12(fp)
    c384:	01400304 	movi	r5,12
    c388:	000b5d00 	call	b5d0 <__mulsi3>
    c38c:	00c00074 	movhi	r3,1
    c390:	18f7d704 	addi	r3,r3,-8356
    c394:	10c5883a 	add	r2,r2,r3
    c398:	00000106 	br	c3a0 <write+0x44>
    c39c:	0005883a 	mov	r2,zero
    c3a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    c3a4:	e0bffb17 	ldw	r2,-20(fp)
    c3a8:	10001f26 	beq	r2,zero,c428 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c3ac:	e0bffb17 	ldw	r2,-20(fp)
    c3b0:	10800217 	ldw	r2,8(r2)
    c3b4:	108000cc 	andi	r2,r2,3
    c3b8:	10001726 	beq	r2,zero,c418 <write+0xbc>
    c3bc:	e0bffb17 	ldw	r2,-20(fp)
    c3c0:	10800017 	ldw	r2,0(r2)
    c3c4:	10800617 	ldw	r2,24(r2)
    c3c8:	10001326 	beq	r2,zero,c418 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c3cc:	e0bffb17 	ldw	r2,-20(fp)
    c3d0:	10800017 	ldw	r2,0(r2)
    c3d4:	10c00617 	ldw	r3,24(r2)
    c3d8:	e0bfff17 	ldw	r2,-4(fp)
    c3dc:	e13ffb17 	ldw	r4,-20(fp)
    c3e0:	e17ffe17 	ldw	r5,-8(fp)
    c3e4:	100d883a 	mov	r6,r2
    c3e8:	183ee83a 	callr	r3
    c3ec:	e0bffc15 	stw	r2,-16(fp)
    c3f0:	e0bffc17 	ldw	r2,-16(fp)
    c3f4:	1000060e 	bge	r2,zero,c410 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    c3f8:	000c30c0 	call	c30c <alt_get_errno>
    c3fc:	e0fffc17 	ldw	r3,-16(fp)
    c400:	00c7c83a 	sub	r3,zero,r3
    c404:	10c00015 	stw	r3,0(r2)
        return -1;
    c408:	00bfffc4 	movi	r2,-1
    c40c:	00000a06 	br	c438 <write+0xdc>
      }
      return rval;
    c410:	e0bffc17 	ldw	r2,-16(fp)
    c414:	00000806 	br	c438 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    c418:	000c30c0 	call	c30c <alt_get_errno>
    c41c:	00c00344 	movi	r3,13
    c420:	10c00015 	stw	r3,0(r2)
    c424:	00000306 	br	c434 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c428:	000c30c0 	call	c30c <alt_get_errno>
    c42c:	00c01444 	movi	r3,81
    c430:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    c434:	00bfffc4 	movi	r2,-1
}
    c438:	e037883a 	mov	sp,fp
    c43c:	dfc00117 	ldw	ra,4(sp)
    c440:	df000017 	ldw	fp,0(sp)
    c444:	dec00204 	addi	sp,sp,8
    c448:	f800283a 	ret

0000c44c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c44c:	defffd04 	addi	sp,sp,-12
    c450:	dfc00215 	stw	ra,8(sp)
    c454:	df000115 	stw	fp,4(sp)
    c458:	df000104 	addi	fp,sp,4
    c45c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c460:	e13fff17 	ldw	r4,-4(fp)
    c464:	01400074 	movhi	r5,1
    c468:	29784904 	addi	r5,r5,-7900
    c46c:	000cd080 	call	cd08 <alt_dev_llist_insert>
}
    c470:	e037883a 	mov	sp,fp
    c474:	dfc00117 	ldw	ra,4(sp)
    c478:	df000017 	ldw	fp,0(sp)
    c47c:	dec00204 	addi	sp,sp,8
    c480:	f800283a 	ret

0000c484 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c484:	defffd04 	addi	sp,sp,-12
    c488:	dfc00215 	stw	ra,8(sp)
    c48c:	df000115 	stw	fp,4(sp)
    c490:	df000104 	addi	fp,sp,4
    c494:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    c498:	000d6ac0 	call	d6ac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c49c:	00800044 	movi	r2,1
    c4a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c4a4:	e037883a 	mov	sp,fp
    c4a8:	dfc00117 	ldw	ra,4(sp)
    c4ac:	df000017 	ldw	fp,0(sp)
    c4b0:	dec00204 	addi	sp,sp,8
    c4b4:	f800283a 	ret

0000c4b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c4b8:	defffe04 	addi	sp,sp,-8
    c4bc:	dfc00115 	stw	ra,4(sp)
    c4c0:	df000015 	stw	fp,0(sp)
    c4c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    c4c8:	01000074 	movhi	r4,1
    c4cc:	21050804 	addi	r4,r4,5152
    c4d0:	000b883a 	mov	r5,zero
    c4d4:	01800044 	movi	r6,1
    c4d8:	01c0fa04 	movi	r7,1000
    c4dc:	000c7d00 	call	c7d0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    c4e0:	01000074 	movhi	r4,1
    c4e4:	2137b704 	addi	r4,r4,-8484
    c4e8:	000c44c0 	call	c44c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    c4ec:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    c4f0:	01000074 	movhi	r4,1
    c4f4:	2137c204 	addi	r4,r4,-8440
    c4f8:	000c44c0 	call	c44c <alt_dev_reg>
}
    c4fc:	e037883a 	mov	sp,fp
    c500:	dfc00117 	ldw	ra,4(sp)
    c504:	df000017 	ldw	fp,0(sp)
    c508:	dec00204 	addi	sp,sp,8
    c50c:	f800283a 	ret

0000c510 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c510:	defffa04 	addi	sp,sp,-24
    c514:	dfc00515 	stw	ra,20(sp)
    c518:	df000415 	stw	fp,16(sp)
    c51c:	df000404 	addi	fp,sp,16
    c520:	e13ffd15 	stw	r4,-12(fp)
    c524:	e17ffe15 	stw	r5,-8(fp)
    c528:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c52c:	e0bffd17 	ldw	r2,-12(fp)
    c530:	10800017 	ldw	r2,0(r2)
    c534:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c538:	e0bffc17 	ldw	r2,-16(fp)
    c53c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    c540:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c544:	10800217 	ldw	r2,8(r2)
    c548:	1809883a 	mov	r4,r3
    c54c:	e17ffe17 	ldw	r5,-8(fp)
    c550:	e1bfff17 	ldw	r6,-4(fp)
    c554:	100f883a 	mov	r7,r2
    c558:	000c5d00 	call	c5d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c55c:	e037883a 	mov	sp,fp
    c560:	dfc00117 	ldw	ra,4(sp)
    c564:	df000017 	ldw	fp,0(sp)
    c568:	dec00204 	addi	sp,sp,8
    c56c:	f800283a 	ret

0000c570 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c570:	defffa04 	addi	sp,sp,-24
    c574:	dfc00515 	stw	ra,20(sp)
    c578:	df000415 	stw	fp,16(sp)
    c57c:	df000404 	addi	fp,sp,16
    c580:	e13ffd15 	stw	r4,-12(fp)
    c584:	e17ffe15 	stw	r5,-8(fp)
    c588:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c58c:	e0bffd17 	ldw	r2,-12(fp)
    c590:	10800017 	ldw	r2,0(r2)
    c594:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c598:	e0bffc17 	ldw	r2,-16(fp)
    c59c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    c5a0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c5a4:	10800217 	ldw	r2,8(r2)
    c5a8:	1809883a 	mov	r4,r3
    c5ac:	e17ffe17 	ldw	r5,-8(fp)
    c5b0:	e1bfff17 	ldw	r6,-4(fp)
    c5b4:	100f883a 	mov	r7,r2
    c5b8:	000c6c40 	call	c6c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c5bc:	e037883a 	mov	sp,fp
    c5c0:	dfc00117 	ldw	ra,4(sp)
    c5c4:	df000017 	ldw	fp,0(sp)
    c5c8:	dec00204 	addi	sp,sp,8
    c5cc:	f800283a 	ret

0000c5d0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    c5d0:	defff704 	addi	sp,sp,-36
    c5d4:	df000815 	stw	fp,32(sp)
    c5d8:	df000804 	addi	fp,sp,32
    c5dc:	e13ffc15 	stw	r4,-16(fp)
    c5e0:	e17ffd15 	stw	r5,-12(fp)
    c5e4:	e1bffe15 	stw	r6,-8(fp)
    c5e8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    c5ec:	e0bffc17 	ldw	r2,-16(fp)
    c5f0:	10800017 	ldw	r2,0(r2)
    c5f4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    c5f8:	e0bffd17 	ldw	r2,-12(fp)
    c5fc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    c600:	e0bffe17 	ldw	r2,-8(fp)
    c604:	e0fffd17 	ldw	r3,-12(fp)
    c608:	1885883a 	add	r2,r3,r2
    c60c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    c610:	00001406 	br	c664 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c614:	e0bff917 	ldw	r2,-28(fp)
    c618:	10800037 	ldwio	r2,0(r2)
    c61c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    c620:	e0bffb17 	ldw	r2,-20(fp)
    c624:	10a0000c 	andi	r2,r2,32768
    c628:	10000826 	beq	r2,zero,c64c <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c62c:	e0bffb17 	ldw	r2,-20(fp)
    c630:	1007883a 	mov	r3,r2
    c634:	e0bff817 	ldw	r2,-32(fp)
    c638:	10c00005 	stb	r3,0(r2)
    c63c:	e0bff817 	ldw	r2,-32(fp)
    c640:	10800044 	addi	r2,r2,1
    c644:	e0bff815 	stw	r2,-32(fp)
    c648:	00000606 	br	c664 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    c64c:	e0fff817 	ldw	r3,-32(fp)
    c650:	e0bffd17 	ldw	r2,-12(fp)
    c654:	1880071e 	bne	r3,r2,c674 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    c658:	e0bfff17 	ldw	r2,-4(fp)
    c65c:	1090000c 	andi	r2,r2,16384
    c660:	1000061e 	bne	r2,zero,c67c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    c664:	e0fff817 	ldw	r3,-32(fp)
    c668:	e0bffa17 	ldw	r2,-24(fp)
    c66c:	18bfe936 	bltu	r3,r2,c614 <altera_avalon_jtag_uart_read+0x44>
    c670:	00000306 	br	c680 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    c674:	0001883a 	nop
    c678:	00000106 	br	c680 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    c67c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    c680:	e0fff817 	ldw	r3,-32(fp)
    c684:	e0bffd17 	ldw	r2,-12(fp)
    c688:	18800426 	beq	r3,r2,c69c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    c68c:	e0fff817 	ldw	r3,-32(fp)
    c690:	e0bffd17 	ldw	r2,-12(fp)
    c694:	1885c83a 	sub	r2,r3,r2
    c698:	00000606 	br	c6b4 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    c69c:	e0bfff17 	ldw	r2,-4(fp)
    c6a0:	1090000c 	andi	r2,r2,16384
    c6a4:	10000226 	beq	r2,zero,c6b0 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    c6a8:	00bffd44 	movi	r2,-11
    c6ac:	00000106 	br	c6b4 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    c6b0:	00bffec4 	movi	r2,-5
}
    c6b4:	e037883a 	mov	sp,fp
    c6b8:	df000017 	ldw	fp,0(sp)
    c6bc:	dec00104 	addi	sp,sp,4
    c6c0:	f800283a 	ret

0000c6c4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c6c4:	defff904 	addi	sp,sp,-28
    c6c8:	df000615 	stw	fp,24(sp)
    c6cc:	df000604 	addi	fp,sp,24
    c6d0:	e13ffc15 	stw	r4,-16(fp)
    c6d4:	e17ffd15 	stw	r5,-12(fp)
    c6d8:	e1bffe15 	stw	r6,-8(fp)
    c6dc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    c6e0:	e0bffc17 	ldw	r2,-16(fp)
    c6e4:	10800017 	ldw	r2,0(r2)
    c6e8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    c6ec:	e0bffe17 	ldw	r2,-8(fp)
    c6f0:	e0fffd17 	ldw	r3,-12(fp)
    c6f4:	1885883a 	add	r2,r3,r2
    c6f8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    c6fc:	00000f06 	br	c73c <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    c700:	e0bffa17 	ldw	r2,-24(fp)
    c704:	10800104 	addi	r2,r2,4
    c708:	10800037 	ldwio	r2,0(r2)
    c70c:	10bfffec 	andhi	r2,r2,65535
    c710:	10000a26 	beq	r2,zero,c73c <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    c714:	e0bffa17 	ldw	r2,-24(fp)
    c718:	e0fffd17 	ldw	r3,-12(fp)
    c71c:	18c00003 	ldbu	r3,0(r3)
    c720:	18c03fcc 	andi	r3,r3,255
    c724:	18c0201c 	xori	r3,r3,128
    c728:	18ffe004 	addi	r3,r3,-128
    c72c:	e13ffd17 	ldw	r4,-12(fp)
    c730:	21000044 	addi	r4,r4,1
    c734:	e13ffd15 	stw	r4,-12(fp)
    c738:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    c73c:	e0fffd17 	ldw	r3,-12(fp)
    c740:	e0bffb17 	ldw	r2,-20(fp)
    c744:	18bfee36 	bltu	r3,r2,c700 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    c748:	e0bffe17 	ldw	r2,-8(fp)
}
    c74c:	e037883a 	mov	sp,fp
    c750:	df000017 	ldw	fp,0(sp)
    c754:	dec00104 	addi	sp,sp,4
    c758:	f800283a 	ret

0000c75c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c75c:	defffa04 	addi	sp,sp,-24
    c760:	dfc00515 	stw	ra,20(sp)
    c764:	df000415 	stw	fp,16(sp)
    c768:	df000404 	addi	fp,sp,16
    c76c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c770:	0007883a 	mov	r3,zero
    c774:	e0bfff17 	ldw	r2,-4(fp)
    c778:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c77c:	e0bfff17 	ldw	r2,-4(fp)
    c780:	10800104 	addi	r2,r2,4
    c784:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c788:	0005303a 	rdctl	r2,status
    c78c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c790:	e0fffd17 	ldw	r3,-12(fp)
    c794:	00bfff84 	movi	r2,-2
    c798:	1884703a 	and	r2,r3,r2
    c79c:	1001703a 	wrctl	status,r2
  
  return context;
    c7a0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c7a4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    c7a8:	000d5a80 	call	d5a8 <alt_tick>
    c7ac:	e0bffc17 	ldw	r2,-16(fp)
    c7b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c7b4:	e0bffe17 	ldw	r2,-8(fp)
    c7b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c7bc:	e037883a 	mov	sp,fp
    c7c0:	dfc00117 	ldw	ra,4(sp)
    c7c4:	df000017 	ldw	fp,0(sp)
    c7c8:	dec00204 	addi	sp,sp,8
    c7cc:	f800283a 	ret

0000c7d0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c7d0:	defff804 	addi	sp,sp,-32
    c7d4:	dfc00715 	stw	ra,28(sp)
    c7d8:	df000615 	stw	fp,24(sp)
    c7dc:	df000604 	addi	fp,sp,24
    c7e0:	e13ffc15 	stw	r4,-16(fp)
    c7e4:	e17ffd15 	stw	r5,-12(fp)
    c7e8:	e1bffe15 	stw	r6,-8(fp)
    c7ec:	e1ffff15 	stw	r7,-4(fp)
    c7f0:	e0bfff17 	ldw	r2,-4(fp)
    c7f4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c7f8:	00800074 	movhi	r2,1
    c7fc:	10b93204 	addi	r2,r2,-6968
    c800:	10800017 	ldw	r2,0(r2)
    c804:	1000041e 	bne	r2,zero,c818 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    c808:	00800074 	movhi	r2,1
    c80c:	10b93204 	addi	r2,r2,-6968
    c810:	e0fffb17 	ldw	r3,-20(fp)
    c814:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c818:	e0bffc17 	ldw	r2,-16(fp)
    c81c:	10800104 	addi	r2,r2,4
    c820:	00c001c4 	movi	r3,7
    c824:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    c828:	d8000015 	stw	zero,0(sp)
    c82c:	e13ffd17 	ldw	r4,-12(fp)
    c830:	e17ffe17 	ldw	r5,-8(fp)
    c834:	01800074 	movhi	r6,1
    c838:	31b1d704 	addi	r6,r6,-14500
    c83c:	e1fffc17 	ldw	r7,-16(fp)
    c840:	000cdd80 	call	cdd8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    c844:	e037883a 	mov	sp,fp
    c848:	dfc00117 	ldw	ra,4(sp)
    c84c:	df000017 	ldw	fp,0(sp)
    c850:	dec00204 	addi	sp,sp,8
    c854:	f800283a 	ret

0000c858 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c858:	defffa04 	addi	sp,sp,-24
    c85c:	dfc00515 	stw	ra,20(sp)
    c860:	df000415 	stw	fp,16(sp)
    c864:	df000404 	addi	fp,sp,16
    c868:	e13ffd15 	stw	r4,-12(fp)
    c86c:	e17ffe15 	stw	r5,-8(fp)
    c870:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    c874:	e0bffd17 	ldw	r2,-12(fp)
    c878:	10800017 	ldw	r2,0(r2)
    c87c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    c880:	e0bffc17 	ldw	r2,-16(fp)
    c884:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    c888:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    c88c:	10800217 	ldw	r2,8(r2)
    c890:	1809883a 	mov	r4,r3
    c894:	e17ffe17 	ldw	r5,-8(fp)
    c898:	e1bfff17 	ldw	r6,-4(fp)
    c89c:	100f883a 	mov	r7,r2
    c8a0:	000c9680 	call	c968 <altera_avalon_uart_read>
      fd->fd_flags);
}
    c8a4:	e037883a 	mov	sp,fp
    c8a8:	dfc00117 	ldw	ra,4(sp)
    c8ac:	df000017 	ldw	fp,0(sp)
    c8b0:	dec00204 	addi	sp,sp,8
    c8b4:	f800283a 	ret

0000c8b8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c8b8:	defffa04 	addi	sp,sp,-24
    c8bc:	dfc00515 	stw	ra,20(sp)
    c8c0:	df000415 	stw	fp,16(sp)
    c8c4:	df000404 	addi	fp,sp,16
    c8c8:	e13ffd15 	stw	r4,-12(fp)
    c8cc:	e17ffe15 	stw	r5,-8(fp)
    c8d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    c8d4:	e0bffd17 	ldw	r2,-12(fp)
    c8d8:	10800017 	ldw	r2,0(r2)
    c8dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    c8e0:	e0bffc17 	ldw	r2,-16(fp)
    c8e4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    c8e8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    c8ec:	10800217 	ldw	r2,8(r2)
    c8f0:	1809883a 	mov	r4,r3
    c8f4:	e17ffe17 	ldw	r5,-8(fp)
    c8f8:	e1bfff17 	ldw	r6,-4(fp)
    c8fc:	100f883a 	mov	r7,r2
    c900:	000ca780 	call	ca78 <altera_avalon_uart_write>
      fd->fd_flags);
}
    c904:	e037883a 	mov	sp,fp
    c908:	dfc00117 	ldw	ra,4(sp)
    c90c:	df000017 	ldw	fp,0(sp)
    c910:	dec00204 	addi	sp,sp,8
    c914:	f800283a 	ret

0000c918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c918:	defffe04 	addi	sp,sp,-8
    c91c:	dfc00115 	stw	ra,4(sp)
    c920:	df000015 	stw	fp,0(sp)
    c924:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c928:	00800074 	movhi	r2,1
    c92c:	10b84c04 	addi	r2,r2,-7888
    c930:	10800017 	ldw	r2,0(r2)
    c934:	10000526 	beq	r2,zero,c94c <alt_get_errno+0x34>
    c938:	00800074 	movhi	r2,1
    c93c:	10b84c04 	addi	r2,r2,-7888
    c940:	10800017 	ldw	r2,0(r2)
    c944:	103ee83a 	callr	r2
    c948:	00000206 	br	c954 <alt_get_errno+0x3c>
    c94c:	00800074 	movhi	r2,1
    c950:	10b92d04 	addi	r2,r2,-6988
}
    c954:	e037883a 	mov	sp,fp
    c958:	dfc00117 	ldw	ra,4(sp)
    c95c:	df000017 	ldw	fp,0(sp)
    c960:	dec00204 	addi	sp,sp,8
    c964:	f800283a 	ret

0000c968 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    c968:	defff804 	addi	sp,sp,-32
    c96c:	dfc00715 	stw	ra,28(sp)
    c970:	df000615 	stw	fp,24(sp)
    c974:	df000604 	addi	fp,sp,24
    c978:	e13ffc15 	stw	r4,-16(fp)
    c97c:	e17ffd15 	stw	r5,-12(fp)
    c980:	e1bffe15 	stw	r6,-8(fp)
    c984:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    c988:	e0bfff17 	ldw	r2,-4(fp)
    c98c:	1090000c 	andi	r2,r2,16384
    c990:	1005003a 	cmpeq	r2,r2,zero
    c994:	10803fcc 	andi	r2,r2,255
    c998:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    c99c:	e0bffc17 	ldw	r2,-16(fp)
    c9a0:	10800017 	ldw	r2,0(r2)
    c9a4:	10800204 	addi	r2,r2,8
    c9a8:	10800037 	ldwio	r2,0(r2)
    c9ac:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    c9b0:	e0bffc17 	ldw	r2,-16(fp)
    c9b4:	10800017 	ldw	r2,0(r2)
    c9b8:	10800204 	addi	r2,r2,8
    c9bc:	0007883a 	mov	r3,zero
    c9c0:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    c9c4:	e0bffb17 	ldw	r2,-20(fp)
    c9c8:	1080200c 	andi	r2,r2,128
    c9cc:	10000b26 	beq	r2,zero,c9fc <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    c9d0:	e0bffc17 	ldw	r2,-16(fp)
    c9d4:	10800017 	ldw	r2,0(r2)
    c9d8:	10800037 	ldwio	r2,0(r2)
    c9dc:	1007883a 	mov	r3,r2
    c9e0:	e0bffd17 	ldw	r2,-12(fp)
    c9e4:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    c9e8:	e0bffb17 	ldw	r2,-20(fp)
    c9ec:	108000cc 	andi	r2,r2,3
    c9f0:	1000021e 	bne	r2,zero,c9fc <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    c9f4:	00800044 	movi	r2,1
    c9f8:	00000606 	br	ca14 <altera_avalon_uart_read+0xac>
      }
    }
  }
  while (block);
    c9fc:	e0bffa17 	ldw	r2,-24(fp)
    ca00:	103fe61e 	bne	r2,zero,c99c <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
    ca04:	000c9180 	call	c918 <alt_get_errno>
    ca08:	00c002c4 	movi	r3,11
    ca0c:	10c00015 	stw	r3,0(r2)
 
  return 0;
    ca10:	0005883a 	mov	r2,zero
}
    ca14:	e037883a 	mov	sp,fp
    ca18:	dfc00117 	ldw	ra,4(sp)
    ca1c:	df000017 	ldw	fp,0(sp)
    ca20:	dec00204 	addi	sp,sp,8
    ca24:	f800283a 	ret

0000ca28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ca28:	defffe04 	addi	sp,sp,-8
    ca2c:	dfc00115 	stw	ra,4(sp)
    ca30:	df000015 	stw	fp,0(sp)
    ca34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ca38:	00800074 	movhi	r2,1
    ca3c:	10b84c04 	addi	r2,r2,-7888
    ca40:	10800017 	ldw	r2,0(r2)
    ca44:	10000526 	beq	r2,zero,ca5c <alt_get_errno+0x34>
    ca48:	00800074 	movhi	r2,1
    ca4c:	10b84c04 	addi	r2,r2,-7888
    ca50:	10800017 	ldw	r2,0(r2)
    ca54:	103ee83a 	callr	r2
    ca58:	00000206 	br	ca64 <alt_get_errno+0x3c>
    ca5c:	00800074 	movhi	r2,1
    ca60:	10b92d04 	addi	r2,r2,-6988
}
    ca64:	e037883a 	mov	sp,fp
    ca68:	dfc00117 	ldw	ra,4(sp)
    ca6c:	df000017 	ldw	fp,0(sp)
    ca70:	dec00204 	addi	sp,sp,8
    ca74:	f800283a 	ret

0000ca78 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    ca78:	defff704 	addi	sp,sp,-36
    ca7c:	dfc00815 	stw	ra,32(sp)
    ca80:	df000715 	stw	fp,28(sp)
    ca84:	df000704 	addi	fp,sp,28
    ca88:	e13ffc15 	stw	r4,-16(fp)
    ca8c:	e17ffd15 	stw	r5,-12(fp)
    ca90:	e1bffe15 	stw	r6,-8(fp)
    ca94:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    ca98:	e0bfff17 	ldw	r2,-4(fp)
    ca9c:	1090000c 	andi	r2,r2,16384
    caa0:	1005003a 	cmpeq	r2,r2,zero
    caa4:	10803fcc 	andi	r2,r2,255
    caa8:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    caac:	e0bffe17 	ldw	r2,-8(fp)
    cab0:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    cab4:	e0bffc17 	ldw	r2,-16(fp)
    cab8:	10800017 	ldw	r2,0(r2)
    cabc:	10800204 	addi	r2,r2,8
    cac0:	10800037 	ldwio	r2,0(r2)
    cac4:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    cac8:	e0bffb17 	ldw	r2,-20(fp)
    cacc:	1080100c 	andi	r2,r2,64
    cad0:	10000f26 	beq	r2,zero,cb10 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    cad4:	e0bffc17 	ldw	r2,-16(fp)
    cad8:	10800017 	ldw	r2,0(r2)
    cadc:	10800104 	addi	r2,r2,4
    cae0:	e0fffd17 	ldw	r3,-12(fp)
    cae4:	18c00003 	ldbu	r3,0(r3)
    cae8:	18c03fcc 	andi	r3,r3,255
    caec:	18c0201c 	xori	r3,r3,128
    caf0:	18ffe004 	addi	r3,r3,-128
    caf4:	e13ffd17 	ldw	r4,-12(fp)
    caf8:	21000044 	addi	r4,r4,1
    cafc:	e13ffd15 	stw	r4,-12(fp)
    cb00:	10c00035 	stwio	r3,0(r2)
      count--;
    cb04:	e0bff917 	ldw	r2,-28(fp)
    cb08:	10bfffc4 	addi	r2,r2,-1
    cb0c:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    cb10:	e0bffa17 	ldw	r2,-24(fp)
    cb14:	10000226 	beq	r2,zero,cb20 <altera_avalon_uart_write+0xa8>
    cb18:	e0bff917 	ldw	r2,-28(fp)
    cb1c:	103fe51e 	bne	r2,zero,cab4 <altera_avalon_uart_write+0x3c>

  if (count)
    cb20:	e0bff917 	ldw	r2,-28(fp)
    cb24:	10000326 	beq	r2,zero,cb34 <altera_avalon_uart_write+0xbc>
  {
    ALT_ERRNO = EWOULDBLOCK;
    cb28:	000ca280 	call	ca28 <alt_get_errno>
    cb2c:	00c002c4 	movi	r3,11
    cb30:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
    cb34:	e0fffe17 	ldw	r3,-8(fp)
    cb38:	e0bff917 	ldw	r2,-28(fp)
    cb3c:	1885c83a 	sub	r2,r3,r2
}
    cb40:	e037883a 	mov	sp,fp
    cb44:	dfc00117 	ldw	ra,4(sp)
    cb48:	df000017 	ldw	fp,0(sp)
    cb4c:	dec00204 	addi	sp,sp,8
    cb50:	f800283a 	ret

0000cb54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cb54:	defffe04 	addi	sp,sp,-8
    cb58:	dfc00115 	stw	ra,4(sp)
    cb5c:	df000015 	stw	fp,0(sp)
    cb60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cb64:	00800074 	movhi	r2,1
    cb68:	10b84c04 	addi	r2,r2,-7888
    cb6c:	10800017 	ldw	r2,0(r2)
    cb70:	10000526 	beq	r2,zero,cb88 <alt_get_errno+0x34>
    cb74:	00800074 	movhi	r2,1
    cb78:	10b84c04 	addi	r2,r2,-7888
    cb7c:	10800017 	ldw	r2,0(r2)
    cb80:	103ee83a 	callr	r2
    cb84:	00000206 	br	cb90 <alt_get_errno+0x3c>
    cb88:	00800074 	movhi	r2,1
    cb8c:	10b92d04 	addi	r2,r2,-6988
}
    cb90:	e037883a 	mov	sp,fp
    cb94:	dfc00117 	ldw	ra,4(sp)
    cb98:	df000017 	ldw	fp,0(sp)
    cb9c:	dec00204 	addi	sp,sp,8
    cba0:	f800283a 	ret

0000cba4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cba4:	defffb04 	addi	sp,sp,-20
    cba8:	dfc00415 	stw	ra,16(sp)
    cbac:	df000315 	stw	fp,12(sp)
    cbb0:	df000304 	addi	fp,sp,12
    cbb4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cbb8:	e0bfff17 	ldw	r2,-4(fp)
    cbbc:	10000716 	blt	r2,zero,cbdc <close+0x38>
    cbc0:	e13fff17 	ldw	r4,-4(fp)
    cbc4:	01400304 	movi	r5,12
    cbc8:	000b5d00 	call	b5d0 <__mulsi3>
    cbcc:	00c00074 	movhi	r3,1
    cbd0:	18f7d704 	addi	r3,r3,-8356
    cbd4:	10c5883a 	add	r2,r2,r3
    cbd8:	00000106 	br	cbe0 <close+0x3c>
    cbdc:	0005883a 	mov	r2,zero
    cbe0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cbe4:	e0bffd17 	ldw	r2,-12(fp)
    cbe8:	10001826 	beq	r2,zero,cc4c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cbec:	e0bffd17 	ldw	r2,-12(fp)
    cbf0:	10800017 	ldw	r2,0(r2)
    cbf4:	10800417 	ldw	r2,16(r2)
    cbf8:	10000626 	beq	r2,zero,cc14 <close+0x70>
    cbfc:	e0bffd17 	ldw	r2,-12(fp)
    cc00:	10800017 	ldw	r2,0(r2)
    cc04:	10800417 	ldw	r2,16(r2)
    cc08:	e13ffd17 	ldw	r4,-12(fp)
    cc0c:	103ee83a 	callr	r2
    cc10:	00000106 	br	cc18 <close+0x74>
    cc14:	0005883a 	mov	r2,zero
    cc18:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cc1c:	e13fff17 	ldw	r4,-4(fp)
    cc20:	000d4900 	call	d490 <alt_release_fd>
    if (rval < 0)
    cc24:	e0bffe17 	ldw	r2,-8(fp)
    cc28:	1000060e 	bge	r2,zero,cc44 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cc2c:	000cb540 	call	cb54 <alt_get_errno>
    cc30:	e0fffe17 	ldw	r3,-8(fp)
    cc34:	00c7c83a 	sub	r3,zero,r3
    cc38:	10c00015 	stw	r3,0(r2)
      return -1;
    cc3c:	00bfffc4 	movi	r2,-1
    cc40:	00000606 	br	cc5c <close+0xb8>
    }
    return 0;
    cc44:	0005883a 	mov	r2,zero
    cc48:	00000406 	br	cc5c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cc4c:	000cb540 	call	cb54 <alt_get_errno>
    cc50:	00c01444 	movi	r3,81
    cc54:	10c00015 	stw	r3,0(r2)
    return -1;
    cc58:	00bfffc4 	movi	r2,-1
  }
}
    cc5c:	e037883a 	mov	sp,fp
    cc60:	dfc00117 	ldw	ra,4(sp)
    cc64:	df000017 	ldw	fp,0(sp)
    cc68:	dec00204 	addi	sp,sp,8
    cc6c:	f800283a 	ret

0000cc70 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    cc70:	deffff04 	addi	sp,sp,-4
    cc74:	df000015 	stw	fp,0(sp)
    cc78:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    cc7c:	e037883a 	mov	sp,fp
    cc80:	df000017 	ldw	fp,0(sp)
    cc84:	dec00104 	addi	sp,sp,4
    cc88:	f800283a 	ret

0000cc8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cc8c:	defffc04 	addi	sp,sp,-16
    cc90:	df000315 	stw	fp,12(sp)
    cc94:	df000304 	addi	fp,sp,12
    cc98:	e13ffd15 	stw	r4,-12(fp)
    cc9c:	e17ffe15 	stw	r5,-8(fp)
    cca0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cca4:	e0bfff17 	ldw	r2,-4(fp)
}
    cca8:	e037883a 	mov	sp,fp
    ccac:	df000017 	ldw	fp,0(sp)
    ccb0:	dec00104 	addi	sp,sp,4
    ccb4:	f800283a 	ret

0000ccb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ccb8:	defffe04 	addi	sp,sp,-8
    ccbc:	dfc00115 	stw	ra,4(sp)
    ccc0:	df000015 	stw	fp,0(sp)
    ccc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ccc8:	00800074 	movhi	r2,1
    cccc:	10b84c04 	addi	r2,r2,-7888
    ccd0:	10800017 	ldw	r2,0(r2)
    ccd4:	10000526 	beq	r2,zero,ccec <alt_get_errno+0x34>
    ccd8:	00800074 	movhi	r2,1
    ccdc:	10b84c04 	addi	r2,r2,-7888
    cce0:	10800017 	ldw	r2,0(r2)
    cce4:	103ee83a 	callr	r2
    cce8:	00000206 	br	ccf4 <alt_get_errno+0x3c>
    ccec:	00800074 	movhi	r2,1
    ccf0:	10b92d04 	addi	r2,r2,-6988
}
    ccf4:	e037883a 	mov	sp,fp
    ccf8:	dfc00117 	ldw	ra,4(sp)
    ccfc:	df000017 	ldw	fp,0(sp)
    cd00:	dec00204 	addi	sp,sp,8
    cd04:	f800283a 	ret

0000cd08 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    cd08:	defffa04 	addi	sp,sp,-24
    cd0c:	dfc00515 	stw	ra,20(sp)
    cd10:	df000415 	stw	fp,16(sp)
    cd14:	df000404 	addi	fp,sp,16
    cd18:	e13ffe15 	stw	r4,-8(fp)
    cd1c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    cd20:	e0bffe17 	ldw	r2,-8(fp)
    cd24:	10000326 	beq	r2,zero,cd34 <alt_dev_llist_insert+0x2c>
    cd28:	e0bffe17 	ldw	r2,-8(fp)
    cd2c:	10800217 	ldw	r2,8(r2)
    cd30:	1000051e 	bne	r2,zero,cd48 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    cd34:	000ccb80 	call	ccb8 <alt_get_errno>
    cd38:	00c00584 	movi	r3,22
    cd3c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    cd40:	00bffa84 	movi	r2,-22
    cd44:	00001306 	br	cd94 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    cd48:	e0bffe17 	ldw	r2,-8(fp)
    cd4c:	e0ffff17 	ldw	r3,-4(fp)
    cd50:	e0fffc15 	stw	r3,-16(fp)
    cd54:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cd58:	e0bffd17 	ldw	r2,-12(fp)
    cd5c:	e0fffc17 	ldw	r3,-16(fp)
    cd60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    cd64:	e0bffc17 	ldw	r2,-16(fp)
    cd68:	10c00017 	ldw	r3,0(r2)
    cd6c:	e0bffd17 	ldw	r2,-12(fp)
    cd70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cd74:	e0bffc17 	ldw	r2,-16(fp)
    cd78:	10800017 	ldw	r2,0(r2)
    cd7c:	e0fffd17 	ldw	r3,-12(fp)
    cd80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    cd84:	e0bffc17 	ldw	r2,-16(fp)
    cd88:	e0fffd17 	ldw	r3,-12(fp)
    cd8c:	10c00015 	stw	r3,0(r2)

  return 0;  
    cd90:	0005883a 	mov	r2,zero
}
    cd94:	e037883a 	mov	sp,fp
    cd98:	dfc00117 	ldw	ra,4(sp)
    cd9c:	df000017 	ldw	fp,0(sp)
    cda0:	dec00204 	addi	sp,sp,8
    cda4:	f800283a 	ret

0000cda8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    cda8:	defffe04 	addi	sp,sp,-8
    cdac:	dfc00115 	stw	ra,4(sp)
    cdb0:	df000015 	stw	fp,0(sp)
    cdb4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    cdb8:	0009883a 	mov	r4,zero
    cdbc:	01420004 	movi	r5,2048
    cdc0:	000d9440 	call	d944 <alt_icache_flush>
#endif
}
    cdc4:	e037883a 	mov	sp,fp
    cdc8:	dfc00117 	ldw	ra,4(sp)
    cdcc:	df000017 	ldw	fp,0(sp)
    cdd0:	dec00204 	addi	sp,sp,8
    cdd4:	f800283a 	ret

0000cdd8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cdd8:	defff904 	addi	sp,sp,-28
    cddc:	dfc00615 	stw	ra,24(sp)
    cde0:	df000515 	stw	fp,20(sp)
    cde4:	df000504 	addi	fp,sp,20
    cde8:	e13ffc15 	stw	r4,-16(fp)
    cdec:	e17ffd15 	stw	r5,-12(fp)
    cdf0:	e1bffe15 	stw	r6,-8(fp)
    cdf4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    cdf8:	e0800217 	ldw	r2,8(fp)
    cdfc:	d8800015 	stw	r2,0(sp)
    ce00:	e13ffc17 	ldw	r4,-16(fp)
    ce04:	e17ffd17 	ldw	r5,-12(fp)
    ce08:	e1bffe17 	ldw	r6,-8(fp)
    ce0c:	e1ffff17 	ldw	r7,-4(fp)
    ce10:	000cfb00 	call	cfb0 <alt_iic_isr_register>
}  
    ce14:	e037883a 	mov	sp,fp
    ce18:	dfc00117 	ldw	ra,4(sp)
    ce1c:	df000017 	ldw	fp,0(sp)
    ce20:	dec00204 	addi	sp,sp,8
    ce24:	f800283a 	ret

0000ce28 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ce28:	defff904 	addi	sp,sp,-28
    ce2c:	df000615 	stw	fp,24(sp)
    ce30:	df000604 	addi	fp,sp,24
    ce34:	e13ffe15 	stw	r4,-8(fp)
    ce38:	e17fff15 	stw	r5,-4(fp)
    ce3c:	e0bfff17 	ldw	r2,-4(fp)
    ce40:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce44:	0005303a 	rdctl	r2,status
    ce48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce4c:	e0fffb17 	ldw	r3,-20(fp)
    ce50:	00bfff84 	movi	r2,-2
    ce54:	1884703a 	and	r2,r3,r2
    ce58:	1001703a 	wrctl	status,r2
  
  return context;
    ce5c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ce60:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    ce64:	e0bffa17 	ldw	r2,-24(fp)
    ce68:	00c00044 	movi	r3,1
    ce6c:	1884983a 	sll	r2,r3,r2
    ce70:	1007883a 	mov	r3,r2
    ce74:	00800074 	movhi	r2,1
    ce78:	10b93104 	addi	r2,r2,-6972
    ce7c:	10800017 	ldw	r2,0(r2)
    ce80:	1886b03a 	or	r3,r3,r2
    ce84:	00800074 	movhi	r2,1
    ce88:	10b93104 	addi	r2,r2,-6972
    ce8c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ce90:	00800074 	movhi	r2,1
    ce94:	10b93104 	addi	r2,r2,-6972
    ce98:	10800017 	ldw	r2,0(r2)
    ce9c:	100170fa 	wrctl	ienable,r2
    cea0:	e0bffc17 	ldw	r2,-16(fp)
    cea4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cea8:	e0bffd17 	ldw	r2,-12(fp)
    ceac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ceb0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    ceb4:	e037883a 	mov	sp,fp
    ceb8:	df000017 	ldw	fp,0(sp)
    cebc:	dec00104 	addi	sp,sp,4
    cec0:	f800283a 	ret

0000cec4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    cec4:	defff904 	addi	sp,sp,-28
    cec8:	df000615 	stw	fp,24(sp)
    cecc:	df000604 	addi	fp,sp,24
    ced0:	e13ffe15 	stw	r4,-8(fp)
    ced4:	e17fff15 	stw	r5,-4(fp)
    ced8:	e0bfff17 	ldw	r2,-4(fp)
    cedc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cee0:	0005303a 	rdctl	r2,status
    cee4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cee8:	e0fffb17 	ldw	r3,-20(fp)
    ceec:	00bfff84 	movi	r2,-2
    cef0:	1884703a 	and	r2,r3,r2
    cef4:	1001703a 	wrctl	status,r2
  
  return context;
    cef8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cefc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    cf00:	e0bffa17 	ldw	r2,-24(fp)
    cf04:	00c00044 	movi	r3,1
    cf08:	1884983a 	sll	r2,r3,r2
    cf0c:	0084303a 	nor	r2,zero,r2
    cf10:	1007883a 	mov	r3,r2
    cf14:	00800074 	movhi	r2,1
    cf18:	10b93104 	addi	r2,r2,-6972
    cf1c:	10800017 	ldw	r2,0(r2)
    cf20:	1886703a 	and	r3,r3,r2
    cf24:	00800074 	movhi	r2,1
    cf28:	10b93104 	addi	r2,r2,-6972
    cf2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cf30:	00800074 	movhi	r2,1
    cf34:	10b93104 	addi	r2,r2,-6972
    cf38:	10800017 	ldw	r2,0(r2)
    cf3c:	100170fa 	wrctl	ienable,r2
    cf40:	e0bffc17 	ldw	r2,-16(fp)
    cf44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf48:	e0bffd17 	ldw	r2,-12(fp)
    cf4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cf50:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    cf54:	e037883a 	mov	sp,fp
    cf58:	df000017 	ldw	fp,0(sp)
    cf5c:	dec00104 	addi	sp,sp,4
    cf60:	f800283a 	ret

0000cf64 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    cf64:	defffc04 	addi	sp,sp,-16
    cf68:	df000315 	stw	fp,12(sp)
    cf6c:	df000304 	addi	fp,sp,12
    cf70:	e13ffe15 	stw	r4,-8(fp)
    cf74:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    cf78:	000530fa 	rdctl	r2,ienable
    cf7c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    cf80:	e0bfff17 	ldw	r2,-4(fp)
    cf84:	00c00044 	movi	r3,1
    cf88:	1884983a 	sll	r2,r3,r2
    cf8c:	1007883a 	mov	r3,r2
    cf90:	e0bffd17 	ldw	r2,-12(fp)
    cf94:	1884703a 	and	r2,r3,r2
    cf98:	1004c03a 	cmpne	r2,r2,zero
    cf9c:	10803fcc 	andi	r2,r2,255
}
    cfa0:	e037883a 	mov	sp,fp
    cfa4:	df000017 	ldw	fp,0(sp)
    cfa8:	dec00104 	addi	sp,sp,4
    cfac:	f800283a 	ret

0000cfb0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cfb0:	defff504 	addi	sp,sp,-44
    cfb4:	dfc00a15 	stw	ra,40(sp)
    cfb8:	df000915 	stw	fp,36(sp)
    cfbc:	df000904 	addi	fp,sp,36
    cfc0:	e13ffc15 	stw	r4,-16(fp)
    cfc4:	e17ffd15 	stw	r5,-12(fp)
    cfc8:	e1bffe15 	stw	r6,-8(fp)
    cfcc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    cfd0:	00bffa84 	movi	r2,-22
    cfd4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    cfd8:	e0bffd17 	ldw	r2,-12(fp)
    cfdc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    cfe0:	e0bff817 	ldw	r2,-32(fp)
    cfe4:	10800808 	cmpgei	r2,r2,32
    cfe8:	1000271e 	bne	r2,zero,d088 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cfec:	0005303a 	rdctl	r2,status
    cff0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cff4:	e0fffa17 	ldw	r3,-24(fp)
    cff8:	00bfff84 	movi	r2,-2
    cffc:	1884703a 	and	r2,r3,r2
    d000:	1001703a 	wrctl	status,r2
  
  return context;
    d004:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d008:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    d00c:	00c00074 	movhi	r3,1
    d010:	18f9a004 	addi	r3,r3,-6528
    d014:	e0bff817 	ldw	r2,-32(fp)
    d018:	100490fa 	slli	r2,r2,3
    d01c:	1885883a 	add	r2,r3,r2
    d020:	e0fffe17 	ldw	r3,-8(fp)
    d024:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    d028:	00c00074 	movhi	r3,1
    d02c:	18f9a004 	addi	r3,r3,-6528
    d030:	e0bff817 	ldw	r2,-32(fp)
    d034:	100490fa 	slli	r2,r2,3
    d038:	1885883a 	add	r2,r3,r2
    d03c:	10800104 	addi	r2,r2,4
    d040:	e0ffff17 	ldw	r3,-4(fp)
    d044:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d048:	e0bffe17 	ldw	r2,-8(fp)
    d04c:	10000526 	beq	r2,zero,d064 <alt_iic_isr_register+0xb4>
    d050:	e0bff817 	ldw	r2,-32(fp)
    d054:	e13ffc17 	ldw	r4,-16(fp)
    d058:	100b883a 	mov	r5,r2
    d05c:	000ce280 	call	ce28 <alt_ic_irq_enable>
    d060:	00000406 	br	d074 <alt_iic_isr_register+0xc4>
    d064:	e0bff817 	ldw	r2,-32(fp)
    d068:	e13ffc17 	ldw	r4,-16(fp)
    d06c:	100b883a 	mov	r5,r2
    d070:	000cec40 	call	cec4 <alt_ic_irq_disable>
    d074:	e0bff715 	stw	r2,-36(fp)
    d078:	e0bff917 	ldw	r2,-28(fp)
    d07c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d080:	e0bffb17 	ldw	r2,-20(fp)
    d084:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d088:	e0bff717 	ldw	r2,-36(fp)
}
    d08c:	e037883a 	mov	sp,fp
    d090:	dfc00117 	ldw	ra,4(sp)
    d094:	df000017 	ldw	fp,0(sp)
    d098:	dec00204 	addi	sp,sp,8
    d09c:	f800283a 	ret

0000d0a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d0a0:	defff804 	addi	sp,sp,-32
    d0a4:	dfc00715 	stw	ra,28(sp)
    d0a8:	df000615 	stw	fp,24(sp)
    d0ac:	dc000515 	stw	r16,20(sp)
    d0b0:	df000504 	addi	fp,sp,20
    d0b4:	e13ffc15 	stw	r4,-16(fp)
    d0b8:	e17ffd15 	stw	r5,-12(fp)
    d0bc:	e1bffe15 	stw	r6,-8(fp)
    d0c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d0c4:	e13ffd17 	ldw	r4,-12(fp)
    d0c8:	e17ffe17 	ldw	r5,-8(fp)
    d0cc:	e1bfff17 	ldw	r6,-4(fp)
    d0d0:	000d3380 	call	d338 <open>
    d0d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d0d8:	e0bffb17 	ldw	r2,-20(fp)
    d0dc:	10002216 	blt	r2,zero,d168 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    d0e0:	04000074 	movhi	r16,1
    d0e4:	8437d704 	addi	r16,r16,-8356
    d0e8:	e0bffb17 	ldw	r2,-20(fp)
    d0ec:	1009883a 	mov	r4,r2
    d0f0:	01400304 	movi	r5,12
    d0f4:	000b5d00 	call	b5d0 <__mulsi3>
    d0f8:	8085883a 	add	r2,r16,r2
    d0fc:	10c00017 	ldw	r3,0(r2)
    d100:	e0bffc17 	ldw	r2,-16(fp)
    d104:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d108:	04000074 	movhi	r16,1
    d10c:	8437d704 	addi	r16,r16,-8356
    d110:	e0bffb17 	ldw	r2,-20(fp)
    d114:	1009883a 	mov	r4,r2
    d118:	01400304 	movi	r5,12
    d11c:	000b5d00 	call	b5d0 <__mulsi3>
    d120:	8085883a 	add	r2,r16,r2
    d124:	10800104 	addi	r2,r2,4
    d128:	10c00017 	ldw	r3,0(r2)
    d12c:	e0bffc17 	ldw	r2,-16(fp)
    d130:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d134:	04000074 	movhi	r16,1
    d138:	8437d704 	addi	r16,r16,-8356
    d13c:	e0bffb17 	ldw	r2,-20(fp)
    d140:	1009883a 	mov	r4,r2
    d144:	01400304 	movi	r5,12
    d148:	000b5d00 	call	b5d0 <__mulsi3>
    d14c:	8085883a 	add	r2,r16,r2
    d150:	10800204 	addi	r2,r2,8
    d154:	10c00017 	ldw	r3,0(r2)
    d158:	e0bffc17 	ldw	r2,-16(fp)
    d15c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d160:	e13ffb17 	ldw	r4,-20(fp)
    d164:	000d4900 	call	d490 <alt_release_fd>
  }
} 
    d168:	e037883a 	mov	sp,fp
    d16c:	dfc00217 	ldw	ra,8(sp)
    d170:	df000117 	ldw	fp,4(sp)
    d174:	dc000017 	ldw	r16,0(sp)
    d178:	dec00304 	addi	sp,sp,12
    d17c:	f800283a 	ret

0000d180 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d180:	defffb04 	addi	sp,sp,-20
    d184:	dfc00415 	stw	ra,16(sp)
    d188:	df000315 	stw	fp,12(sp)
    d18c:	df000304 	addi	fp,sp,12
    d190:	e13ffd15 	stw	r4,-12(fp)
    d194:	e17ffe15 	stw	r5,-8(fp)
    d198:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d19c:	01000074 	movhi	r4,1
    d1a0:	2137da04 	addi	r4,r4,-8344
    d1a4:	e17ffd17 	ldw	r5,-12(fp)
    d1a8:	01800044 	movi	r6,1
    d1ac:	01c07fc4 	movi	r7,511
    d1b0:	000d0a00 	call	d0a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d1b4:	01000074 	movhi	r4,1
    d1b8:	2137d704 	addi	r4,r4,-8356
    d1bc:	e17ffe17 	ldw	r5,-8(fp)
    d1c0:	000d883a 	mov	r6,zero
    d1c4:	01c07fc4 	movi	r7,511
    d1c8:	000d0a00 	call	d0a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d1cc:	01000074 	movhi	r4,1
    d1d0:	2137dd04 	addi	r4,r4,-8332
    d1d4:	e17fff17 	ldw	r5,-4(fp)
    d1d8:	01800044 	movi	r6,1
    d1dc:	01c07fc4 	movi	r7,511
    d1e0:	000d0a00 	call	d0a0 <alt_open_fd>
}  
    d1e4:	e037883a 	mov	sp,fp
    d1e8:	dfc00117 	ldw	ra,4(sp)
    d1ec:	df000017 	ldw	fp,0(sp)
    d1f0:	dec00204 	addi	sp,sp,8
    d1f4:	f800283a 	ret

0000d1f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d1f8:	defffe04 	addi	sp,sp,-8
    d1fc:	dfc00115 	stw	ra,4(sp)
    d200:	df000015 	stw	fp,0(sp)
    d204:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d208:	00800074 	movhi	r2,1
    d20c:	10b84c04 	addi	r2,r2,-7888
    d210:	10800017 	ldw	r2,0(r2)
    d214:	10000526 	beq	r2,zero,d22c <alt_get_errno+0x34>
    d218:	00800074 	movhi	r2,1
    d21c:	10b84c04 	addi	r2,r2,-7888
    d220:	10800017 	ldw	r2,0(r2)
    d224:	103ee83a 	callr	r2
    d228:	00000206 	br	d234 <alt_get_errno+0x3c>
    d22c:	00800074 	movhi	r2,1
    d230:	10b92d04 	addi	r2,r2,-6988
}
    d234:	e037883a 	mov	sp,fp
    d238:	dfc00117 	ldw	ra,4(sp)
    d23c:	df000017 	ldw	fp,0(sp)
    d240:	dec00204 	addi	sp,sp,8
    d244:	f800283a 	ret

0000d248 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d248:	defffb04 	addi	sp,sp,-20
    d24c:	dfc00415 	stw	ra,16(sp)
    d250:	df000315 	stw	fp,12(sp)
    d254:	dc000215 	stw	r16,8(sp)
    d258:	df000204 	addi	fp,sp,8
    d25c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d260:	e0bfff17 	ldw	r2,-4(fp)
    d264:	10800217 	ldw	r2,8(r2)
    d268:	10d00034 	orhi	r3,r2,16384
    d26c:	e0bfff17 	ldw	r2,-4(fp)
    d270:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d274:	e03ffe15 	stw	zero,-8(fp)
    d278:	00002206 	br	d304 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d27c:	04000074 	movhi	r16,1
    d280:	8437d704 	addi	r16,r16,-8356
    d284:	e0bffe17 	ldw	r2,-8(fp)
    d288:	1009883a 	mov	r4,r2
    d28c:	01400304 	movi	r5,12
    d290:	000b5d00 	call	b5d0 <__mulsi3>
    d294:	8085883a 	add	r2,r16,r2
    d298:	10c00017 	ldw	r3,0(r2)
    d29c:	e0bfff17 	ldw	r2,-4(fp)
    d2a0:	10800017 	ldw	r2,0(r2)
    d2a4:	1880141e 	bne	r3,r2,d2f8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d2a8:	04000074 	movhi	r16,1
    d2ac:	8437d704 	addi	r16,r16,-8356
    d2b0:	e0bffe17 	ldw	r2,-8(fp)
    d2b4:	1009883a 	mov	r4,r2
    d2b8:	01400304 	movi	r5,12
    d2bc:	000b5d00 	call	b5d0 <__mulsi3>
    d2c0:	8085883a 	add	r2,r16,r2
    d2c4:	10800204 	addi	r2,r2,8
    d2c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d2cc:	10000a0e 	bge	r2,zero,d2f8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    d2d0:	e13ffe17 	ldw	r4,-8(fp)
    d2d4:	01400304 	movi	r5,12
    d2d8:	000b5d00 	call	b5d0 <__mulsi3>
    d2dc:	00c00074 	movhi	r3,1
    d2e0:	18f7d704 	addi	r3,r3,-8356
    d2e4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d2e8:	e0bfff17 	ldw	r2,-4(fp)
    d2ec:	18800226 	beq	r3,r2,d2f8 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d2f0:	00bffcc4 	movi	r2,-13
    d2f4:	00000a06 	br	d320 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d2f8:	e0bffe17 	ldw	r2,-8(fp)
    d2fc:	10800044 	addi	r2,r2,1
    d300:	e0bffe15 	stw	r2,-8(fp)
    d304:	00800074 	movhi	r2,1
    d308:	10b84b04 	addi	r2,r2,-7892
    d30c:	10800017 	ldw	r2,0(r2)
    d310:	1007883a 	mov	r3,r2
    d314:	e0bffe17 	ldw	r2,-8(fp)
    d318:	18bfd82e 	bgeu	r3,r2,d27c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d31c:	0005883a 	mov	r2,zero
}
    d320:	e037883a 	mov	sp,fp
    d324:	dfc00217 	ldw	ra,8(sp)
    d328:	df000117 	ldw	fp,4(sp)
    d32c:	dc000017 	ldw	r16,0(sp)
    d330:	dec00304 	addi	sp,sp,12
    d334:	f800283a 	ret

0000d338 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d338:	defff604 	addi	sp,sp,-40
    d33c:	dfc00915 	stw	ra,36(sp)
    d340:	df000815 	stw	fp,32(sp)
    d344:	df000804 	addi	fp,sp,32
    d348:	e13ffd15 	stw	r4,-12(fp)
    d34c:	e17ffe15 	stw	r5,-8(fp)
    d350:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d354:	00bfffc4 	movi	r2,-1
    d358:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    d35c:	00bffb44 	movi	r2,-19
    d360:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    d364:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d368:	e13ffd17 	ldw	r4,-12(fp)
    d36c:	01400074 	movhi	r5,1
    d370:	29784904 	addi	r5,r5,-7900
    d374:	000d6cc0 	call	d6cc <alt_find_dev>
    d378:	e0bff815 	stw	r2,-32(fp)
    d37c:	e0bff817 	ldw	r2,-32(fp)
    d380:	1000051e 	bne	r2,zero,d398 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d384:	e13ffd17 	ldw	r4,-12(fp)
    d388:	000d75c0 	call	d75c <alt_find_file>
    d38c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    d390:	00800044 	movi	r2,1
    d394:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d398:	e0bff817 	ldw	r2,-32(fp)
    d39c:	10002a26 	beq	r2,zero,d448 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d3a0:	e13ff817 	ldw	r4,-32(fp)
    d3a4:	000d8700 	call	d870 <alt_get_fd>
    d3a8:	e0bff915 	stw	r2,-28(fp)
    d3ac:	e0bff917 	ldw	r2,-28(fp)
    d3b0:	1000030e 	bge	r2,zero,d3c0 <open+0x88>
    {
      status = index;
    d3b4:	e0bff917 	ldw	r2,-28(fp)
    d3b8:	e0bffa15 	stw	r2,-24(fp)
    d3bc:	00002406 	br	d450 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    d3c0:	e13ff917 	ldw	r4,-28(fp)
    d3c4:	01400304 	movi	r5,12
    d3c8:	000b5d00 	call	b5d0 <__mulsi3>
    d3cc:	00c00074 	movhi	r3,1
    d3d0:	18f7d704 	addi	r3,r3,-8356
    d3d4:	10c5883a 	add	r2,r2,r3
    d3d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d3dc:	e0fffe17 	ldw	r3,-8(fp)
    d3e0:	00900034 	movhi	r2,16384
    d3e4:	10bfffc4 	addi	r2,r2,-1
    d3e8:	1886703a 	and	r3,r3,r2
    d3ec:	e0bffc17 	ldw	r2,-16(fp)
    d3f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d3f4:	e0bffb17 	ldw	r2,-20(fp)
    d3f8:	1000051e 	bne	r2,zero,d410 <open+0xd8>
    d3fc:	e13ffc17 	ldw	r4,-16(fp)
    d400:	000d2480 	call	d248 <alt_file_locked>
    d404:	e0bffa15 	stw	r2,-24(fp)
    d408:	e0bffa17 	ldw	r2,-24(fp)
    d40c:	10001016 	blt	r2,zero,d450 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d410:	e0bff817 	ldw	r2,-32(fp)
    d414:	10800317 	ldw	r2,12(r2)
    d418:	10000826 	beq	r2,zero,d43c <open+0x104>
    d41c:	e0bff817 	ldw	r2,-32(fp)
    d420:	10800317 	ldw	r2,12(r2)
    d424:	e13ffc17 	ldw	r4,-16(fp)
    d428:	e17ffd17 	ldw	r5,-12(fp)
    d42c:	e1bffe17 	ldw	r6,-8(fp)
    d430:	e1ffff17 	ldw	r7,-4(fp)
    d434:	103ee83a 	callr	r2
    d438:	00000106 	br	d440 <open+0x108>
    d43c:	0005883a 	mov	r2,zero
    d440:	e0bffa15 	stw	r2,-24(fp)
    d444:	00000206 	br	d450 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d448:	00bffb44 	movi	r2,-19
    d44c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d450:	e0bffa17 	ldw	r2,-24(fp)
    d454:	1000080e 	bge	r2,zero,d478 <open+0x140>
  {
    alt_release_fd (index);  
    d458:	e13ff917 	ldw	r4,-28(fp)
    d45c:	000d4900 	call	d490 <alt_release_fd>
    ALT_ERRNO = -status;
    d460:	000d1f80 	call	d1f8 <alt_get_errno>
    d464:	e0fffa17 	ldw	r3,-24(fp)
    d468:	00c7c83a 	sub	r3,zero,r3
    d46c:	10c00015 	stw	r3,0(r2)
    return -1;
    d470:	00bfffc4 	movi	r2,-1
    d474:	00000106 	br	d47c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    d478:	e0bff917 	ldw	r2,-28(fp)
}
    d47c:	e037883a 	mov	sp,fp
    d480:	dfc00117 	ldw	ra,4(sp)
    d484:	df000017 	ldw	fp,0(sp)
    d488:	dec00204 	addi	sp,sp,8
    d48c:	f800283a 	ret

0000d490 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d490:	defffc04 	addi	sp,sp,-16
    d494:	dfc00315 	stw	ra,12(sp)
    d498:	df000215 	stw	fp,8(sp)
    d49c:	dc000115 	stw	r16,4(sp)
    d4a0:	df000104 	addi	fp,sp,4
    d4a4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d4a8:	e0bfff17 	ldw	r2,-4(fp)
    d4ac:	108000d0 	cmplti	r2,r2,3
    d4b0:	1000111e 	bne	r2,zero,d4f8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    d4b4:	04000074 	movhi	r16,1
    d4b8:	8437d704 	addi	r16,r16,-8356
    d4bc:	e0bfff17 	ldw	r2,-4(fp)
    d4c0:	1009883a 	mov	r4,r2
    d4c4:	01400304 	movi	r5,12
    d4c8:	000b5d00 	call	b5d0 <__mulsi3>
    d4cc:	8085883a 	add	r2,r16,r2
    d4d0:	10800204 	addi	r2,r2,8
    d4d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d4d8:	04000074 	movhi	r16,1
    d4dc:	8437d704 	addi	r16,r16,-8356
    d4e0:	e0bfff17 	ldw	r2,-4(fp)
    d4e4:	1009883a 	mov	r4,r2
    d4e8:	01400304 	movi	r5,12
    d4ec:	000b5d00 	call	b5d0 <__mulsi3>
    d4f0:	8085883a 	add	r2,r16,r2
    d4f4:	10000015 	stw	zero,0(r2)
  }
}
    d4f8:	e037883a 	mov	sp,fp
    d4fc:	dfc00217 	ldw	ra,8(sp)
    d500:	df000117 	ldw	fp,4(sp)
    d504:	dc000017 	ldw	r16,0(sp)
    d508:	dec00304 	addi	sp,sp,12
    d50c:	f800283a 	ret

0000d510 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    d510:	defffa04 	addi	sp,sp,-24
    d514:	df000515 	stw	fp,20(sp)
    d518:	df000504 	addi	fp,sp,20
    d51c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d520:	0005303a 	rdctl	r2,status
    d524:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d528:	e0fffc17 	ldw	r3,-16(fp)
    d52c:	00bfff84 	movi	r2,-2
    d530:	1884703a 	and	r2,r3,r2
    d534:	1001703a 	wrctl	status,r2
  
  return context;
    d538:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    d53c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    d540:	e0bfff17 	ldw	r2,-4(fp)
    d544:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d548:	e0bffd17 	ldw	r2,-12(fp)
    d54c:	10800017 	ldw	r2,0(r2)
    d550:	e0fffd17 	ldw	r3,-12(fp)
    d554:	18c00117 	ldw	r3,4(r3)
    d558:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    d55c:	e0bffd17 	ldw	r2,-12(fp)
    d560:	10800117 	ldw	r2,4(r2)
    d564:	e0fffd17 	ldw	r3,-12(fp)
    d568:	18c00017 	ldw	r3,0(r3)
    d56c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d570:	e0bffd17 	ldw	r2,-12(fp)
    d574:	e0fffd17 	ldw	r3,-12(fp)
    d578:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    d57c:	e0bffd17 	ldw	r2,-12(fp)
    d580:	e0fffd17 	ldw	r3,-12(fp)
    d584:	10c00015 	stw	r3,0(r2)
    d588:	e0bffb17 	ldw	r2,-20(fp)
    d58c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d590:	e0bffe17 	ldw	r2,-8(fp)
    d594:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    d598:	e037883a 	mov	sp,fp
    d59c:	df000017 	ldw	fp,0(sp)
    d5a0:	dec00104 	addi	sp,sp,4
    d5a4:	f800283a 	ret

0000d5a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d5a8:	defffb04 	addi	sp,sp,-20
    d5ac:	dfc00415 	stw	ra,16(sp)
    d5b0:	df000315 	stw	fp,12(sp)
    d5b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d5b8:	d0a01717 	ldw	r2,-32676(gp)
    d5bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d5c0:	d0a0fc17 	ldw	r2,-31760(gp)
    d5c4:	10800044 	addi	r2,r2,1
    d5c8:	d0a0fc15 	stw	r2,-31760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d5cc:	00002e06 	br	d688 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    d5d0:	e0bffd17 	ldw	r2,-12(fp)
    d5d4:	10800017 	ldw	r2,0(r2)
    d5d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d5dc:	e0bffd17 	ldw	r2,-12(fp)
    d5e0:	10800403 	ldbu	r2,16(r2)
    d5e4:	10803fcc 	andi	r2,r2,255
    d5e8:	10000426 	beq	r2,zero,d5fc <alt_tick+0x54>
    d5ec:	d0a0fc17 	ldw	r2,-31760(gp)
    d5f0:	1000021e 	bne	r2,zero,d5fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
    d5f4:	e0bffd17 	ldw	r2,-12(fp)
    d5f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d5fc:	e0bffd17 	ldw	r2,-12(fp)
    d600:	10800217 	ldw	r2,8(r2)
    d604:	d0e0fc17 	ldw	r3,-31760(gp)
    d608:	18801d36 	bltu	r3,r2,d680 <alt_tick+0xd8>
    d60c:	e0bffd17 	ldw	r2,-12(fp)
    d610:	10800403 	ldbu	r2,16(r2)
    d614:	10803fcc 	andi	r2,r2,255
    d618:	1000191e 	bne	r2,zero,d680 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    d61c:	e0bffd17 	ldw	r2,-12(fp)
    d620:	10c00317 	ldw	r3,12(r2)
    d624:	e0bffd17 	ldw	r2,-12(fp)
    d628:	10800517 	ldw	r2,20(r2)
    d62c:	1009883a 	mov	r4,r2
    d630:	183ee83a 	callr	r3
    d634:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d638:	e0bfff17 	ldw	r2,-4(fp)
    d63c:	1000031e 	bne	r2,zero,d64c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    d640:	e13ffd17 	ldw	r4,-12(fp)
    d644:	000d5100 	call	d510 <alt_alarm_stop>
    d648:	00000d06 	br	d680 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    d64c:	e0bffd17 	ldw	r2,-12(fp)
    d650:	10c00217 	ldw	r3,8(r2)
    d654:	e0bfff17 	ldw	r2,-4(fp)
    d658:	1887883a 	add	r3,r3,r2
    d65c:	e0bffd17 	ldw	r2,-12(fp)
    d660:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d664:	e0bffd17 	ldw	r2,-12(fp)
    d668:	10c00217 	ldw	r3,8(r2)
    d66c:	d0a0fc17 	ldw	r2,-31760(gp)
    d670:	1880032e 	bgeu	r3,r2,d680 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    d674:	e0bffd17 	ldw	r2,-12(fp)
    d678:	00c00044 	movi	r3,1
    d67c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    d680:	e0bffe17 	ldw	r2,-8(fp)
    d684:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d688:	e0fffd17 	ldw	r3,-12(fp)
    d68c:	d0a01704 	addi	r2,gp,-32676
    d690:	18bfcf1e 	bne	r3,r2,d5d0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    d694:	0001883a 	nop
}
    d698:	e037883a 	mov	sp,fp
    d69c:	dfc00117 	ldw	ra,4(sp)
    d6a0:	df000017 	ldw	fp,0(sp)
    d6a4:	dec00204 	addi	sp,sp,8
    d6a8:	f800283a 	ret

0000d6ac <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    d6ac:	deffff04 	addi	sp,sp,-4
    d6b0:	df000015 	stw	fp,0(sp)
    d6b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d6b8:	000170fa 	wrctl	ienable,zero
}
    d6bc:	e037883a 	mov	sp,fp
    d6c0:	df000017 	ldw	fp,0(sp)
    d6c4:	dec00104 	addi	sp,sp,4
    d6c8:	f800283a 	ret

0000d6cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d6cc:	defffa04 	addi	sp,sp,-24
    d6d0:	dfc00515 	stw	ra,20(sp)
    d6d4:	df000415 	stw	fp,16(sp)
    d6d8:	df000404 	addi	fp,sp,16
    d6dc:	e13ffe15 	stw	r4,-8(fp)
    d6e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d6e4:	e0bfff17 	ldw	r2,-4(fp)
    d6e8:	10800017 	ldw	r2,0(r2)
    d6ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d6f0:	e13ffe17 	ldw	r4,-8(fp)
    d6f4:	000b7bc0 	call	b7bc <strlen>
    d6f8:	10800044 	addi	r2,r2,1
    d6fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d700:	00000d06 	br	d738 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d704:	e0bffc17 	ldw	r2,-16(fp)
    d708:	10c00217 	ldw	r3,8(r2)
    d70c:	e0bffd17 	ldw	r2,-12(fp)
    d710:	1809883a 	mov	r4,r3
    d714:	e17ffe17 	ldw	r5,-8(fp)
    d718:	100d883a 	mov	r6,r2
    d71c:	000d9f00 	call	d9f0 <memcmp>
    d720:	1000021e 	bne	r2,zero,d72c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d724:	e0bffc17 	ldw	r2,-16(fp)
    d728:	00000706 	br	d748 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d72c:	e0bffc17 	ldw	r2,-16(fp)
    d730:	10800017 	ldw	r2,0(r2)
    d734:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d738:	e0fffc17 	ldw	r3,-16(fp)
    d73c:	e0bfff17 	ldw	r2,-4(fp)
    d740:	18bff01e 	bne	r3,r2,d704 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d744:	0005883a 	mov	r2,zero
}
    d748:	e037883a 	mov	sp,fp
    d74c:	dfc00117 	ldw	ra,4(sp)
    d750:	df000017 	ldw	fp,0(sp)
    d754:	dec00204 	addi	sp,sp,8
    d758:	f800283a 	ret

0000d75c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d75c:	defffb04 	addi	sp,sp,-20
    d760:	dfc00415 	stw	ra,16(sp)
    d764:	df000315 	stw	fp,12(sp)
    d768:	df000304 	addi	fp,sp,12
    d76c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d770:	00800074 	movhi	r2,1
    d774:	10b84704 	addi	r2,r2,-7908
    d778:	10800017 	ldw	r2,0(r2)
    d77c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d780:	00003106 	br	d848 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    d784:	e0bffd17 	ldw	r2,-12(fp)
    d788:	10800217 	ldw	r2,8(r2)
    d78c:	1009883a 	mov	r4,r2
    d790:	000b7bc0 	call	b7bc <strlen>
    d794:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    d798:	e0bffd17 	ldw	r2,-12(fp)
    d79c:	10c00217 	ldw	r3,8(r2)
    d7a0:	e0bffe17 	ldw	r2,-8(fp)
    d7a4:	10bfffc4 	addi	r2,r2,-1
    d7a8:	1885883a 	add	r2,r3,r2
    d7ac:	10800003 	ldbu	r2,0(r2)
    d7b0:	10803fcc 	andi	r2,r2,255
    d7b4:	1080201c 	xori	r2,r2,128
    d7b8:	10bfe004 	addi	r2,r2,-128
    d7bc:	10800bd8 	cmpnei	r2,r2,47
    d7c0:	1000031e 	bne	r2,zero,d7d0 <alt_find_file+0x74>
    {
      len -= 1;
    d7c4:	e0bffe17 	ldw	r2,-8(fp)
    d7c8:	10bfffc4 	addi	r2,r2,-1
    d7cc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d7d0:	e0bffe17 	ldw	r2,-8(fp)
    d7d4:	e0ffff17 	ldw	r3,-4(fp)
    d7d8:	1885883a 	add	r2,r3,r2
    d7dc:	10800003 	ldbu	r2,0(r2)
    d7e0:	10803fcc 	andi	r2,r2,255
    d7e4:	1080201c 	xori	r2,r2,128
    d7e8:	10bfe004 	addi	r2,r2,-128
    d7ec:	10800be0 	cmpeqi	r2,r2,47
    d7f0:	1000081e 	bne	r2,zero,d814 <alt_find_file+0xb8>
    d7f4:	e0bffe17 	ldw	r2,-8(fp)
    d7f8:	e0ffff17 	ldw	r3,-4(fp)
    d7fc:	1885883a 	add	r2,r3,r2
    d800:	10800003 	ldbu	r2,0(r2)
    d804:	10803fcc 	andi	r2,r2,255
    d808:	1080201c 	xori	r2,r2,128
    d80c:	10bfe004 	addi	r2,r2,-128
    d810:	10000a1e 	bne	r2,zero,d83c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    d814:	e0bffd17 	ldw	r2,-12(fp)
    d818:	10c00217 	ldw	r3,8(r2)
    d81c:	e0bffe17 	ldw	r2,-8(fp)
    d820:	1809883a 	mov	r4,r3
    d824:	e17fff17 	ldw	r5,-4(fp)
    d828:	100d883a 	mov	r6,r2
    d82c:	000d9f00 	call	d9f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d830:	1000021e 	bne	r2,zero,d83c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d834:	e0bffd17 	ldw	r2,-12(fp)
    d838:	00000806 	br	d85c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    d83c:	e0bffd17 	ldw	r2,-12(fp)
    d840:	10800017 	ldw	r2,0(r2)
    d844:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d848:	e0fffd17 	ldw	r3,-12(fp)
    d84c:	00800074 	movhi	r2,1
    d850:	10b84704 	addi	r2,r2,-7908
    d854:	18bfcb1e 	bne	r3,r2,d784 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d858:	0005883a 	mov	r2,zero
}
    d85c:	e037883a 	mov	sp,fp
    d860:	dfc00117 	ldw	ra,4(sp)
    d864:	df000017 	ldw	fp,0(sp)
    d868:	dec00204 	addi	sp,sp,8
    d86c:	f800283a 	ret

0000d870 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d870:	defffa04 	addi	sp,sp,-24
    d874:	dfc00515 	stw	ra,20(sp)
    d878:	df000415 	stw	fp,16(sp)
    d87c:	dc000315 	stw	r16,12(sp)
    d880:	df000304 	addi	fp,sp,12
    d884:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d888:	00bffa04 	movi	r2,-24
    d88c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d890:	e03ffd15 	stw	zero,-12(fp)
    d894:	00002106 	br	d91c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    d898:	04000074 	movhi	r16,1
    d89c:	8437d704 	addi	r16,r16,-8356
    d8a0:	e0bffd17 	ldw	r2,-12(fp)
    d8a4:	1009883a 	mov	r4,r2
    d8a8:	01400304 	movi	r5,12
    d8ac:	000b5d00 	call	b5d0 <__mulsi3>
    d8b0:	8085883a 	add	r2,r16,r2
    d8b4:	10800017 	ldw	r2,0(r2)
    d8b8:	1000151e 	bne	r2,zero,d910 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    d8bc:	04000074 	movhi	r16,1
    d8c0:	8437d704 	addi	r16,r16,-8356
    d8c4:	e0bffd17 	ldw	r2,-12(fp)
    d8c8:	1009883a 	mov	r4,r2
    d8cc:	01400304 	movi	r5,12
    d8d0:	000b5d00 	call	b5d0 <__mulsi3>
    d8d4:	8085883a 	add	r2,r16,r2
    d8d8:	e0ffff17 	ldw	r3,-4(fp)
    d8dc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    d8e0:	00800074 	movhi	r2,1
    d8e4:	10b84b04 	addi	r2,r2,-7892
    d8e8:	10c00017 	ldw	r3,0(r2)
    d8ec:	e0bffd17 	ldw	r2,-12(fp)
    d8f0:	1880040e 	bge	r3,r2,d904 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    d8f4:	00800074 	movhi	r2,1
    d8f8:	10b84b04 	addi	r2,r2,-7892
    d8fc:	e0fffd17 	ldw	r3,-12(fp)
    d900:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    d904:	e0bffd17 	ldw	r2,-12(fp)
    d908:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    d90c:	00000606 	br	d928 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d910:	e0bffd17 	ldw	r2,-12(fp)
    d914:	10800044 	addi	r2,r2,1
    d918:	e0bffd15 	stw	r2,-12(fp)
    d91c:	e0bffd17 	ldw	r2,-12(fp)
    d920:	10800810 	cmplti	r2,r2,32
    d924:	103fdc1e 	bne	r2,zero,d898 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d928:	e0bffe17 	ldw	r2,-8(fp)
}
    d92c:	e037883a 	mov	sp,fp
    d930:	dfc00217 	ldw	ra,8(sp)
    d934:	df000117 	ldw	fp,4(sp)
    d938:	dc000017 	ldw	r16,0(sp)
    d93c:	dec00304 	addi	sp,sp,12
    d940:	f800283a 	ret

0000d944 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    d944:	defffb04 	addi	sp,sp,-20
    d948:	df000415 	stw	fp,16(sp)
    d94c:	df000404 	addi	fp,sp,16
    d950:	e13ffe15 	stw	r4,-8(fp)
    d954:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    d958:	e0bfff17 	ldw	r2,-4(fp)
    d95c:	10820070 	cmpltui	r2,r2,2049
    d960:	1000021e 	bne	r2,zero,d96c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    d964:	00820004 	movi	r2,2048
    d968:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    d96c:	e0fffe17 	ldw	r3,-8(fp)
    d970:	e0bfff17 	ldw	r2,-4(fp)
    d974:	1885883a 	add	r2,r3,r2
    d978:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d97c:	e0bffe17 	ldw	r2,-8(fp)
    d980:	e0bffc15 	stw	r2,-16(fp)
    d984:	00000506 	br	d99c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    d988:	e0bffc17 	ldw	r2,-16(fp)
    d98c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d990:	e0bffc17 	ldw	r2,-16(fp)
    d994:	10800804 	addi	r2,r2,32
    d998:	e0bffc15 	stw	r2,-16(fp)
    d99c:	e0fffc17 	ldw	r3,-16(fp)
    d9a0:	e0bffd17 	ldw	r2,-12(fp)
    d9a4:	18bff836 	bltu	r3,r2,d988 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    d9a8:	e0bffe17 	ldw	r2,-8(fp)
    d9ac:	108007cc 	andi	r2,r2,31
    d9b0:	10000226 	beq	r2,zero,d9bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    d9b4:	e0bffc17 	ldw	r2,-16(fp)
    d9b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    d9bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    d9c0:	e037883a 	mov	sp,fp
    d9c4:	df000017 	ldw	fp,0(sp)
    d9c8:	dec00104 	addi	sp,sp,4
    d9cc:	f800283a 	ret

0000d9d0 <exit>:
    d9d0:	defffe04 	addi	sp,sp,-8
    d9d4:	000b883a 	mov	r5,zero
    d9d8:	dc000015 	stw	r16,0(sp)
    d9dc:	dfc00115 	stw	ra,4(sp)
    d9e0:	2021883a 	mov	r16,r4
    d9e4:	000da380 	call	da38 <__call_exitprocs>
    d9e8:	8009883a 	mov	r4,r16
    d9ec:	000dc100 	call	dc10 <_exit>

0000d9f0 <memcmp>:
    d9f0:	30000d26 	beq	r6,zero,da28 <memcmp+0x38>
    d9f4:	20c00003 	ldbu	r3,0(r4)
    d9f8:	28800003 	ldbu	r2,0(r5)
    d9fc:	18800c1e 	bne	r3,r2,da30 <memcmp+0x40>
    da00:	31bfff84 	addi	r6,r6,-2
    da04:	01ffffc4 	movi	r7,-1
    da08:	00000406 	br	da1c <memcmp+0x2c>
    da0c:	20c00003 	ldbu	r3,0(r4)
    da10:	28800003 	ldbu	r2,0(r5)
    da14:	31bfffc4 	addi	r6,r6,-1
    da18:	1880051e 	bne	r3,r2,da30 <memcmp+0x40>
    da1c:	21000044 	addi	r4,r4,1
    da20:	29400044 	addi	r5,r5,1
    da24:	31fff91e 	bne	r6,r7,da0c <memcmp+0x1c>
    da28:	0005883a 	mov	r2,zero
    da2c:	f800283a 	ret
    da30:	1885c83a 	sub	r2,r3,r2
    da34:	f800283a 	ret

0000da38 <__call_exitprocs>:
    da38:	00800074 	movhi	r2,1
    da3c:	10b84504 	addi	r2,r2,-7916
    da40:	10800017 	ldw	r2,0(r2)
    da44:	defff204 	addi	sp,sp,-56
    da48:	df000c15 	stw	fp,48(sp)
    da4c:	d8800015 	stw	r2,0(sp)
    da50:	10800c04 	addi	r2,r2,48
    da54:	dd400915 	stw	r21,36(sp)
    da58:	dfc00d15 	stw	ra,52(sp)
    da5c:	ddc00b15 	stw	r23,44(sp)
    da60:	dd800a15 	stw	r22,40(sp)
    da64:	dd000815 	stw	r20,32(sp)
    da68:	dcc00715 	stw	r19,28(sp)
    da6c:	dc800615 	stw	r18,24(sp)
    da70:	dc400515 	stw	r17,20(sp)
    da74:	dc000415 	stw	r16,16(sp)
    da78:	d9000115 	stw	r4,4(sp)
    da7c:	2839883a 	mov	fp,r5
    da80:	d8800215 	stw	r2,8(sp)
    da84:	057fffc4 	movi	r21,-1
    da88:	d8800017 	ldw	r2,0(sp)
    da8c:	dd800217 	ldw	r22,8(sp)
    da90:	15c00c17 	ldw	r23,48(r2)
    da94:	b8001b26 	beq	r23,zero,db04 <__call_exitprocs+0xcc>
    da98:	b9000117 	ldw	r4,4(r23)
    da9c:	bd002217 	ldw	r20,136(r23)
    daa0:	243fffc4 	addi	r16,r4,-1
    daa4:	80001416 	blt	r16,zero,daf8 <__call_exitprocs+0xc0>
    daa8:	244007c4 	addi	r17,r4,31
    daac:	21000044 	addi	r4,r4,1
    dab0:	8c63883a 	add	r17,r17,r17
    dab4:	8427883a 	add	r19,r16,r16
    dab8:	2109883a 	add	r4,r4,r4
    dabc:	8c63883a 	add	r17,r17,r17
    dac0:	9ce7883a 	add	r19,r19,r19
    dac4:	2109883a 	add	r4,r4,r4
    dac8:	a463883a 	add	r17,r20,r17
    dacc:	a4e7883a 	add	r19,r20,r19
    dad0:	b925883a 	add	r18,r23,r4
    dad4:	e0001726 	beq	fp,zero,db34 <__call_exitprocs+0xfc>
    dad8:	a0000226 	beq	r20,zero,dae4 <__call_exitprocs+0xac>
    dadc:	89400017 	ldw	r5,0(r17)
    dae0:	2f001426 	beq	r5,fp,db34 <__call_exitprocs+0xfc>
    dae4:	843fffc4 	addi	r16,r16,-1
    dae8:	8c7fff04 	addi	r17,r17,-4
    daec:	9cffff04 	addi	r19,r19,-4
    daf0:	94bfff04 	addi	r18,r18,-4
    daf4:	857ff71e 	bne	r16,r21,dad4 <__call_exitprocs+0x9c>
    daf8:	00800034 	movhi	r2,0
    dafc:	10800004 	addi	r2,r2,0
    db00:	1000311e 	bne	r2,zero,dbc8 <__call_exitprocs+0x190>
    db04:	dfc00d17 	ldw	ra,52(sp)
    db08:	df000c17 	ldw	fp,48(sp)
    db0c:	ddc00b17 	ldw	r23,44(sp)
    db10:	dd800a17 	ldw	r22,40(sp)
    db14:	dd400917 	ldw	r21,36(sp)
    db18:	dd000817 	ldw	r20,32(sp)
    db1c:	dcc00717 	ldw	r19,28(sp)
    db20:	dc800617 	ldw	r18,24(sp)
    db24:	dc400517 	ldw	r17,20(sp)
    db28:	dc000417 	ldw	r16,16(sp)
    db2c:	dec00e04 	addi	sp,sp,56
    db30:	f800283a 	ret
    db34:	b9000117 	ldw	r4,4(r23)
    db38:	92000017 	ldw	r8,0(r18)
    db3c:	213fffc4 	addi	r4,r4,-1
    db40:	24001a26 	beq	r4,r16,dbac <__call_exitprocs+0x174>
    db44:	90000015 	stw	zero,0(r18)
    db48:	403fe626 	beq	r8,zero,dae4 <__call_exitprocs+0xac>
    db4c:	ba400117 	ldw	r9,4(r23)
    db50:	a0001226 	beq	r20,zero,db9c <__call_exitprocs+0x164>
    db54:	00800044 	movi	r2,1
    db58:	1408983a 	sll	r4,r2,r16
    db5c:	a1404017 	ldw	r5,256(r20)
    db60:	214a703a 	and	r5,r4,r5
    db64:	28000d26 	beq	r5,zero,db9c <__call_exitprocs+0x164>
    db68:	a1404117 	ldw	r5,260(r20)
    db6c:	2148703a 	and	r4,r4,r5
    db70:	2000101e 	bne	r4,zero,dbb4 <__call_exitprocs+0x17c>
    db74:	99400017 	ldw	r5,0(r19)
    db78:	d9000117 	ldw	r4,4(sp)
    db7c:	da400315 	stw	r9,12(sp)
    db80:	403ee83a 	callr	r8
    db84:	da400317 	ldw	r9,12(sp)
    db88:	b9000117 	ldw	r4,4(r23)
    db8c:	227fbe1e 	bne	r4,r9,da88 <__call_exitprocs+0x50>
    db90:	b1000017 	ldw	r4,0(r22)
    db94:	25ffd326 	beq	r4,r23,dae4 <__call_exitprocs+0xac>
    db98:	003fbb06 	br	da88 <__call_exitprocs+0x50>
    db9c:	da400315 	stw	r9,12(sp)
    dba0:	403ee83a 	callr	r8
    dba4:	da400317 	ldw	r9,12(sp)
    dba8:	003ff706 	br	db88 <__call_exitprocs+0x150>
    dbac:	bc000115 	stw	r16,4(r23)
    dbb0:	003fe506 	br	db48 <__call_exitprocs+0x110>
    dbb4:	99000017 	ldw	r4,0(r19)
    dbb8:	da400315 	stw	r9,12(sp)
    dbbc:	403ee83a 	callr	r8
    dbc0:	da400317 	ldw	r9,12(sp)
    dbc4:	003ff006 	br	db88 <__call_exitprocs+0x150>
    dbc8:	b9000117 	ldw	r4,4(r23)
    dbcc:	20000e1e 	bne	r4,zero,dc08 <__call_exitprocs+0x1d0>
    dbd0:	b9000017 	ldw	r4,0(r23)
    dbd4:	20000826 	beq	r4,zero,dbf8 <__call_exitprocs+0x1c0>
    dbd8:	b1000015 	stw	r4,0(r22)
    dbdc:	a0000226 	beq	r20,zero,dbe8 <__call_exitprocs+0x1b0>
    dbe0:	a009883a 	mov	r4,r20
    dbe4:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    dbe8:	b809883a 	mov	r4,r23
    dbec:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    dbf0:	b5c00017 	ldw	r23,0(r22)
    dbf4:	003fa706 	br	da94 <__call_exitprocs+0x5c>
    dbf8:	0007883a 	mov	r3,zero
    dbfc:	b82d883a 	mov	r22,r23
    dc00:	182f883a 	mov	r23,r3
    dc04:	003fa306 	br	da94 <__call_exitprocs+0x5c>
    dc08:	b8c00017 	ldw	r3,0(r23)
    dc0c:	003ffb06 	br	dbfc <__call_exitprocs+0x1c4>

0000dc10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    dc10:	defffc04 	addi	sp,sp,-16
    dc14:	df000315 	stw	fp,12(sp)
    dc18:	df000304 	addi	fp,sp,12
    dc1c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    dc20:	0001883a 	nop
    dc24:	e0bfff17 	ldw	r2,-4(fp)
    dc28:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    dc2c:	e0bffd17 	ldw	r2,-12(fp)
    dc30:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    dc34:	e0bffe17 	ldw	r2,-8(fp)
    dc38:	10000226 	beq	r2,zero,dc44 <_exit+0x34>
    ALT_SIM_FAIL();
    dc3c:	002af070 	cmpltui	zero,zero,43969
    dc40:	00000106 	br	dc48 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    dc44:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    dc48:	003fff06 	br	dc48 <_exit+0x38>
