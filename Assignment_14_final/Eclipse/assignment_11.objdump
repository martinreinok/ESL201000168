
assignment_11.elf:     file format elf32-littlenios2
assignment_11.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00006734 memsz 0x00006734 flags r-x
    LOAD off    0x00007754 vaddr 0x0000e754 paddr 0x0000ea98 align 2**12
         filesz 0x00000344 memsz 0x00000344 flags rw-
    LOAD off    0x00007ddc vaddr 0x0000eddc paddr 0x0000eddc align 2**12
         filesz 0x00000000 memsz 0x000002fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006400  000081b8  000081b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000019c  0000e5b8  0000e5b8  000075b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000344  0000e754  0000ea98  00007754  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002fc  0000eddc  0000eddc  00007ddc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007a98  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ad8  00000000  00000000  00007ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000f8ca  00000000  00000000  00008598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005ff0  00000000  00000000  00017e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000524e  00000000  00000000  0001de52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000146c  00000000  00000000  000230a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002536  00000000  00000000  0002450c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004e5c  00000000  00000000  00026a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0002b8a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000580  00000000  00000000  0002b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0002eb05  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0002eb08  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0002eb0b  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0002eb0c  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0002eb0d  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0002eb11  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0002eb15  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0002eb19  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0002eb22  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0002eb2b  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000010  00000000  00000000  0002eb34  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000046  00000000  00000000  0002eb44  2**0
                  CONTENTS, READONLY
 28 .jdi          00004e44  00000000  00000000  0002eb8a  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003bf31  00000000  00000000  000339ce  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b8 l    d  .text	00000000 .text
0000e5b8 l    d  .rodata	00000000 .rodata
0000e754 l    d  .rwdata	00000000 .rwdata
0000eddc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/esl1-5/Desktop/ESL201000168/Assignment_11/assignment_11_bsp//obj/HAL/src/crt0.o
000081f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Paninteg.c
00000000 l    df *ABS*	00000000 Panmodel.c
00000000 l    df *ABS*	00000000 Pansubmod.c
00000000 l    df *ABS*	00000000 Tiltinteg.c
00000000 l    df *ABS*	00000000 Tiltmodel.c
00000000 l    df *ABS*	00000000 Tiltsubmod.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 xxfuncs.c
00000000 l    df *ABS*	00000000 xxinverse.c
00000000 l    df *ABS*	00000000 xxmatrix.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
0000a928 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0000e754 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000c7dc l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
0000c90c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ca60 l     F .text	00000050 alt_get_errno
0000cab0 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0000ccf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_times.c
0000cebc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0000cf90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d0d0 l     F .text	00000038 alt_dev_reg
0000e834 l     O .rwdata	0000002c jtag_uart
0000e860 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d3e0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000d59c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000d6ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
0000d7d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000d910 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d93c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000df9c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000ea4c g     O .rwdata	00000004 Pan_number_of_outputs
00009908 g     F .text	0000003c TiltCopyVariablesToOutputs
0000c9f8 g     F .text	00000068 alt_main
0000bd3c g     F .text	00000044 __ashldi3
0000ee04 g     O .bss	00000004 Tilt_steps
0000be74 g     F .text	00000080 _puts_r
0000efd8 g     O .bss	00000100 alt_irq
0000ee28 g     O .bss	00000050 Pan_V
0000ea98 g       *ABS*	00000000 __flash_rwdata_start
00008500 g     F .text	00000034 PanModelInitialize
00008bec g     F .text	0000001c PanModelTerminate
00009894 g     F .text	00000074 TiltCopyInputsToVariables
0000be28 g     F .text	0000004c printf
0000a468 g     F .text	00000038 XXDouble2String
0000ea61 g     O .rwdata	00000001 Tilt_major
0000a630 g     F .text	0000013c __divsf3
0000ee78 g     O .bss	00000038 Pan_P
0000eddc g     O .bss	00000008 Pan_start_time
00009084 g     F .text	0000007c TiltModelInitialize_states
00009be4 g     F .text	000000bc convertTiltToRadian
0000b1c8 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
0000eef8 g     O .bss	00000060 Tilt_V
00008000 g     F .entry	0000001c __reset
0000cf0c g     F .text	00000084 times
0000eeb0 g     O .bss	00000018 Pan_I
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ee0c g     O .bss	00000004 errno
0000b4f0 g     F .text	00000038 __make_dp
00008c60 g     F .text	0000005c PanCopyVariablesToOutputs
0000ee14 g     O .bss	00000004 alt_argv
00016a34 g       *ABS*	00000000 _gp
0000e8b4 g     O .rwdata	00000180 alt_fd_list
0000a428 g     F .text	00000040 XXString2Double
00009b28 g     F .text	000000bc convertPanToRadian
0000856c g     F .text	0000001c PanCalculateInput
0000ef58 g     O .bss	00000018 Tilt_I
0000da2c g     F .text	00000090 alt_find_dev
0000bf30 g     F .text	00000008 _times_r
0000b348 g     F .text	000000d4 __floatsidf
0000e07c g     F .text	00000078 alt_io_redirect
0000b290 g     F .text	0000005c __ltdf2
00008320 g     F .text	000000e0 PanModelInitialize_parameters
00008588 g     F .text	000005ec PanCalculateDynamic
00009038 g     F .text	0000004c TiltModelInitialize_initialvalues
00008bd0 g     F .text	0000001c PanCalculateFinal
0000bef4 g     F .text	00000014 puts
0000edf4 g     O .bss	00000008 Tilt_start_time
00008c08 g     F .text	00000058 PanCopyInputsToVariables
0000d254 g     F .text	000000f4 altera_avalon_jtag_uart_read
00009188 g     F .text	0000001c TiltCalculateStatic
0000bdec g     F .text	0000003c _printf_r
0000c8fc g     F .text	00000008 __udivsi3
0000e2b0 g     F .text	0000008c alt_icache_flush
0000ea84 g     O .rwdata	00000004 alt_max_fd
0000bb24 g     F .text	00000104 __unpack_d
00009f78 g     F .text	00000044 writeUart
0000a810 g     F .text	00000044 __extendsfdf2
0000ede4 g     O .bss	00000008 Pan_time
0000ac7c g     F .text	00000054 __adddf3
00008220 g     F .text	0000001c PanDiscreteTerminate
0000ea6c g     O .rwdata	00000004 _global_impure_ptr
00009cdc g     F .text	0000004c is_digit
0000f0d8 g       *ABS*	00000000 __bss_end
0000deac g     F .text	000000f0 alt_iic_isr_register
0000e18c g     F .text	00000104 alt_tick
0000844c g     F .text	0000007c PanModelInitialize_states
00008e58 g     F .text	0000001c TiltDiscreteTerminate
00008f58 g     F .text	000000e0 TiltModelInitialize_parameters
0000de60 g     F .text	0000004c alt_ic_irq_enabled
00008550 g     F .text	0000001c PanCalculateStatic
0000e0f4 g     F .text	00000098 alt_alarm_stop
0000ee1c g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000cc alt_irq_handler
0000e88c g     O .rwdata	00000028 alt_dev_null
0000b838 g     F .text	000000c8 __unpack_f
0000ea48 g     O .rwdata	00000004 Pan_number_of_inputs
0000d8f4 g     F .text	0000001c alt_dcache_flush_all
0000b41c g     F .text	000000d4 __fixdfsi
0000823c g     F .text	000000e4 PanDiscreteStep
0000ea98 g       *ABS*	00000000 __ram_rwdata_end
0000ea7c g     O .rwdata	00000008 alt_dev_list
0000cfe0 g     F .text	000000f0 write
00008cbc g     F .text	000000a0 PanInitializeSubmodel
000091c0 g     F .text	00000660 TiltCalculateDynamic
0000ea68 g     O .rwdata	00000004 Tilt_number_of_outputs
0000e754 g       *ABS*	00000000 __ram_rodata_end
0000bcf8 g     F .text	00000044 __lshrdi3
0000b2ec g     F .text	0000005c __ledf2
0000ea60 g     O .rwdata	00000001 Tilt_initialize
0000c904 g     F .text	00000008 __umodsi3
0000985c g     F .text	0000001c TiltCalculateFinal
0000f0d8 g       *ABS*	00000000 end
0000b70c g     F .text	0000012c __pack_f
0000d6fc g     F .text	000000dc altera_avalon_uart_write
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000d454 g     F .text	00000088 alt_avalon_timer_sc_init
0000d53c g     F .text	00000060 altera_avalon_uart_write_fd
0000b660 g     F .text	000000ac __clzsi2
0000d348 g     F .text	00000098 altera_avalon_jtag_uart_write
0000ea64 g     O .rwdata	00000004 Tilt_number_of_inputs
0000bf38 g     F .text	00000734 ___vfprintf_internal_r
0000e3a4 g     F .text	000001d8 __call_exitprocs
00009d28 g     F .text	0000010c parse_int
000081b8 g     F .text	0000003c _start
0000ee20 g     O .bss	00000004 _alt_tick_rate
0000edf0 g     O .bss	00000001 Pan_stop_simulation
0000ea58 g     O .rwdata	00000008 Tilt_step_size
0000ee24 g     O .bss	00000004 _alt_nticks
0000cd48 g     F .text	000000f4 read
0000d13c g     F .text	00000058 alt_sys_init
0000a76c g     F .text	000000a4 __floatsisf
00009820 g     F .text	0000003c TiltCalculateOutput
00008dc4 g     F .text	00000068 PanTerminateSubmodel
0000b528 g     F .text	00000028 __mulsi3
0000e754 g       *ABS*	00000000 __ram_rwdata_start
0000e5b8 g       *ABS*	00000000 __ram_rodata_start
000091a4 g     F .text	0000001c TiltCalculateInput
0000ea44 g     O .rwdata	00000001 Pan_initialize
0000d194 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000dbd0 g     F .text	000000d4 alt_get_fd
0000bc28 g     F .text	000000d0 __fpcmp_parts_d
0000e35c g     F .text	00000048 memcmp
0000f0d8 g       *ABS*	00000000 __alt_stack_base
0000ef70 g     O .bss	00000038 Tilt_P
0000b014 g     F .text	000001b4 __divdf3
0000ad30 g     F .text	000002e4 __muldf3
0000e5f4 g     O .rodata	00000010 __thenan_sf
0000dabc g     F .text	00000114 alt_find_file
0000d98c g     F .text	000000a0 alt_dev_llist_insert
0000c690 g     F .text	000000e0 __sfvwrite_small_dev
0000eddc g       *ABS*	00000000 __bss_start
0000efa8 g     O .bss	00000018 Tilt_R
0000bdcc g     F .text	00000020 memset
00009fbc g     F .text	0000046c main
0000ee18 g     O .bss	00000004 alt_envp
00009878 g     F .text	0000001c TiltModelTerminate
0000d1f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000eec8 g     O .bss	00000018 Pan_R
0000ea88 g     O .rwdata	00000004 alt_errno
00009138 g     F .text	00000034 TiltModelInitialize
0000c850 g     F .text	00000050 __divsi3
0000e604 g     O .rodata	00000014 __thenan_df
0000a4a0 g     F .text	00000190 __mulsf3
0000e5b8 g       *ABS*	00000000 __flash_rodata_start
000099e4 g     F .text	00000068 TiltCalculateSubmodel
0000d108 g     F .text	00000034 alt_irq_init
00008e2c g     F .text	0000002c TiltDiscreteInitialize
0000ce3c g     F .text	00000080 alt_release_fd
0000e618 g     O .rodata	00000100 __clz_tab
0000c770 g     F .text	0000006c _write_r
0000ea45 g     O .rwdata	00000001 Pan_major
000084c8 g     F .text	00000038 PanModelInitialize_variables
000081f4 g     F .text	0000002c PanDiscreteInitialize
0000ea70 g     O .rwdata	00000004 _impure_ptr
0000ee10 g     O .bss	00000004 alt_argc
00009e34 g     F .text	00000144 readUartPayload
00008b74 g     F .text	0000005c PanCalculateOutput
00008020 g       .exceptions	00000000 alt_irq_entry
0000ea74 g     O .rwdata	00000008 alt_fs_list
0000916c g     F .text	0000001c TiltCalculateInitial
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000edfc g     O .bss	00000008 Tilt_time
0000dcd4 g     F .text	00000050 alt_ic_isr_register
0000ea98 g       *ABS*	00000000 _edata
0000d4dc g     F .text	00000060 altera_avalon_uart_read_fd
0000f0d8 g       *ABS*	00000000 _end
000081b8 g       *ABS*	00000000 __ram_exceptions_end
0000ddc0 g     F .text	000000a0 alt_ic_irq_disable
0000ea3c g     O .rwdata	00000008 Pan_step_size
0000e290 g     F .text	00000020 altera_nios2_qsys_irq_init
0000e33c g     F .text	00000020 exit
0000a854 g     F .text	000000d4 __floatunsisf
0000eee0 g     O .bss	00000018 Pan_s
0000c8a0 g     F .text	0000005c __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000ea50 g     O .rwdata	00000008 Tilt_finish_time
0000e57c g     F .text	0000003c _exit
0000ea34 g     O .rwdata	00000008 Pan_finish_time
00008534 g     F .text	0000001c PanCalculateInitial
0000b550 g     F .text	00000110 __muldi3
0000bf08 g     F .text	00000028 strlen
00008e74 g     F .text	000000e4 TiltDiscreteStep
0000cba0 g     F .text	00000158 open
0000b22c g     F .text	00000064 __gedf2
0000bd80 g     F .text	0000004c clock
0000dca4 g     F .text	00000030 alt_icache_flush_all
0000ea8c g     O .rwdata	00000004 alt_priority_mask
00008d5c g     F .text	00000068 PanCalculateSubmodel
0000dd24 g     F .text	0000009c alt_ic_irq_enable
0000c66c g     F .text	00000024 __vfprintf_internal
0000ee08 g     O .bss	00000001 Tilt_stop_simulation
0000d5ec g     F .text	000000c0 altera_avalon_uart_read
00009944 g     F .text	000000a0 TiltInitializeSubmodel
0000acd0 g     F .text	00000060 __subdf3
00009ab4 g     F .text	00000074 convertToPwm
0000ea90 g     O .rwdata	00000008 alt_alarm_list
00009ca0 g     F .text	0000003c initUart
0000d828 g     F .text	000000cc close
00009a4c g     F .text	00000068 TiltTerminateSubmodel
0000edec g     O .bss	00000004 Pan_steps
00008400 g     F .text	0000004c PanModelInitialize_initialvalues
0000c978 g     F .text	00000080 alt_load
0000b900 g     F .text	00000224 __pack_d
0000efc0 g     O .bss	00000018 Tilt_s
00000000  w      *UND*	00000000 free
00009100 g     F .text	00000038 TiltModelInitialize_variables



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606e14 	ori	at,at,33208
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001726 	beq	r2,zero,8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00c00074 	movhi	r3,1
    8130:	18fbf604 	addi	r3,r3,-4136
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	213bf604 	addi	r4,r4,-4136
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    817c:	e0bffb17 	ldw	r2,-20(fp)
    8180:	103fe31e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8184:	00000706 	br	81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	10800044 	addi	r2,r2,1
    819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a0:	003fde06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

Disassembly of section .text:

000081b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b8:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c4:	d69a8d14 	ori	gp,gp,27188
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81cc:	10bb7714 	ori	r2,r2,60892

    movhi r3, %hi(__bss_end)
    81d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d4:	18fc3614 	ori	r3,r3,61656

    beq r2, r3, 1f
    81d8:	10c00326 	beq	r2,r3,81e8 <_start+0x30>

0:
    stw zero, (r2)
    81dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e4:	10fffd36 	bltu	r2,r3,81dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e8:	000c9780 	call	c978 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81ec:	000c9f80 	call	c9f8 <alt_main>

000081f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f0:	003fff06 	br	81f0 <alt_after_alt_main>

000081f4 <PanDiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void PanDiscreteInitialize (void)
{
    81f4:	deffff04 	addi	sp,sp,-4
    81f8:	df000015 	stw	fp,0(sp)
    81fc:	d839883a 	mov	fp,sp
	/* nothing to be done */
	Pan_major = XXTRUE;
    8200:	00800074 	movhi	r2,1
    8204:	10ba9144 	addi	r2,r2,-5563
    8208:	00c00044 	movi	r3,1
    820c:	10c00005 	stb	r3,0(r2)
}
    8210:	e037883a 	mov	sp,fp
    8214:	df000017 	ldw	fp,0(sp)
    8218:	dec00104 	addi	sp,sp,4
    821c:	f800283a 	ret

00008220 <PanDiscreteTerminate>:

/* the termination of the Discrete integration method */
void PanDiscreteTerminate (void)
{
    8220:	deffff04 	addi	sp,sp,-4
    8224:	df000015 	stw	fp,0(sp)
    8228:	d839883a 	mov	fp,sp
	/* nothing to be done */
}
    822c:	e037883a 	mov	sp,fp
    8230:	df000017 	ldw	fp,0(sp)
    8234:	dec00104 	addi	sp,sp,4
    8238:	f800283a 	ret

0000823c <PanDiscreteStep>:

/* the Discrete integration method itself */
void PanDiscreteStep (void)
{
    823c:	defffd04 	addi	sp,sp,-12
    8240:	dfc00215 	stw	ra,8(sp)
    8244:	df000115 	stw	fp,4(sp)
    8248:	df000104 	addi	fp,sp,4
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    824c:	e03fff15 	stw	zero,-4(fp)
    8250:	00001106 	br	8298 <PanDiscreteStep+0x5c>
	{
		/* just a move of the new state */
		Pan_s [index] = Pan_R [index];
    8254:	00c00074 	movhi	r3,1
    8258:	18fbb204 	addi	r3,r3,-4408
    825c:	e0bfff17 	ldw	r2,-4(fp)
    8260:	100490fa 	slli	r2,r2,3
    8264:	1889883a 	add	r4,r3,r2
    8268:	20800017 	ldw	r2,0(r4)
    826c:	20c00117 	ldw	r3,4(r4)
    8270:	01400074 	movhi	r5,1
    8274:	297bb804 	addi	r5,r5,-4384
    8278:	e13fff17 	ldw	r4,-4(fp)
    827c:	200890fa 	slli	r4,r4,3
    8280:	2909883a 	add	r4,r5,r4
    8284:	20800015 	stw	r2,0(r4)
    8288:	20c00115 	stw	r3,4(r4)
void PanDiscreteStep (void)
{
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    828c:	e0bfff17 	ldw	r2,-4(fp)
    8290:	10800044 	addi	r2,r2,1
    8294:	e0bfff15 	stw	r2,-4(fp)
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	108000d0 	cmplti	r2,r2,3
    82a0:	103fec1e 	bne	r2,zero,8254 <PanDiscreteStep+0x18>
	{
		/* just a move of the new state */
		Pan_s [index] = Pan_R [index];
	}
	/* increment the simulation time */
	Pan_time += Pan_step_size;
    82a4:	00800074 	movhi	r2,1
    82a8:	10bb7904 	addi	r2,r2,-4636
    82ac:	11400017 	ldw	r5,0(r2)
    82b0:	11800117 	ldw	r6,4(r2)
    82b4:	01000074 	movhi	r4,1
    82b8:	213a8f04 	addi	r4,r4,-5572
    82bc:	20800017 	ldw	r2,0(r4)
    82c0:	20c00117 	ldw	r3,4(r4)
    82c4:	2809883a 	mov	r4,r5
    82c8:	300b883a 	mov	r5,r6
    82cc:	100d883a 	mov	r6,r2
    82d0:	180f883a 	mov	r7,r3
    82d4:	000ac7c0 	call	ac7c <__adddf3>
    82d8:	1009883a 	mov	r4,r2
    82dc:	180b883a 	mov	r5,r3
    82e0:	2005883a 	mov	r2,r4
    82e4:	2807883a 	mov	r3,r5
    82e8:	01000074 	movhi	r4,1
    82ec:	213b7904 	addi	r4,r4,-4636
    82f0:	20800015 	stw	r2,0(r4)
    82f4:	20c00115 	stw	r3,4(r4)

	Pan_major = XXTRUE;
    82f8:	00800074 	movhi	r2,1
    82fc:	10ba9144 	addi	r2,r2,-5563
    8300:	00c00044 	movi	r3,1
    8304:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	PanCalculateDynamic ();
    8308:	00085880 	call	8588 <PanCalculateDynamic>
}
    830c:	e037883a 	mov	sp,fp
    8310:	dfc00117 	ldw	ra,4(sp)
    8314:	df000017 	ldw	fp,0(sp)
    8318:	dec00204 	addi	sp,sp,8
    831c:	f800283a 	ret

00008320 <PanModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void PanModelInitialize_parameters(void)
{
    8320:	deffff04 	addi	sp,sp,-4
    8324:	df000015 	stw	fp,0(sp)
    8328:	d839883a 	mov	fp,sp
	/* set the parameters */
	Pan_P[0] = 0.0;		/* corrGain\K */
    832c:	00800074 	movhi	r2,1
    8330:	10bb9e04 	addi	r2,r2,-4488
    8334:	10000015 	stw	zero,0(r2)
    8338:	10000115 	stw	zero,4(r2)
	Pan_P[1] = 0.1;		/* PID1\kp */
    833c:	00800074 	movhi	r2,1
    8340:	10bb9e04 	addi	r2,r2,-4488
    8344:	00e666b4 	movhi	r3,39322
    8348:	18e66684 	addi	r3,r3,-26214
    834c:	10c00215 	stw	r3,8(r2)
    8350:	00cfeeb4 	movhi	r3,16314
    8354:	18e66644 	addi	r3,r3,-26215
    8358:	10c00315 	stw	r3,12(r2)
	Pan_P[2] = 0.05;		/* PID1\tauD */
    835c:	00800074 	movhi	r2,1
    8360:	10bb9e04 	addi	r2,r2,-4488
    8364:	00e666b4 	movhi	r3,39322
    8368:	18e66684 	addi	r3,r3,-26214
    836c:	10c00415 	stw	r3,16(r2)
    8370:	00cfeab4 	movhi	r3,16298
    8374:	18e66644 	addi	r3,r3,-26215
    8378:	10c00515 	stw	r3,20(r2)
	Pan_P[3] = 0.17;		/* PID1\beta */
    837c:	00800074 	movhi	r2,1
    8380:	10bb9e04 	addi	r2,r2,-4488
    8384:	00d70a74 	movhi	r3,23593
    8388:	18fd70c4 	addi	r3,r3,-2621
    838c:	10c00615 	stw	r3,24(r2)
    8390:	00cff1b4 	movhi	r3,16326
    8394:	18f0a3c4 	addi	r3,r3,-15729
    8398:	10c00715 	stw	r3,28(r2)
	Pan_P[4] = 9.0;		/* PID1\tauI */
    839c:	00800074 	movhi	r2,1
    83a0:	10bb9e04 	addi	r2,r2,-4488
    83a4:	10000815 	stw	zero,32(r2)
    83a8:	00d008b4 	movhi	r3,16418
    83ac:	10c00915 	stw	r3,36(r2)
	Pan_P[5] = -0.99;		/* SignalLimiter2\minimum */
    83b0:	00800074 	movhi	r2,1
    83b4:	10bb9e04 	addi	r2,r2,-4488
    83b8:	00deb874 	movhi	r3,31457
    83bc:	18d1eb84 	addi	r3,r3,18350
    83c0:	10c00a15 	stw	r3,40(r2)
    83c4:	00effc34 	movhi	r3,49136
    83c8:	18eb8504 	addi	r3,r3,-20972
    83cc:	10c00b15 	stw	r3,44(r2)
	Pan_P[6] = 0.99;		/* SignalLimiter2\maximum */
    83d0:	00800074 	movhi	r2,1
    83d4:	10bb9e04 	addi	r2,r2,-4488
    83d8:	00deb874 	movhi	r3,31457
    83dc:	18d1eb84 	addi	r3,r3,18350
    83e0:	10c00c15 	stw	r3,48(r2)
    83e4:	00cffc34 	movhi	r3,16368
    83e8:	18eb8504 	addi	r3,r3,-20972
    83ec:	10c00d15 	stw	r3,52(r2)

}
    83f0:	e037883a 	mov	sp,fp
    83f4:	df000017 	ldw	fp,0(sp)
    83f8:	dec00104 	addi	sp,sp,4
    83fc:	f800283a 	ret

00008400 <PanModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void PanModelInitialize_initialvalues(void)
{
    8400:	deffff04 	addi	sp,sp,-4
    8404:	df000015 	stw	fp,0(sp)
    8408:	d839883a 	mov	fp,sp
	/* set the initial values */
	Pan_I[0] = 0.0;		/* PID1\uD_previous_initial */
    840c:	00800074 	movhi	r2,1
    8410:	10bbac04 	addi	r2,r2,-4432
    8414:	10000015 	stw	zero,0(r2)
    8418:	10000115 	stw	zero,4(r2)
	Pan_I[1] = 0.0;		/* PID1\error_previous_initial */
    841c:	00800074 	movhi	r2,1
    8420:	10bbac04 	addi	r2,r2,-4432
    8424:	10000215 	stw	zero,8(r2)
    8428:	10000315 	stw	zero,12(r2)
	Pan_I[2] = 0.0;		/* PID1\uI_previous_initial */
    842c:	00800074 	movhi	r2,1
    8430:	10bbac04 	addi	r2,r2,-4432
    8434:	10000415 	stw	zero,16(r2)
    8438:	10000515 	stw	zero,20(r2)

}
    843c:	e037883a 	mov	sp,fp
    8440:	df000017 	ldw	fp,0(sp)
    8444:	dec00104 	addi	sp,sp,4
    8448:	f800283a 	ret

0000844c <PanModelInitialize_states>:

void PanModelInitialize_states(void)
{
    844c:	deffff04 	addi	sp,sp,-4
    8450:	df000015 	stw	fp,0(sp)
    8454:	d839883a 	mov	fp,sp
	/* set the states */
	Pan_s[0] = Pan_I[0];		/* PID1\uD_previous */
    8458:	01000074 	movhi	r4,1
    845c:	213bac04 	addi	r4,r4,-4432
    8460:	20800017 	ldw	r2,0(r4)
    8464:	20c00117 	ldw	r3,4(r4)
    8468:	01000074 	movhi	r4,1
    846c:	213bb804 	addi	r4,r4,-4384
    8470:	20800015 	stw	r2,0(r4)
    8474:	20c00115 	stw	r3,4(r4)
	Pan_s[1] = Pan_I[1];		/* PID1\error_previous */
    8478:	01000074 	movhi	r4,1
    847c:	213bac04 	addi	r4,r4,-4432
    8480:	20800217 	ldw	r2,8(r4)
    8484:	20c00317 	ldw	r3,12(r4)
    8488:	01000074 	movhi	r4,1
    848c:	213bb804 	addi	r4,r4,-4384
    8490:	20800215 	stw	r2,8(r4)
    8494:	20c00315 	stw	r3,12(r4)
	Pan_s[2] = Pan_I[2];		/* PID1\uI_previous */
    8498:	01000074 	movhi	r4,1
    849c:	213bac04 	addi	r4,r4,-4432
    84a0:	20800417 	ldw	r2,16(r4)
    84a4:	20c00517 	ldw	r3,20(r4)
    84a8:	01000074 	movhi	r4,1
    84ac:	213bb804 	addi	r4,r4,-4384
    84b0:	20800415 	stw	r2,16(r4)
    84b4:	20c00515 	stw	r3,20(r4)

}
    84b8:	e037883a 	mov	sp,fp
    84bc:	df000017 	ldw	fp,0(sp)
    84c0:	dec00104 	addi	sp,sp,4
    84c4:	f800283a 	ret

000084c8 <PanModelInitialize_variables>:

void PanModelInitialize_variables(void)
{
    84c8:	defffe04 	addi	sp,sp,-8
    84cc:	dfc00115 	stw	ra,4(sp)
    84d0:	df000015 	stw	fp,0(sp)
    84d4:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(Pan_V, 0, xx_variables_size * sizeof(XXDouble));
    84d8:	01000074 	movhi	r4,1
    84dc:	213b8a04 	addi	r4,r4,-4568
    84e0:	000b883a 	mov	r5,zero
    84e4:	01801404 	movi	r6,80
    84e8:	000bdcc0 	call	bdcc <memset>
}
    84ec:	e037883a 	mov	sp,fp
    84f0:	dfc00117 	ldw	ra,4(sp)
    84f4:	df000017 	ldw	fp,0(sp)
    84f8:	dec00204 	addi	sp,sp,8
    84fc:	f800283a 	ret

00008500 <PanModelInitialize>:

/* this method is called before calculation is possible */
void PanModelInitialize (void)
{
    8500:	defffe04 	addi	sp,sp,-8
    8504:	dfc00115 	stw	ra,4(sp)
    8508:	df000015 	stw	fp,0(sp)
    850c:	d839883a 	mov	fp,sp
	PanModelInitialize_parameters();
    8510:	00083200 	call	8320 <PanModelInitialize_parameters>
	PanModelInitialize_variables();
    8514:	00084c80 	call	84c8 <PanModelInitialize_variables>
	PanModelInitialize_initialvalues();
    8518:	00084000 	call	8400 <PanModelInitialize_initialvalues>
	PanModelInitialize_states();
    851c:	000844c0 	call	844c <PanModelInitialize_states>
}
    8520:	e037883a 	mov	sp,fp
    8524:	dfc00117 	ldw	ra,4(sp)
    8528:	df000017 	ldw	fp,0(sp)
    852c:	dec00204 	addi	sp,sp,8
    8530:	f800283a 	ret

00008534 <PanCalculateInitial>:

/* This function calculates the initial equations of the model.
 * These equations are calculated before anything else
 */
void PanCalculateInitial (void)
{
    8534:	deffff04 	addi	sp,sp,-4
    8538:	df000015 	stw	fp,0(sp)
    853c:	d839883a 	mov	fp,sp

}
    8540:	e037883a 	mov	sp,fp
    8544:	df000017 	ldw	fp,0(sp)
    8548:	dec00104 	addi	sp,sp,4
    854c:	f800283a 	ret

00008550 <PanCalculateStatic>:

/* This function calculates the static equations of the model.
 * These equations are only dependent from parameters and constants
 */
void PanCalculateStatic (void)
{
    8550:	deffff04 	addi	sp,sp,-4
    8554:	df000015 	stw	fp,0(sp)
    8558:	d839883a 	mov	fp,sp

}
    855c:	e037883a 	mov	sp,fp
    8560:	df000017 	ldw	fp,0(sp)
    8564:	dec00104 	addi	sp,sp,4
    8568:	f800283a 	ret

0000856c <PanCalculateInput>:
/* This function calculates the input equations of the model.
 * These equations are dynamic equations that must not change
 * in calls from the integration method (like random and delay).
 */
void PanCalculateInput (void)
{
    856c:	deffff04 	addi	sp,sp,-4
    8570:	df000015 	stw	fp,0(sp)
    8574:	d839883a 	mov	fp,sp

}
    8578:	e037883a 	mov	sp,fp
    857c:	df000017 	ldw	fp,0(sp)
    8580:	dec00104 	addi	sp,sp,4
    8584:	f800283a 	ret

00008588 <PanCalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void PanCalculateDynamic (void)
{
    8588:	defff804 	addi	sp,sp,-32
    858c:	dfc00715 	stw	ra,28(sp)
    8590:	df000615 	stw	fp,24(sp)
    8594:	dd400515 	stw	r21,20(sp)
    8598:	dd000415 	stw	r20,16(sp)
    859c:	dcc00315 	stw	r19,12(sp)
    85a0:	dc800215 	stw	r18,8(sp)
    85a4:	dc400115 	stw	r17,4(sp)
    85a8:	dc000015 	stw	r16,0(sp)
    85ac:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	Pan_V[2] = 1.0 / (Pan_step_size + Pan_P[2] * Pan_P[3]);
    85b0:	00800074 	movhi	r2,1
    85b4:	10bb9e04 	addi	r2,r2,-4488
    85b8:	11400417 	ldw	r5,16(r2)
    85bc:	11800517 	ldw	r6,20(r2)
    85c0:	01000074 	movhi	r4,1
    85c4:	213b9e04 	addi	r4,r4,-4488
    85c8:	20800617 	ldw	r2,24(r4)
    85cc:	20c00717 	ldw	r3,28(r4)
    85d0:	2809883a 	mov	r4,r5
    85d4:	300b883a 	mov	r5,r6
    85d8:	100d883a 	mov	r6,r2
    85dc:	180f883a 	mov	r7,r3
    85e0:	000ad300 	call	ad30 <__muldf3>
    85e4:	100f883a 	mov	r7,r2
    85e8:	1811883a 	mov	r8,r3
    85ec:	380b883a 	mov	r5,r7
    85f0:	400d883a 	mov	r6,r8
    85f4:	d0a00217 	ldw	r2,-32760(gp)
    85f8:	01000074 	movhi	r4,1
    85fc:	213a9004 	addi	r4,r4,-5568
    8600:	20c00017 	ldw	r3,0(r4)
    8604:	2809883a 	mov	r4,r5
    8608:	300b883a 	mov	r5,r6
    860c:	100d883a 	mov	r6,r2
    8610:	180f883a 	mov	r7,r3
    8614:	000ac7c0 	call	ac7c <__adddf3>
    8618:	1009883a 	mov	r4,r2
    861c:	180b883a 	mov	r5,r3
    8620:	2005883a 	mov	r2,r4
    8624:	2807883a 	mov	r3,r5
    8628:	0009883a 	mov	r4,zero
    862c:	014ffc34 	movhi	r5,16368
    8630:	100d883a 	mov	r6,r2
    8634:	180f883a 	mov	r7,r3
    8638:	000b0140 	call	b014 <__divdf3>
    863c:	1009883a 	mov	r4,r2
    8640:	180b883a 	mov	r5,r3
    8644:	2005883a 	mov	r2,r4
    8648:	2807883a 	mov	r3,r5
    864c:	01000074 	movhi	r4,1
    8650:	213b8a04 	addi	r4,r4,-4568
    8654:	20800415 	stw	r2,16(r4)
    8658:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\plus1 = in; */
	Pan_V[3] = Pan_V[7];
    865c:	01000074 	movhi	r4,1
    8660:	213b8a04 	addi	r4,r4,-4568
    8664:	20800e17 	ldw	r2,56(r4)
    8668:	20c00f17 	ldw	r3,60(r4)
    866c:	01000074 	movhi	r4,1
    8670:	213b8a04 	addi	r4,r4,-4568
    8674:	20800615 	stw	r2,24(r4)
    8678:	20c00715 	stw	r3,28(r4)

	/* Splitter1\input = position; */
	Pan_V[5] = Pan_V[8];
    867c:	01000074 	movhi	r4,1
    8680:	213b8a04 	addi	r4,r4,-4568
    8684:	20801017 	ldw	r2,64(r4)
    8688:	20c01117 	ldw	r3,68(r4)
    868c:	01000074 	movhi	r4,1
    8690:	213b8a04 	addi	r4,r4,-4568
    8694:	20800a15 	stw	r2,40(r4)
    8698:	20c00b15 	stw	r3,44(r4)

	/* corrGain\corr = corrGain\K * Splitter1\input; */
	Pan_V[0] = Pan_P[0] * Pan_V[5];
    869c:	00800074 	movhi	r2,1
    86a0:	10bb9e04 	addi	r2,r2,-4488
    86a4:	11400017 	ldw	r5,0(r2)
    86a8:	11800117 	ldw	r6,4(r2)
    86ac:	01000074 	movhi	r4,1
    86b0:	213b8a04 	addi	r4,r4,-4568
    86b4:	20800a17 	ldw	r2,40(r4)
    86b8:	20c00b17 	ldw	r3,44(r4)
    86bc:	2809883a 	mov	r4,r5
    86c0:	300b883a 	mov	r5,r6
    86c4:	100d883a 	mov	r6,r2
    86c8:	180f883a 	mov	r7,r3
    86cc:	000ad300 	call	ad30 <__muldf3>
    86d0:	1009883a 	mov	r4,r2
    86d4:	180b883a 	mov	r5,r3
    86d8:	2005883a 	mov	r2,r4
    86dc:	2807883a 	mov	r3,r5
    86e0:	01000074 	movhi	r4,1
    86e4:	213b8a04 	addi	r4,r4,-4568
    86e8:	20800015 	stw	r2,0(r4)
    86ec:	20c00115 	stw	r3,4(r4)

	/* PID1\error = PlusMinus1\plus1 - Splitter1\input; */
	Pan_R[1] = Pan_V[3] - Pan_V[5];
    86f0:	00800074 	movhi	r2,1
    86f4:	10bb8a04 	addi	r2,r2,-4568
    86f8:	11400617 	ldw	r5,24(r2)
    86fc:	11800717 	ldw	r6,28(r2)
    8700:	01000074 	movhi	r4,1
    8704:	213b8a04 	addi	r4,r4,-4568
    8708:	20800a17 	ldw	r2,40(r4)
    870c:	20c00b17 	ldw	r3,44(r4)
    8710:	2809883a 	mov	r4,r5
    8714:	300b883a 	mov	r5,r6
    8718:	100d883a 	mov	r6,r2
    871c:	180f883a 	mov	r7,r3
    8720:	000acd00 	call	acd0 <__subdf3>
    8724:	1009883a 	mov	r4,r2
    8728:	180b883a 	mov	r5,r3
    872c:	2005883a 	mov	r2,r4
    8730:	2807883a 	mov	r3,r5
    8734:	01000074 	movhi	r4,1
    8738:	213bb204 	addi	r4,r4,-4408
    873c:	20800215 	stw	r2,8(r4)
    8740:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	Pan_R[0] = Pan_V[2] * (((Pan_P[2] * Pan_s[0]) * Pan_P[3] + (Pan_P[2] * Pan_P[1]) * (Pan_R[1] - Pan_s[1])) + (Pan_step_size * Pan_P[1]) * Pan_R[1]);
    8744:	00800074 	movhi	r2,1
    8748:	10bb8a04 	addi	r2,r2,-4568
    874c:	14000417 	ldw	r16,16(r2)
    8750:	14400517 	ldw	r17,20(r2)
    8754:	00800074 	movhi	r2,1
    8758:	10bb9e04 	addi	r2,r2,-4488
    875c:	11400417 	ldw	r5,16(r2)
    8760:	11800517 	ldw	r6,20(r2)
    8764:	01000074 	movhi	r4,1
    8768:	213bb804 	addi	r4,r4,-4384
    876c:	20800017 	ldw	r2,0(r4)
    8770:	20c00117 	ldw	r3,4(r4)
    8774:	2809883a 	mov	r4,r5
    8778:	300b883a 	mov	r5,r6
    877c:	100d883a 	mov	r6,r2
    8780:	180f883a 	mov	r7,r3
    8784:	000ad300 	call	ad30 <__muldf3>
    8788:	100f883a 	mov	r7,r2
    878c:	1811883a 	mov	r8,r3
    8790:	380b883a 	mov	r5,r7
    8794:	400d883a 	mov	r6,r8
    8798:	01000074 	movhi	r4,1
    879c:	213b9e04 	addi	r4,r4,-4488
    87a0:	20800617 	ldw	r2,24(r4)
    87a4:	20c00717 	ldw	r3,28(r4)
    87a8:	2809883a 	mov	r4,r5
    87ac:	300b883a 	mov	r5,r6
    87b0:	100d883a 	mov	r6,r2
    87b4:	180f883a 	mov	r7,r3
    87b8:	000ad300 	call	ad30 <__muldf3>
    87bc:	1009883a 	mov	r4,r2
    87c0:	180b883a 	mov	r5,r3
    87c4:	2025883a 	mov	r18,r4
    87c8:	2827883a 	mov	r19,r5
    87cc:	00800074 	movhi	r2,1
    87d0:	10bb9e04 	addi	r2,r2,-4488
    87d4:	11400417 	ldw	r5,16(r2)
    87d8:	11800517 	ldw	r6,20(r2)
    87dc:	01000074 	movhi	r4,1
    87e0:	213b9e04 	addi	r4,r4,-4488
    87e4:	20800217 	ldw	r2,8(r4)
    87e8:	20c00317 	ldw	r3,12(r4)
    87ec:	2809883a 	mov	r4,r5
    87f0:	300b883a 	mov	r5,r6
    87f4:	100d883a 	mov	r6,r2
    87f8:	180f883a 	mov	r7,r3
    87fc:	000ad300 	call	ad30 <__muldf3>
    8800:	1009883a 	mov	r4,r2
    8804:	180b883a 	mov	r5,r3
    8808:	2029883a 	mov	r20,r4
    880c:	282b883a 	mov	r21,r5
    8810:	00800074 	movhi	r2,1
    8814:	10bbb204 	addi	r2,r2,-4408
    8818:	11400217 	ldw	r5,8(r2)
    881c:	11800317 	ldw	r6,12(r2)
    8820:	01000074 	movhi	r4,1
    8824:	213bb804 	addi	r4,r4,-4384
    8828:	20800217 	ldw	r2,8(r4)
    882c:	20c00317 	ldw	r3,12(r4)
    8830:	2809883a 	mov	r4,r5
    8834:	300b883a 	mov	r5,r6
    8838:	100d883a 	mov	r6,r2
    883c:	180f883a 	mov	r7,r3
    8840:	000acd00 	call	acd0 <__subdf3>
    8844:	1009883a 	mov	r4,r2
    8848:	180b883a 	mov	r5,r3
    884c:	2005883a 	mov	r2,r4
    8850:	2807883a 	mov	r3,r5
    8854:	a009883a 	mov	r4,r20
    8858:	a80b883a 	mov	r5,r21
    885c:	100d883a 	mov	r6,r2
    8860:	180f883a 	mov	r7,r3
    8864:	000ad300 	call	ad30 <__muldf3>
    8868:	1009883a 	mov	r4,r2
    886c:	180b883a 	mov	r5,r3
    8870:	2005883a 	mov	r2,r4
    8874:	2807883a 	mov	r3,r5
    8878:	9009883a 	mov	r4,r18
    887c:	980b883a 	mov	r5,r19
    8880:	100d883a 	mov	r6,r2
    8884:	180f883a 	mov	r7,r3
    8888:	000ac7c0 	call	ac7c <__adddf3>
    888c:	1009883a 	mov	r4,r2
    8890:	180b883a 	mov	r5,r3
    8894:	2025883a 	mov	r18,r4
    8898:	2827883a 	mov	r19,r5
    889c:	00800074 	movhi	r2,1
    88a0:	10bb9e04 	addi	r2,r2,-4488
    88a4:	11400217 	ldw	r5,8(r2)
    88a8:	11800317 	ldw	r6,12(r2)
    88ac:	d0a00217 	ldw	r2,-32760(gp)
    88b0:	01000074 	movhi	r4,1
    88b4:	213a9004 	addi	r4,r4,-5568
    88b8:	20c00017 	ldw	r3,0(r4)
    88bc:	2809883a 	mov	r4,r5
    88c0:	300b883a 	mov	r5,r6
    88c4:	100d883a 	mov	r6,r2
    88c8:	180f883a 	mov	r7,r3
    88cc:	000ad300 	call	ad30 <__muldf3>
    88d0:	100f883a 	mov	r7,r2
    88d4:	1811883a 	mov	r8,r3
    88d8:	380b883a 	mov	r5,r7
    88dc:	400d883a 	mov	r6,r8
    88e0:	01000074 	movhi	r4,1
    88e4:	213bb204 	addi	r4,r4,-4408
    88e8:	20800217 	ldw	r2,8(r4)
    88ec:	20c00317 	ldw	r3,12(r4)
    88f0:	2809883a 	mov	r4,r5
    88f4:	300b883a 	mov	r5,r6
    88f8:	100d883a 	mov	r6,r2
    88fc:	180f883a 	mov	r7,r3
    8900:	000ad300 	call	ad30 <__muldf3>
    8904:	1009883a 	mov	r4,r2
    8908:	180b883a 	mov	r5,r3
    890c:	2005883a 	mov	r2,r4
    8910:	2807883a 	mov	r3,r5
    8914:	9009883a 	mov	r4,r18
    8918:	980b883a 	mov	r5,r19
    891c:	100d883a 	mov	r6,r2
    8920:	180f883a 	mov	r7,r3
    8924:	000ac7c0 	call	ac7c <__adddf3>
    8928:	1009883a 	mov	r4,r2
    892c:	180b883a 	mov	r5,r3
    8930:	2005883a 	mov	r2,r4
    8934:	2807883a 	mov	r3,r5
    8938:	8009883a 	mov	r4,r16
    893c:	880b883a 	mov	r5,r17
    8940:	100d883a 	mov	r6,r2
    8944:	180f883a 	mov	r7,r3
    8948:	000ad300 	call	ad30 <__muldf3>
    894c:	1009883a 	mov	r4,r2
    8950:	180b883a 	mov	r5,r3
    8954:	2005883a 	mov	r2,r4
    8958:	2807883a 	mov	r3,r5
    895c:	01000074 	movhi	r4,1
    8960:	213bb204 	addi	r4,r4,-4408
    8964:	20800015 	stw	r2,0(r4)
    8968:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	Pan_R[2] = Pan_s[2] + (Pan_step_size * Pan_R[0]) / Pan_P[4];
    896c:	00800074 	movhi	r2,1
    8970:	10bbb804 	addi	r2,r2,-4384
    8974:	14000417 	ldw	r16,16(r2)
    8978:	14400517 	ldw	r17,20(r2)
    897c:	00800074 	movhi	r2,1
    8980:	10bbb204 	addi	r2,r2,-4408
    8984:	11400017 	ldw	r5,0(r2)
    8988:	11800117 	ldw	r6,4(r2)
    898c:	d0a00217 	ldw	r2,-32760(gp)
    8990:	01000074 	movhi	r4,1
    8994:	213a9004 	addi	r4,r4,-5568
    8998:	20c00017 	ldw	r3,0(r4)
    899c:	2809883a 	mov	r4,r5
    89a0:	300b883a 	mov	r5,r6
    89a4:	100d883a 	mov	r6,r2
    89a8:	180f883a 	mov	r7,r3
    89ac:	000ad300 	call	ad30 <__muldf3>
    89b0:	100f883a 	mov	r7,r2
    89b4:	1811883a 	mov	r8,r3
    89b8:	380b883a 	mov	r5,r7
    89bc:	400d883a 	mov	r6,r8
    89c0:	01000074 	movhi	r4,1
    89c4:	213b9e04 	addi	r4,r4,-4488
    89c8:	20800817 	ldw	r2,32(r4)
    89cc:	20c00917 	ldw	r3,36(r4)
    89d0:	2809883a 	mov	r4,r5
    89d4:	300b883a 	mov	r5,r6
    89d8:	100d883a 	mov	r6,r2
    89dc:	180f883a 	mov	r7,r3
    89e0:	000b0140 	call	b014 <__divdf3>
    89e4:	1009883a 	mov	r4,r2
    89e8:	180b883a 	mov	r5,r3
    89ec:	2005883a 	mov	r2,r4
    89f0:	2807883a 	mov	r3,r5
    89f4:	8009883a 	mov	r4,r16
    89f8:	880b883a 	mov	r5,r17
    89fc:	100d883a 	mov	r6,r2
    8a00:	180f883a 	mov	r7,r3
    8a04:	000ac7c0 	call	ac7c <__adddf3>
    8a08:	1009883a 	mov	r4,r2
    8a0c:	180b883a 	mov	r5,r3
    8a10:	2005883a 	mov	r2,r4
    8a14:	2807883a 	mov	r3,r5
    8a18:	01000074 	movhi	r4,1
    8a1c:	213bb204 	addi	r4,r4,-4408
    8a20:	20800415 	stw	r2,16(r4)
    8a24:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	Pan_V[1] = Pan_R[2] + Pan_R[0];
    8a28:	00800074 	movhi	r2,1
    8a2c:	10bbb204 	addi	r2,r2,-4408
    8a30:	11400417 	ldw	r5,16(r2)
    8a34:	11800517 	ldw	r6,20(r2)
    8a38:	01000074 	movhi	r4,1
    8a3c:	213bb204 	addi	r4,r4,-4408
    8a40:	20800017 	ldw	r2,0(r4)
    8a44:	20c00117 	ldw	r3,4(r4)
    8a48:	2809883a 	mov	r4,r5
    8a4c:	300b883a 	mov	r5,r6
    8a50:	100d883a 	mov	r6,r2
    8a54:	180f883a 	mov	r7,r3
    8a58:	000ac7c0 	call	ac7c <__adddf3>
    8a5c:	1009883a 	mov	r4,r2
    8a60:	180b883a 	mov	r5,r3
    8a64:	2005883a 	mov	r2,r4
    8a68:	2807883a 	mov	r3,r5
    8a6c:	01000074 	movhi	r4,1
    8a70:	213b8a04 	addi	r4,r4,-4568
    8a74:	20800215 	stw	r2,8(r4)
    8a78:	20c00315 	stw	r3,12(r4)

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	Pan_V[4] = ((Pan_V[1] < Pan_P[5]) ? 
    8a7c:	00800074 	movhi	r2,1
    8a80:	10bb8a04 	addi	r2,r2,-4568
    8a84:	11400217 	ldw	r5,8(r2)
    8a88:	11800317 	ldw	r6,12(r2)
    8a8c:	01000074 	movhi	r4,1
    8a90:	213b9e04 	addi	r4,r4,-4488
    8a94:	20800a17 	ldw	r2,40(r4)
    8a98:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		Pan_P[5]
	:
    8a9c:	2809883a 	mov	r4,r5
    8aa0:	300b883a 	mov	r5,r6
    8aa4:	100d883a 	mov	r6,r2
    8aa8:	180f883a 	mov	r7,r3
    8aac:	000b2900 	call	b290 <__ltdf2>
    8ab0:	1000050e 	bge	r2,zero,8ac8 <PanCalculateDynamic+0x540>
    8ab4:	01000074 	movhi	r4,1
    8ab8:	213b9e04 	addi	r4,r4,-4488
    8abc:	20800a17 	ldw	r2,40(r4)
    8ac0:	20c00b17 	ldw	r3,44(r4)
    8ac4:	00001906 	br	8b2c <PanCalculateDynamic+0x5a4>
		/* (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) */
		((Pan_V[1] > Pan_P[6]) ? 
    8ac8:	00800074 	movhi	r2,1
    8acc:	10bb8a04 	addi	r2,r2,-4568
    8ad0:	11400217 	ldw	r5,8(r2)
    8ad4:	11800317 	ldw	r6,12(r2)
    8ad8:	01000074 	movhi	r4,1
    8adc:	213b9e04 	addi	r4,r4,-4488
    8ae0:	20800c17 	ldw	r2,48(r4)
    8ae4:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			Pan_P[6]
		:
    8ae8:	2809883a 	mov	r4,r5
    8aec:	300b883a 	mov	r5,r6
    8af0:	100d883a 	mov	r6,r2
    8af4:	180f883a 	mov	r7,r3
    8af8:	000b1c80 	call	b1c8 <__gtdf2>
    8afc:	0080050e 	bge	zero,r2,8b14 <PanCalculateDynamic+0x58c>
    8b00:	00800074 	movhi	r2,1
    8b04:	10bb9e04 	addi	r2,r2,-4488
    8b08:	11000c17 	ldw	r4,48(r2)
    8b0c:	11400d17 	ldw	r5,52(r2)
    8b10:	00000406 	br	8b24 <PanCalculateDynamic+0x59c>
    8b14:	00800074 	movhi	r2,1
    8b18:	10bb8a04 	addi	r2,r2,-4568
    8b1c:	11000217 	ldw	r4,8(r2)
    8b20:	11400317 	ldw	r5,12(r2)

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	Pan_V[4] = ((Pan_V[1] < Pan_P[5]) ? 
		/* SignalLimiter2\minimum */
		Pan_P[5]
	:
    8b24:	2005883a 	mov	r2,r4
    8b28:	2807883a 	mov	r3,r5

	/* PID1\output = PID1\uI + PID1\uD; */
	Pan_V[1] = Pan_R[2] + Pan_R[0];

	/* SignalLimiter2\output = (if PID1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PID1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PID1\output end) end); */
	Pan_V[4] = ((Pan_V[1] < Pan_P[5]) ? 
    8b2c:	01000074 	movhi	r4,1
    8b30:	213b8a04 	addi	r4,r4,-4568
    8b34:	20800815 	stw	r2,32(r4)
    8b38:	20c00915 	stw	r3,36(r4)
		)
	);


	/* increment the step counter */
	Pan_steps++;
    8b3c:	d0a0ee17 	ldw	r2,-31816(gp)
    8b40:	10800044 	addi	r2,r2,1
    8b44:	d0a0ee15 	stw	r2,-31816(gp)
}
    8b48:	e037883a 	mov	sp,fp
    8b4c:	dfc00717 	ldw	ra,28(sp)
    8b50:	df000617 	ldw	fp,24(sp)
    8b54:	dd400517 	ldw	r21,20(sp)
    8b58:	dd000417 	ldw	r20,16(sp)
    8b5c:	dcc00317 	ldw	r19,12(sp)
    8b60:	dc800217 	ldw	r18,8(sp)
    8b64:	dc400117 	ldw	r17,4(sp)
    8b68:	dc000017 	ldw	r16,0(sp)
    8b6c:	dec00804 	addi	sp,sp,32
    8b70:	f800283a 	ret

00008b74 <PanCalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void PanCalculateOutput (void)
{
    8b74:	deffff04 	addi	sp,sp,-4
    8b78:	df000015 	stw	fp,0(sp)
    8b7c:	d839883a 	mov	fp,sp
	/* corr = corrGain\corr; */
	Pan_V[6] = Pan_V[0];
    8b80:	01000074 	movhi	r4,1
    8b84:	213b8a04 	addi	r4,r4,-4568
    8b88:	20800017 	ldw	r2,0(r4)
    8b8c:	20c00117 	ldw	r3,4(r4)
    8b90:	01000074 	movhi	r4,1
    8b94:	213b8a04 	addi	r4,r4,-4568
    8b98:	20800c15 	stw	r2,48(r4)
    8b9c:	20c00d15 	stw	r3,52(r4)

	/* out = SignalLimiter2\output; */
	Pan_V[9] = Pan_V[4];
    8ba0:	01000074 	movhi	r4,1
    8ba4:	213b8a04 	addi	r4,r4,-4568
    8ba8:	20800817 	ldw	r2,32(r4)
    8bac:	20c00917 	ldw	r3,36(r4)
    8bb0:	01000074 	movhi	r4,1
    8bb4:	213b8a04 	addi	r4,r4,-4568
    8bb8:	20801215 	stw	r2,72(r4)
    8bbc:	20c01315 	stw	r3,76(r4)

}
    8bc0:	e037883a 	mov	sp,fp
    8bc4:	df000017 	ldw	fp,0(sp)
    8bc8:	dec00104 	addi	sp,sp,4
    8bcc:	f800283a 	ret

00008bd0 <PanCalculateFinal>:
/* This function calculates the final equations of the model.
 * These equations are calculated after all the calculations
 * are performed
 */
void PanCalculateFinal (void)
{
    8bd0:	deffff04 	addi	sp,sp,-4
    8bd4:	df000015 	stw	fp,0(sp)
    8bd8:	d839883a 	mov	fp,sp

}
    8bdc:	e037883a 	mov	sp,fp
    8be0:	df000017 	ldw	fp,0(sp)
    8be4:	dec00104 	addi	sp,sp,4
    8be8:	f800283a 	ret

00008bec <PanModelTerminate>:

/* this method is called after all calculations are performed */
void PanModelTerminate(void)
{
    8bec:	deffff04 	addi	sp,sp,-4
    8bf0:	df000015 	stw	fp,0(sp)
    8bf4:	d839883a 	mov	fp,sp
}
    8bf8:	e037883a 	mov	sp,fp
    8bfc:	df000017 	ldw	fp,0(sp)
    8c00:	dec00104 	addi	sp,sp,4
    8c04:	f800283a 	ret

00008c08 <PanCopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void PanCopyInputsToVariables (XXDouble *u)
{
    8c08:	defffe04 	addi	sp,sp,-8
    8c0c:	df000115 	stw	fp,4(sp)
    8c10:	df000104 	addi	fp,sp,4
    8c14:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	Pan_V[7] = u[0];		/* in */
    8c18:	e13fff17 	ldw	r4,-4(fp)
    8c1c:	20800017 	ldw	r2,0(r4)
    8c20:	20c00117 	ldw	r3,4(r4)
    8c24:	01000074 	movhi	r4,1
    8c28:	213b8a04 	addi	r4,r4,-4568
    8c2c:	20800e15 	stw	r2,56(r4)
    8c30:	20c00f15 	stw	r3,60(r4)
	Pan_V[8] = u[1];		/* position */
    8c34:	e13fff17 	ldw	r4,-4(fp)
    8c38:	20800217 	ldw	r2,8(r4)
    8c3c:	20c00317 	ldw	r3,12(r4)
    8c40:	01000074 	movhi	r4,1
    8c44:	213b8a04 	addi	r4,r4,-4568
    8c48:	20801015 	stw	r2,64(r4)
    8c4c:	20c01115 	stw	r3,68(r4)

}
    8c50:	e037883a 	mov	sp,fp
    8c54:	df000017 	ldw	fp,0(sp)
    8c58:	dec00104 	addi	sp,sp,4
    8c5c:	f800283a 	ret

00008c60 <PanCopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void PanCopyVariablesToOutputs (XXDouble *y)
{
    8c60:	defffe04 	addi	sp,sp,-8
    8c64:	df000115 	stw	fp,4(sp)
    8c68:	df000104 	addi	fp,sp,4
    8c6c:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	Pan_V[6];		/* corr */
    8c70:	01000074 	movhi	r4,1
    8c74:	213b8a04 	addi	r4,r4,-4568
    8c78:	20800c17 	ldw	r2,48(r4)
    8c7c:	20c00d17 	ldw	r3,52(r4)
    8c80:	e13fff17 	ldw	r4,-4(fp)
    8c84:	20800015 	stw	r2,0(r4)
    8c88:	20c00115 	stw	r3,4(r4)
	y[1] = 	Pan_V[9];		/* out */
    8c8c:	e0bfff17 	ldw	r2,-4(fp)
    8c90:	11000204 	addi	r4,r2,8
    8c94:	01400074 	movhi	r5,1
    8c98:	297b8a04 	addi	r5,r5,-4568
    8c9c:	28801217 	ldw	r2,72(r5)
    8ca0:	28c01317 	ldw	r3,76(r5)
    8ca4:	20800015 	stw	r2,0(r4)
    8ca8:	20c00115 	stw	r3,4(r4)

}
    8cac:	e037883a 	mov	sp,fp
    8cb0:	df000017 	ldw	fp,0(sp)
    8cb4:	dec00104 	addi	sp,sp,4
    8cb8:	f800283a 	ret

00008cbc <PanInitializeSubmodel>:

/* The initialization function for submodel */
void PanInitializeSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    8cbc:	defffa04 	addi	sp,sp,-24
    8cc0:	dfc00515 	stw	ra,20(sp)
    8cc4:	df000415 	stw	fp,16(sp)
    8cc8:	df000404 	addi	fp,sp,16
    8ccc:	e13ffc15 	stw	r4,-16(fp)
    8cd0:	e17ffd15 	stw	r5,-12(fp)
    8cd4:	e1bffe15 	stw	r6,-8(fp)
    8cd8:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	Pan_initialize = XXTRUE;
    8cdc:	00800074 	movhi	r2,1
    8ce0:	10ba9104 	addi	r2,r2,-5564
    8ce4:	00c00044 	movi	r3,1
    8ce8:	10c00005 	stb	r3,0(r2)
	Pan_steps = 0;
    8cec:	00800074 	movhi	r2,1
    8cf0:	10bb7b04 	addi	r2,r2,-4628
    8cf4:	10000015 	stw	zero,0(r2)
	PanModelInitialize ();
    8cf8:	00085000 	call	8500 <PanModelInitialize>
	PanDiscreteInitialize ();
    8cfc:	00081f40 	call	81f4 <PanDiscreteInitialize>

	/* Copy the inputs */
	Pan_time = t;
    8d00:	00800074 	movhi	r2,1
    8d04:	10bb7904 	addi	r2,r2,-4636
    8d08:	e0fffe17 	ldw	r3,-8(fp)
    8d0c:	10c00015 	stw	r3,0(r2)
    8d10:	e0ffff17 	ldw	r3,-4(fp)
    8d14:	10c00115 	stw	r3,4(r2)
	PanCopyInputsToVariables (u);
    8d18:	e13ffc17 	ldw	r4,-16(fp)
    8d1c:	0008c080 	call	8c08 <PanCopyInputsToVariables>

	/* Calculate the model for the first time */
	PanCalculateInitial ();
    8d20:	00085340 	call	8534 <PanCalculateInitial>
	PanCalculateStatic ();
    8d24:	00085500 	call	8550 <PanCalculateStatic>
	PanCalculateInput ();
    8d28:	000856c0 	call	856c <PanCalculateInput>
	PanCalculateDynamic ();
    8d2c:	00085880 	call	8588 <PanCalculateDynamic>
	PanCalculateOutput ();
    8d30:	0008b740 	call	8b74 <PanCalculateOutput>

	/* Set the outputs */
	PanCopyVariablesToOutputs (y);
    8d34:	e13ffd17 	ldw	r4,-12(fp)
    8d38:	0008c600 	call	8c60 <PanCopyVariablesToOutputs>

	/* End of initialization phase */
	Pan_initialize = XXFALSE;
    8d3c:	00800074 	movhi	r2,1
    8d40:	10ba9104 	addi	r2,r2,-5564
    8d44:	10000005 	stb	zero,0(r2)
}
    8d48:	e037883a 	mov	sp,fp
    8d4c:	dfc00117 	ldw	ra,4(sp)
    8d50:	df000017 	ldw	fp,0(sp)
    8d54:	dec00204 	addi	sp,sp,8
    8d58:	f800283a 	ret

00008d5c <PanCalculateSubmodel>:

/* The function that calculates the submodel */
void PanCalculateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    8d5c:	defffa04 	addi	sp,sp,-24
    8d60:	dfc00515 	stw	ra,20(sp)
    8d64:	df000415 	stw	fp,16(sp)
    8d68:	df000404 	addi	fp,sp,16
    8d6c:	e13ffc15 	stw	r4,-16(fp)
    8d70:	e17ffd15 	stw	r5,-12(fp)
    8d74:	e1bffe15 	stw	r6,-8(fp)
    8d78:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	Pan_time = t;
    8d7c:	00800074 	movhi	r2,1
    8d80:	10bb7904 	addi	r2,r2,-4636
    8d84:	e0fffe17 	ldw	r3,-8(fp)
    8d88:	10c00015 	stw	r3,0(r2)
    8d8c:	e0ffff17 	ldw	r3,-4(fp)
    8d90:	10c00115 	stw	r3,4(r2)
	PanCopyInputsToVariables (u);
    8d94:	e13ffc17 	ldw	r4,-16(fp)
    8d98:	0008c080 	call	8c08 <PanCopyInputsToVariables>

	/* Calculate the model */
	PanCalculateInput ();
    8d9c:	000856c0 	call	856c <PanCalculateInput>
	PanDiscreteStep ();
    8da0:	000823c0 	call	823c <PanDiscreteStep>
	PanCalculateOutput ();
    8da4:	0008b740 	call	8b74 <PanCalculateOutput>

	/* Copy the outputs */
	PanCopyVariablesToOutputs (y);
    8da8:	e13ffd17 	ldw	r4,-12(fp)
    8dac:	0008c600 	call	8c60 <PanCopyVariablesToOutputs>
}
    8db0:	e037883a 	mov	sp,fp
    8db4:	dfc00117 	ldw	ra,4(sp)
    8db8:	df000017 	ldw	fp,0(sp)
    8dbc:	dec00204 	addi	sp,sp,8
    8dc0:	f800283a 	ret

00008dc4 <PanTerminateSubmodel>:

/* The termination function for submodel */
void PanTerminateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    8dc4:	defffa04 	addi	sp,sp,-24
    8dc8:	dfc00515 	stw	ra,20(sp)
    8dcc:	df000415 	stw	fp,16(sp)
    8dd0:	df000404 	addi	fp,sp,16
    8dd4:	e13ffc15 	stw	r4,-16(fp)
    8dd8:	e17ffd15 	stw	r5,-12(fp)
    8ddc:	e1bffe15 	stw	r6,-8(fp)
    8de0:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	Pan_time = t;
    8de4:	00800074 	movhi	r2,1
    8de8:	10bb7904 	addi	r2,r2,-4636
    8dec:	e0fffe17 	ldw	r3,-8(fp)
    8df0:	10c00015 	stw	r3,0(r2)
    8df4:	e0ffff17 	ldw	r3,-4(fp)
    8df8:	10c00115 	stw	r3,4(r2)
	PanCopyInputsToVariables (u);
    8dfc:	e13ffc17 	ldw	r4,-16(fp)
    8e00:	0008c080 	call	8c08 <PanCopyInputsToVariables>

	/* Calculate the final model equations */
	PanCalculateFinal ();
    8e04:	0008bd00 	call	8bd0 <PanCalculateFinal>

	/* Set the outputs */
	PanCopyVariablesToOutputs (y);
    8e08:	e13ffd17 	ldw	r4,-12(fp)
    8e0c:	0008c600 	call	8c60 <PanCopyVariablesToOutputs>

	/* and terminate the model itself (releasing memory) */
	PanModelTerminate ();
    8e10:	0008bec0 	call	8bec <PanModelTerminate>
	PanDiscreteTerminate ();
    8e14:	00082200 	call	8220 <PanDiscreteTerminate>
}
    8e18:	e037883a 	mov	sp,fp
    8e1c:	dfc00117 	ldw	ra,4(sp)
    8e20:	df000017 	ldw	fp,0(sp)
    8e24:	dec00204 	addi	sp,sp,8
    8e28:	f800283a 	ret

00008e2c <TiltDiscreteInitialize>:
 * Discrete integration method
 *********************************************************************/

/* the initialization of the Discrete integration method */
void TiltDiscreteInitialize (void)
{
    8e2c:	deffff04 	addi	sp,sp,-4
    8e30:	df000015 	stw	fp,0(sp)
    8e34:	d839883a 	mov	fp,sp
	/* nothing to be done */
	Tilt_major = XXTRUE;
    8e38:	00800074 	movhi	r2,1
    8e3c:	10ba9844 	addi	r2,r2,-5535
    8e40:	00c00044 	movi	r3,1
    8e44:	10c00005 	stb	r3,0(r2)
}
    8e48:	e037883a 	mov	sp,fp
    8e4c:	df000017 	ldw	fp,0(sp)
    8e50:	dec00104 	addi	sp,sp,4
    8e54:	f800283a 	ret

00008e58 <TiltDiscreteTerminate>:

/* the termination of the Discrete integration method */
void TiltDiscreteTerminate (void)
{
    8e58:	deffff04 	addi	sp,sp,-4
    8e5c:	df000015 	stw	fp,0(sp)
    8e60:	d839883a 	mov	fp,sp
	/* nothing to be done */
}
    8e64:	e037883a 	mov	sp,fp
    8e68:	df000017 	ldw	fp,0(sp)
    8e6c:	dec00104 	addi	sp,sp,4
    8e70:	f800283a 	ret

00008e74 <TiltDiscreteStep>:

/* the Discrete integration method itself */
void TiltDiscreteStep (void)
{
    8e74:	defffd04 	addi	sp,sp,-12
    8e78:	dfc00215 	stw	ra,8(sp)
    8e7c:	df000115 	stw	fp,4(sp)
    8e80:	df000104 	addi	fp,sp,4
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    8e84:	e03fff15 	stw	zero,-4(fp)
    8e88:	00001106 	br	8ed0 <TiltDiscreteStep+0x5c>
	{
		/* just a move of the new state */
		Tilt_s [index] = Tilt_R [index];
    8e8c:	00c00074 	movhi	r3,1
    8e90:	18fbea04 	addi	r3,r3,-4184
    8e94:	e0bfff17 	ldw	r2,-4(fp)
    8e98:	100490fa 	slli	r2,r2,3
    8e9c:	1889883a 	add	r4,r3,r2
    8ea0:	20800017 	ldw	r2,0(r4)
    8ea4:	20c00117 	ldw	r3,4(r4)
    8ea8:	01400074 	movhi	r5,1
    8eac:	297bf004 	addi	r5,r5,-4160
    8eb0:	e13fff17 	ldw	r4,-4(fp)
    8eb4:	200890fa 	slli	r4,r4,3
    8eb8:	2909883a 	add	r4,r5,r4
    8ebc:	20800015 	stw	r2,0(r4)
    8ec0:	20c00115 	stw	r3,4(r4)
void TiltDiscreteStep (void)
{
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < xx_STATE_SIZE; index++)
    8ec4:	e0bfff17 	ldw	r2,-4(fp)
    8ec8:	10800044 	addi	r2,r2,1
    8ecc:	e0bfff15 	stw	r2,-4(fp)
    8ed0:	e0bfff17 	ldw	r2,-4(fp)
    8ed4:	108000d0 	cmplti	r2,r2,3
    8ed8:	103fec1e 	bne	r2,zero,8e8c <TiltDiscreteStep+0x18>
	{
		/* just a move of the new state */
		Tilt_s [index] = Tilt_R [index];
	}
	/* increment the simulation time */
	Tilt_time += Tilt_step_size;
    8edc:	00800074 	movhi	r2,1
    8ee0:	10bb7f04 	addi	r2,r2,-4612
    8ee4:	11400017 	ldw	r5,0(r2)
    8ee8:	11800117 	ldw	r6,4(r2)
    8eec:	01000074 	movhi	r4,1
    8ef0:	213a9604 	addi	r4,r4,-5544
    8ef4:	20800017 	ldw	r2,0(r4)
    8ef8:	20c00117 	ldw	r3,4(r4)
    8efc:	2809883a 	mov	r4,r5
    8f00:	300b883a 	mov	r5,r6
    8f04:	100d883a 	mov	r6,r2
    8f08:	180f883a 	mov	r7,r3
    8f0c:	000ac7c0 	call	ac7c <__adddf3>
    8f10:	1009883a 	mov	r4,r2
    8f14:	180b883a 	mov	r5,r3
    8f18:	2005883a 	mov	r2,r4
    8f1c:	2807883a 	mov	r3,r5
    8f20:	01000074 	movhi	r4,1
    8f24:	213b7f04 	addi	r4,r4,-4612
    8f28:	20800015 	stw	r2,0(r4)
    8f2c:	20c00115 	stw	r3,4(r4)

	Tilt_major = XXTRUE;
    8f30:	00800074 	movhi	r2,1
    8f34:	10ba9844 	addi	r2,r2,-5535
    8f38:	00c00044 	movi	r3,1
    8f3c:	10c00005 	stb	r3,0(r2)

	/* evaluate the dynamic part to calculate the new rates */
	TiltCalculateDynamic ();
    8f40:	00091c00 	call	91c0 <TiltCalculateDynamic>
}
    8f44:	e037883a 	mov	sp,fp
    8f48:	dfc00117 	ldw	ra,4(sp)
    8f4c:	df000017 	ldw	fp,0(sp)
    8f50:	dec00204 	addi	sp,sp,8
    8f54:	f800283a 	ret

00008f58 <TiltModelInitialize_parameters>:

#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", off)
#endif
void TiltModelInitialize_parameters(void)
{
    8f58:	deffff04 	addi	sp,sp,-4
    8f5c:	df000015 	stw	fp,0(sp)
    8f60:	d839883a 	mov	fp,sp
	/* set the parameters */
	Tilt_P[0] = 0.0;		/* corrGain\K */
    8f64:	00800074 	movhi	r2,1
    8f68:	10bbdc04 	addi	r2,r2,-4240
    8f6c:	10000015 	stw	zero,0(r2)
    8f70:	10000115 	stw	zero,4(r2)
	Tilt_P[1] = 1.6;		/* PID1\kp */
    8f74:	00800074 	movhi	r2,1
    8f78:	10bbdc04 	addi	r2,r2,-4240
    8f7c:	00e666b4 	movhi	r3,39322
    8f80:	18e66684 	addi	r3,r3,-26214
    8f84:	10c00215 	stw	r3,8(r2)
    8f88:	00cffeb4 	movhi	r3,16378
    8f8c:	18e66644 	addi	r3,r3,-26215
    8f90:	10c00315 	stw	r3,12(r2)
	Tilt_P[2] = 0.05;		/* PID1\tauD */
    8f94:	00800074 	movhi	r2,1
    8f98:	10bbdc04 	addi	r2,r2,-4240
    8f9c:	00e666b4 	movhi	r3,39322
    8fa0:	18e66684 	addi	r3,r3,-26214
    8fa4:	10c00415 	stw	r3,16(r2)
    8fa8:	00cfeab4 	movhi	r3,16298
    8fac:	18e66644 	addi	r3,r3,-26215
    8fb0:	10c00515 	stw	r3,20(r2)
	Tilt_P[3] = 0.001;		/* PID1\beta */
    8fb4:	00800074 	movhi	r2,1
    8fb8:	10bbdc04 	addi	r2,r2,-4240
    8fbc:	00f4bcb4 	movhi	r3,54002
    8fc0:	18ea7f04 	addi	r3,r3,-22020
    8fc4:	10c00615 	stw	r3,24(r2)
    8fc8:	00cfd434 	movhi	r3,16208
    8fcc:	18d89344 	addi	r3,r3,25165
    8fd0:	10c00715 	stw	r3,28(r2)
	Tilt_P[4] = 10.5;		/* PID1\tauI */
    8fd4:	00800074 	movhi	r2,1
    8fd8:	10bbdc04 	addi	r2,r2,-4240
    8fdc:	10000815 	stw	zero,32(r2)
    8fe0:	00d00974 	movhi	r3,16421
    8fe4:	10c00915 	stw	r3,36(r2)
	Tilt_P[5] = -0.99;		/* SignalLimiter2\minimum */
    8fe8:	00800074 	movhi	r2,1
    8fec:	10bbdc04 	addi	r2,r2,-4240
    8ff0:	00deb874 	movhi	r3,31457
    8ff4:	18d1eb84 	addi	r3,r3,18350
    8ff8:	10c00a15 	stw	r3,40(r2)
    8ffc:	00effc34 	movhi	r3,49136
    9000:	18eb8504 	addi	r3,r3,-20972
    9004:	10c00b15 	stw	r3,44(r2)
	Tilt_P[6] = 0.99;		/* SignalLimiter2\maximum */
    9008:	00800074 	movhi	r2,1
    900c:	10bbdc04 	addi	r2,r2,-4240
    9010:	00deb874 	movhi	r3,31457
    9014:	18d1eb84 	addi	r3,r3,18350
    9018:	10c00c15 	stw	r3,48(r2)
    901c:	00cffc34 	movhi	r3,16368
    9020:	18eb8504 	addi	r3,r3,-20972
    9024:	10c00d15 	stw	r3,52(r2)

}
    9028:	e037883a 	mov	sp,fp
    902c:	df000017 	ldw	fp,0(sp)
    9030:	dec00104 	addi	sp,sp,4
    9034:	f800283a 	ret

00009038 <TiltModelInitialize_initialvalues>:
#if (7 > 8192) && defined _MSC_VER
#pragma optimize("", on)
#endif

void TiltModelInitialize_initialvalues(void)
{
    9038:	deffff04 	addi	sp,sp,-4
    903c:	df000015 	stw	fp,0(sp)
    9040:	d839883a 	mov	fp,sp
	/* set the initial values */
	Tilt_I[0] = 0.0;		/* PID1\uD_previous_initial */
    9044:	00800074 	movhi	r2,1
    9048:	10bbd604 	addi	r2,r2,-4264
    904c:	10000015 	stw	zero,0(r2)
    9050:	10000115 	stw	zero,4(r2)
	Tilt_I[1] = 0.0;		/* PID1\error_previous_initial */
    9054:	00800074 	movhi	r2,1
    9058:	10bbd604 	addi	r2,r2,-4264
    905c:	10000215 	stw	zero,8(r2)
    9060:	10000315 	stw	zero,12(r2)
	Tilt_I[2] = 0.0;		/* PID1\uI_previous_initial */
    9064:	00800074 	movhi	r2,1
    9068:	10bbd604 	addi	r2,r2,-4264
    906c:	10000415 	stw	zero,16(r2)
    9070:	10000515 	stw	zero,20(r2)

}
    9074:	e037883a 	mov	sp,fp
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00104 	addi	sp,sp,4
    9080:	f800283a 	ret

00009084 <TiltModelInitialize_states>:

void TiltModelInitialize_states(void)
{
    9084:	deffff04 	addi	sp,sp,-4
    9088:	df000015 	stw	fp,0(sp)
    908c:	d839883a 	mov	fp,sp
	/* set the states */
	Tilt_s[0] = Tilt_I[0];		/* PID1\uD_previous */
    9090:	01000074 	movhi	r4,1
    9094:	213bd604 	addi	r4,r4,-4264
    9098:	20800017 	ldw	r2,0(r4)
    909c:	20c00117 	ldw	r3,4(r4)
    90a0:	01000074 	movhi	r4,1
    90a4:	213bf004 	addi	r4,r4,-4160
    90a8:	20800015 	stw	r2,0(r4)
    90ac:	20c00115 	stw	r3,4(r4)
	Tilt_s[1] = Tilt_I[1];		/* PID1\error_previous */
    90b0:	01000074 	movhi	r4,1
    90b4:	213bd604 	addi	r4,r4,-4264
    90b8:	20800217 	ldw	r2,8(r4)
    90bc:	20c00317 	ldw	r3,12(r4)
    90c0:	01000074 	movhi	r4,1
    90c4:	213bf004 	addi	r4,r4,-4160
    90c8:	20800215 	stw	r2,8(r4)
    90cc:	20c00315 	stw	r3,12(r4)
	Tilt_s[2] = Tilt_I[2];		/* PID1\uI_previous */
    90d0:	01000074 	movhi	r4,1
    90d4:	213bd604 	addi	r4,r4,-4264
    90d8:	20800417 	ldw	r2,16(r4)
    90dc:	20c00517 	ldw	r3,20(r4)
    90e0:	01000074 	movhi	r4,1
    90e4:	213bf004 	addi	r4,r4,-4160
    90e8:	20800415 	stw	r2,16(r4)
    90ec:	20c00515 	stw	r3,20(r4)

}
    90f0:	e037883a 	mov	sp,fp
    90f4:	df000017 	ldw	fp,0(sp)
    90f8:	dec00104 	addi	sp,sp,4
    90fc:	f800283a 	ret

00009100 <TiltModelInitialize_variables>:

void TiltModelInitialize_variables(void)
{
    9100:	defffe04 	addi	sp,sp,-8
    9104:	dfc00115 	stw	ra,4(sp)
    9108:	df000015 	stw	fp,0(sp)
    910c:	d839883a 	mov	fp,sp
	/* initialize the variable memory to zero */
	memset(Tilt_V, 0, xx_variables_size * sizeof(XXDouble));
    9110:	01000074 	movhi	r4,1
    9114:	213bbe04 	addi	r4,r4,-4360
    9118:	000b883a 	mov	r5,zero
    911c:	01801804 	movi	r6,96
    9120:	000bdcc0 	call	bdcc <memset>
}
    9124:	e037883a 	mov	sp,fp
    9128:	dfc00117 	ldw	ra,4(sp)
    912c:	df000017 	ldw	fp,0(sp)
    9130:	dec00204 	addi	sp,sp,8
    9134:	f800283a 	ret

00009138 <TiltModelInitialize>:

/* this method is called before calculation is possible */
void TiltModelInitialize (void)
{
    9138:	defffe04 	addi	sp,sp,-8
    913c:	dfc00115 	stw	ra,4(sp)
    9140:	df000015 	stw	fp,0(sp)
    9144:	d839883a 	mov	fp,sp
	TiltModelInitialize_parameters();
    9148:	0008f580 	call	8f58 <TiltModelInitialize_parameters>
	TiltModelInitialize_variables();
    914c:	00091000 	call	9100 <TiltModelInitialize_variables>
	TiltModelInitialize_initialvalues();
    9150:	00090380 	call	9038 <TiltModelInitialize_initialvalues>
	TiltModelInitialize_states();
    9154:	00090840 	call	9084 <TiltModelInitialize_states>
}
    9158:	e037883a 	mov	sp,fp
    915c:	dfc00117 	ldw	ra,4(sp)
    9160:	df000017 	ldw	fp,0(sp)
    9164:	dec00204 	addi	sp,sp,8
    9168:	f800283a 	ret

0000916c <TiltCalculateInitial>:

/* This function calculates the initial equations of the model.
 * These equations are calculated before anything else
 */
void TiltCalculateInitial (void)
{
    916c:	deffff04 	addi	sp,sp,-4
    9170:	df000015 	stw	fp,0(sp)
    9174:	d839883a 	mov	fp,sp

}
    9178:	e037883a 	mov	sp,fp
    917c:	df000017 	ldw	fp,0(sp)
    9180:	dec00104 	addi	sp,sp,4
    9184:	f800283a 	ret

00009188 <TiltCalculateStatic>:

/* This function calculates the static equations of the model.
 * These equations are only dependent from parameters and constants
 */
void TiltCalculateStatic (void)
{
    9188:	deffff04 	addi	sp,sp,-4
    918c:	df000015 	stw	fp,0(sp)
    9190:	d839883a 	mov	fp,sp

}
    9194:	e037883a 	mov	sp,fp
    9198:	df000017 	ldw	fp,0(sp)
    919c:	dec00104 	addi	sp,sp,4
    91a0:	f800283a 	ret

000091a4 <TiltCalculateInput>:
/* This function calculates the input equations of the model.
 * These equations are dynamic equations that must not change
 * in calls from the integration method (like random and delay).
 */
void TiltCalculateInput (void)
{
    91a4:	deffff04 	addi	sp,sp,-4
    91a8:	df000015 	stw	fp,0(sp)
    91ac:	d839883a 	mov	fp,sp

}
    91b0:	e037883a 	mov	sp,fp
    91b4:	df000017 	ldw	fp,0(sp)
    91b8:	dec00104 	addi	sp,sp,4
    91bc:	f800283a 	ret

000091c0 <TiltCalculateDynamic>:
/* This function calculates the dynamic equations of the model.
 * These equations are called from the integration method
 * to calculate the new model rates (that are then integrated).
 */
void TiltCalculateDynamic (void)
{
    91c0:	defff804 	addi	sp,sp,-32
    91c4:	dfc00715 	stw	ra,28(sp)
    91c8:	df000615 	stw	fp,24(sp)
    91cc:	dd400515 	stw	r21,20(sp)
    91d0:	dd000415 	stw	r20,16(sp)
    91d4:	dcc00315 	stw	r19,12(sp)
    91d8:	dc800215 	stw	r18,8(sp)
    91dc:	dc400115 	stw	r17,4(sp)
    91e0:	dc000015 	stw	r16,0(sp)
    91e4:	d839883a 	mov	fp,sp
	/* PID1\factor = 1 / (sampletime + PID1\tauD * PID1\beta); */
	Tilt_V[3] = 1.0 / (Tilt_step_size + Tilt_P[2] * Tilt_P[3]);
    91e8:	00800074 	movhi	r2,1
    91ec:	10bbdc04 	addi	r2,r2,-4240
    91f0:	11400417 	ldw	r5,16(r2)
    91f4:	11800517 	ldw	r6,20(r2)
    91f8:	01000074 	movhi	r4,1
    91fc:	213bdc04 	addi	r4,r4,-4240
    9200:	20800617 	ldw	r2,24(r4)
    9204:	20c00717 	ldw	r3,28(r4)
    9208:	2809883a 	mov	r4,r5
    920c:	300b883a 	mov	r5,r6
    9210:	100d883a 	mov	r6,r2
    9214:	180f883a 	mov	r7,r3
    9218:	000ad300 	call	ad30 <__muldf3>
    921c:	100f883a 	mov	r7,r2
    9220:	1811883a 	mov	r8,r3
    9224:	380b883a 	mov	r5,r7
    9228:	400d883a 	mov	r6,r8
    922c:	d0a00917 	ldw	r2,-32732(gp)
    9230:	01000074 	movhi	r4,1
    9234:	213a9704 	addi	r4,r4,-5540
    9238:	20c00017 	ldw	r3,0(r4)
    923c:	2809883a 	mov	r4,r5
    9240:	300b883a 	mov	r5,r6
    9244:	100d883a 	mov	r6,r2
    9248:	180f883a 	mov	r7,r3
    924c:	000ac7c0 	call	ac7c <__adddf3>
    9250:	1009883a 	mov	r4,r2
    9254:	180b883a 	mov	r5,r3
    9258:	2005883a 	mov	r2,r4
    925c:	2807883a 	mov	r3,r5
    9260:	0009883a 	mov	r4,zero
    9264:	014ffc34 	movhi	r5,16368
    9268:	100d883a 	mov	r6,r2
    926c:	180f883a 	mov	r7,r3
    9270:	000b0140 	call	b014 <__divdf3>
    9274:	1009883a 	mov	r4,r2
    9278:	180b883a 	mov	r5,r3
    927c:	2005883a 	mov	r2,r4
    9280:	2807883a 	mov	r3,r5
    9284:	01000074 	movhi	r4,1
    9288:	213bbe04 	addi	r4,r4,-4360
    928c:	20800615 	stw	r2,24(r4)
    9290:	20c00715 	stw	r3,28(r4)

	/* corrGain\input = corr; */
	Tilt_V[0] = Tilt_V[8];
    9294:	01000074 	movhi	r4,1
    9298:	213bbe04 	addi	r4,r4,-4360
    929c:	20801017 	ldw	r2,64(r4)
    92a0:	20c01117 	ldw	r3,68(r4)
    92a4:	01000074 	movhi	r4,1
    92a8:	213bbe04 	addi	r4,r4,-4360
    92ac:	20800015 	stw	r2,0(r4)
    92b0:	20c00115 	stw	r3,4(r4)

	/* PlusMinus2\plus1 = in; */
	Tilt_V[5] = Tilt_V[9];
    92b4:	01000074 	movhi	r4,1
    92b8:	213bbe04 	addi	r4,r4,-4360
    92bc:	20801217 	ldw	r2,72(r4)
    92c0:	20c01317 	ldw	r3,76(r4)
    92c4:	01000074 	movhi	r4,1
    92c8:	213bbe04 	addi	r4,r4,-4360
    92cc:	20800a15 	stw	r2,40(r4)
    92d0:	20c00b15 	stw	r3,44(r4)

	/* PlusMinus2\minus1 = position; */
	Tilt_V[6] = Tilt_V[10];
    92d4:	01000074 	movhi	r4,1
    92d8:	213bbe04 	addi	r4,r4,-4360
    92dc:	20801417 	ldw	r2,80(r4)
    92e0:	20c01517 	ldw	r3,84(r4)
    92e4:	01000074 	movhi	r4,1
    92e8:	213bbe04 	addi	r4,r4,-4360
    92ec:	20800c15 	stw	r2,48(r4)
    92f0:	20c00d15 	stw	r3,52(r4)

	/* corrGain\output = corrGain\K * corrGain\input; */
	Tilt_V[1] = Tilt_P[0] * Tilt_V[0];
    92f4:	00800074 	movhi	r2,1
    92f8:	10bbdc04 	addi	r2,r2,-4240
    92fc:	11400017 	ldw	r5,0(r2)
    9300:	11800117 	ldw	r6,4(r2)
    9304:	01000074 	movhi	r4,1
    9308:	213bbe04 	addi	r4,r4,-4360
    930c:	20800017 	ldw	r2,0(r4)
    9310:	20c00117 	ldw	r3,4(r4)
    9314:	2809883a 	mov	r4,r5
    9318:	300b883a 	mov	r5,r6
    931c:	100d883a 	mov	r6,r2
    9320:	180f883a 	mov	r7,r3
    9324:	000ad300 	call	ad30 <__muldf3>
    9328:	1009883a 	mov	r4,r2
    932c:	180b883a 	mov	r5,r3
    9330:	2005883a 	mov	r2,r4
    9334:	2807883a 	mov	r3,r5
    9338:	01000074 	movhi	r4,1
    933c:	213bbe04 	addi	r4,r4,-4360
    9340:	20800215 	stw	r2,8(r4)
    9344:	20c00315 	stw	r3,12(r4)

	/* PID1\error = PlusMinus2\plus1 - PlusMinus2\minus1; */
	Tilt_R[1] = Tilt_V[5] - Tilt_V[6];
    9348:	00800074 	movhi	r2,1
    934c:	10bbbe04 	addi	r2,r2,-4360
    9350:	11400a17 	ldw	r5,40(r2)
    9354:	11800b17 	ldw	r6,44(r2)
    9358:	01000074 	movhi	r4,1
    935c:	213bbe04 	addi	r4,r4,-4360
    9360:	20800c17 	ldw	r2,48(r4)
    9364:	20c00d17 	ldw	r3,52(r4)
    9368:	2809883a 	mov	r4,r5
    936c:	300b883a 	mov	r5,r6
    9370:	100d883a 	mov	r6,r2
    9374:	180f883a 	mov	r7,r3
    9378:	000acd00 	call	acd0 <__subdf3>
    937c:	1009883a 	mov	r4,r2
    9380:	180b883a 	mov	r5,r3
    9384:	2005883a 	mov	r2,r4
    9388:	2807883a 	mov	r3,r5
    938c:	01000074 	movhi	r4,1
    9390:	213bea04 	addi	r4,r4,-4184
    9394:	20800215 	stw	r2,8(r4)
    9398:	20c00315 	stw	r3,12(r4)

	/* PID1\uD = PID1\factor * (((PID1\tauD * PID1\uD_previous) * PID1\beta + (PID1\tauD * PID1\kp) * (PID1\error - PID1\error_previous)) + (sampletime * PID1\kp) * PID1\error); */
	Tilt_R[0] = Tilt_V[3] * (((Tilt_P[2] * Tilt_s[0]) * Tilt_P[3] + (Tilt_P[2] * Tilt_P[1]) * (Tilt_R[1] - Tilt_s[1])) + (Tilt_step_size * Tilt_P[1]) * Tilt_R[1]);
    939c:	00800074 	movhi	r2,1
    93a0:	10bbbe04 	addi	r2,r2,-4360
    93a4:	14000617 	ldw	r16,24(r2)
    93a8:	14400717 	ldw	r17,28(r2)
    93ac:	00800074 	movhi	r2,1
    93b0:	10bbdc04 	addi	r2,r2,-4240
    93b4:	11400417 	ldw	r5,16(r2)
    93b8:	11800517 	ldw	r6,20(r2)
    93bc:	01000074 	movhi	r4,1
    93c0:	213bf004 	addi	r4,r4,-4160
    93c4:	20800017 	ldw	r2,0(r4)
    93c8:	20c00117 	ldw	r3,4(r4)
    93cc:	2809883a 	mov	r4,r5
    93d0:	300b883a 	mov	r5,r6
    93d4:	100d883a 	mov	r6,r2
    93d8:	180f883a 	mov	r7,r3
    93dc:	000ad300 	call	ad30 <__muldf3>
    93e0:	100f883a 	mov	r7,r2
    93e4:	1811883a 	mov	r8,r3
    93e8:	380b883a 	mov	r5,r7
    93ec:	400d883a 	mov	r6,r8
    93f0:	01000074 	movhi	r4,1
    93f4:	213bdc04 	addi	r4,r4,-4240
    93f8:	20800617 	ldw	r2,24(r4)
    93fc:	20c00717 	ldw	r3,28(r4)
    9400:	2809883a 	mov	r4,r5
    9404:	300b883a 	mov	r5,r6
    9408:	100d883a 	mov	r6,r2
    940c:	180f883a 	mov	r7,r3
    9410:	000ad300 	call	ad30 <__muldf3>
    9414:	1009883a 	mov	r4,r2
    9418:	180b883a 	mov	r5,r3
    941c:	2025883a 	mov	r18,r4
    9420:	2827883a 	mov	r19,r5
    9424:	00800074 	movhi	r2,1
    9428:	10bbdc04 	addi	r2,r2,-4240
    942c:	11400417 	ldw	r5,16(r2)
    9430:	11800517 	ldw	r6,20(r2)
    9434:	01000074 	movhi	r4,1
    9438:	213bdc04 	addi	r4,r4,-4240
    943c:	20800217 	ldw	r2,8(r4)
    9440:	20c00317 	ldw	r3,12(r4)
    9444:	2809883a 	mov	r4,r5
    9448:	300b883a 	mov	r5,r6
    944c:	100d883a 	mov	r6,r2
    9450:	180f883a 	mov	r7,r3
    9454:	000ad300 	call	ad30 <__muldf3>
    9458:	1009883a 	mov	r4,r2
    945c:	180b883a 	mov	r5,r3
    9460:	2029883a 	mov	r20,r4
    9464:	282b883a 	mov	r21,r5
    9468:	00800074 	movhi	r2,1
    946c:	10bbea04 	addi	r2,r2,-4184
    9470:	11400217 	ldw	r5,8(r2)
    9474:	11800317 	ldw	r6,12(r2)
    9478:	01000074 	movhi	r4,1
    947c:	213bf004 	addi	r4,r4,-4160
    9480:	20800217 	ldw	r2,8(r4)
    9484:	20c00317 	ldw	r3,12(r4)
    9488:	2809883a 	mov	r4,r5
    948c:	300b883a 	mov	r5,r6
    9490:	100d883a 	mov	r6,r2
    9494:	180f883a 	mov	r7,r3
    9498:	000acd00 	call	acd0 <__subdf3>
    949c:	1009883a 	mov	r4,r2
    94a0:	180b883a 	mov	r5,r3
    94a4:	2005883a 	mov	r2,r4
    94a8:	2807883a 	mov	r3,r5
    94ac:	a009883a 	mov	r4,r20
    94b0:	a80b883a 	mov	r5,r21
    94b4:	100d883a 	mov	r6,r2
    94b8:	180f883a 	mov	r7,r3
    94bc:	000ad300 	call	ad30 <__muldf3>
    94c0:	1009883a 	mov	r4,r2
    94c4:	180b883a 	mov	r5,r3
    94c8:	2005883a 	mov	r2,r4
    94cc:	2807883a 	mov	r3,r5
    94d0:	9009883a 	mov	r4,r18
    94d4:	980b883a 	mov	r5,r19
    94d8:	100d883a 	mov	r6,r2
    94dc:	180f883a 	mov	r7,r3
    94e0:	000ac7c0 	call	ac7c <__adddf3>
    94e4:	1009883a 	mov	r4,r2
    94e8:	180b883a 	mov	r5,r3
    94ec:	2025883a 	mov	r18,r4
    94f0:	2827883a 	mov	r19,r5
    94f4:	00800074 	movhi	r2,1
    94f8:	10bbdc04 	addi	r2,r2,-4240
    94fc:	11400217 	ldw	r5,8(r2)
    9500:	11800317 	ldw	r6,12(r2)
    9504:	d0a00917 	ldw	r2,-32732(gp)
    9508:	01000074 	movhi	r4,1
    950c:	213a9704 	addi	r4,r4,-5540
    9510:	20c00017 	ldw	r3,0(r4)
    9514:	2809883a 	mov	r4,r5
    9518:	300b883a 	mov	r5,r6
    951c:	100d883a 	mov	r6,r2
    9520:	180f883a 	mov	r7,r3
    9524:	000ad300 	call	ad30 <__muldf3>
    9528:	100f883a 	mov	r7,r2
    952c:	1811883a 	mov	r8,r3
    9530:	380b883a 	mov	r5,r7
    9534:	400d883a 	mov	r6,r8
    9538:	01000074 	movhi	r4,1
    953c:	213bea04 	addi	r4,r4,-4184
    9540:	20800217 	ldw	r2,8(r4)
    9544:	20c00317 	ldw	r3,12(r4)
    9548:	2809883a 	mov	r4,r5
    954c:	300b883a 	mov	r5,r6
    9550:	100d883a 	mov	r6,r2
    9554:	180f883a 	mov	r7,r3
    9558:	000ad300 	call	ad30 <__muldf3>
    955c:	1009883a 	mov	r4,r2
    9560:	180b883a 	mov	r5,r3
    9564:	2005883a 	mov	r2,r4
    9568:	2807883a 	mov	r3,r5
    956c:	9009883a 	mov	r4,r18
    9570:	980b883a 	mov	r5,r19
    9574:	100d883a 	mov	r6,r2
    9578:	180f883a 	mov	r7,r3
    957c:	000ac7c0 	call	ac7c <__adddf3>
    9580:	1009883a 	mov	r4,r2
    9584:	180b883a 	mov	r5,r3
    9588:	2005883a 	mov	r2,r4
    958c:	2807883a 	mov	r3,r5
    9590:	8009883a 	mov	r4,r16
    9594:	880b883a 	mov	r5,r17
    9598:	100d883a 	mov	r6,r2
    959c:	180f883a 	mov	r7,r3
    95a0:	000ad300 	call	ad30 <__muldf3>
    95a4:	1009883a 	mov	r4,r2
    95a8:	180b883a 	mov	r5,r3
    95ac:	2005883a 	mov	r2,r4
    95b0:	2807883a 	mov	r3,r5
    95b4:	01000074 	movhi	r4,1
    95b8:	213bea04 	addi	r4,r4,-4184
    95bc:	20800015 	stw	r2,0(r4)
    95c0:	20c00115 	stw	r3,4(r4)

	/* PID1\uI = PID1\uI_previous + (sampletime * PID1\uD) / PID1\tauI; */
	Tilt_R[2] = Tilt_s[2] + (Tilt_step_size * Tilt_R[0]) / Tilt_P[4];
    95c4:	00800074 	movhi	r2,1
    95c8:	10bbf004 	addi	r2,r2,-4160
    95cc:	14000417 	ldw	r16,16(r2)
    95d0:	14400517 	ldw	r17,20(r2)
    95d4:	00800074 	movhi	r2,1
    95d8:	10bbea04 	addi	r2,r2,-4184
    95dc:	11400017 	ldw	r5,0(r2)
    95e0:	11800117 	ldw	r6,4(r2)
    95e4:	d0a00917 	ldw	r2,-32732(gp)
    95e8:	01000074 	movhi	r4,1
    95ec:	213a9704 	addi	r4,r4,-5540
    95f0:	20c00017 	ldw	r3,0(r4)
    95f4:	2809883a 	mov	r4,r5
    95f8:	300b883a 	mov	r5,r6
    95fc:	100d883a 	mov	r6,r2
    9600:	180f883a 	mov	r7,r3
    9604:	000ad300 	call	ad30 <__muldf3>
    9608:	100f883a 	mov	r7,r2
    960c:	1811883a 	mov	r8,r3
    9610:	380b883a 	mov	r5,r7
    9614:	400d883a 	mov	r6,r8
    9618:	01000074 	movhi	r4,1
    961c:	213bdc04 	addi	r4,r4,-4240
    9620:	20800817 	ldw	r2,32(r4)
    9624:	20c00917 	ldw	r3,36(r4)
    9628:	2809883a 	mov	r4,r5
    962c:	300b883a 	mov	r5,r6
    9630:	100d883a 	mov	r6,r2
    9634:	180f883a 	mov	r7,r3
    9638:	000b0140 	call	b014 <__divdf3>
    963c:	1009883a 	mov	r4,r2
    9640:	180b883a 	mov	r5,r3
    9644:	2005883a 	mov	r2,r4
    9648:	2807883a 	mov	r3,r5
    964c:	8009883a 	mov	r4,r16
    9650:	880b883a 	mov	r5,r17
    9654:	100d883a 	mov	r6,r2
    9658:	180f883a 	mov	r7,r3
    965c:	000ac7c0 	call	ac7c <__adddf3>
    9660:	1009883a 	mov	r4,r2
    9664:	180b883a 	mov	r5,r3
    9668:	2005883a 	mov	r2,r4
    966c:	2807883a 	mov	r3,r5
    9670:	01000074 	movhi	r4,1
    9674:	213bea04 	addi	r4,r4,-4184
    9678:	20800415 	stw	r2,16(r4)
    967c:	20c00515 	stw	r3,20(r4)

	/* PID1\output = PID1\uI + PID1\uD; */
	Tilt_V[2] = Tilt_R[2] + Tilt_R[0];
    9680:	00800074 	movhi	r2,1
    9684:	10bbea04 	addi	r2,r2,-4184
    9688:	11400417 	ldw	r5,16(r2)
    968c:	11800517 	ldw	r6,20(r2)
    9690:	01000074 	movhi	r4,1
    9694:	213bea04 	addi	r4,r4,-4184
    9698:	20800017 	ldw	r2,0(r4)
    969c:	20c00117 	ldw	r3,4(r4)
    96a0:	2809883a 	mov	r4,r5
    96a4:	300b883a 	mov	r5,r6
    96a8:	100d883a 	mov	r6,r2
    96ac:	180f883a 	mov	r7,r3
    96b0:	000ac7c0 	call	ac7c <__adddf3>
    96b4:	1009883a 	mov	r4,r2
    96b8:	180b883a 	mov	r5,r3
    96bc:	2005883a 	mov	r2,r4
    96c0:	2807883a 	mov	r3,r5
    96c4:	01000074 	movhi	r4,1
    96c8:	213bbe04 	addi	r4,r4,-4360
    96cc:	20800415 	stw	r2,16(r4)
    96d0:	20c00515 	stw	r3,20(r4)

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	Tilt_V[4] = Tilt_V[1] + Tilt_V[2];
    96d4:	00800074 	movhi	r2,1
    96d8:	10bbbe04 	addi	r2,r2,-4360
    96dc:	11400217 	ldw	r5,8(r2)
    96e0:	11800317 	ldw	r6,12(r2)
    96e4:	01000074 	movhi	r4,1
    96e8:	213bbe04 	addi	r4,r4,-4360
    96ec:	20800417 	ldw	r2,16(r4)
    96f0:	20c00517 	ldw	r3,20(r4)
    96f4:	2809883a 	mov	r4,r5
    96f8:	300b883a 	mov	r5,r6
    96fc:	100d883a 	mov	r6,r2
    9700:	180f883a 	mov	r7,r3
    9704:	000ac7c0 	call	ac7c <__adddf3>
    9708:	1009883a 	mov	r4,r2
    970c:	180b883a 	mov	r5,r3
    9710:	2005883a 	mov	r2,r4
    9714:	2807883a 	mov	r3,r5
    9718:	01000074 	movhi	r4,1
    971c:	213bbe04 	addi	r4,r4,-4360
    9720:	20800815 	stw	r2,32(r4)
    9724:	20c00915 	stw	r3,36(r4)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	Tilt_V[7] = ((Tilt_V[4] < Tilt_P[5]) ? 
    9728:	00800074 	movhi	r2,1
    972c:	10bbbe04 	addi	r2,r2,-4360
    9730:	11400817 	ldw	r5,32(r2)
    9734:	11800917 	ldw	r6,36(r2)
    9738:	01000074 	movhi	r4,1
    973c:	213bdc04 	addi	r4,r4,-4240
    9740:	20800a17 	ldw	r2,40(r4)
    9744:	20c00b17 	ldw	r3,44(r4)
		/* SignalLimiter2\minimum */
		Tilt_P[5]
	:
    9748:	2809883a 	mov	r4,r5
    974c:	300b883a 	mov	r5,r6
    9750:	100d883a 	mov	r6,r2
    9754:	180f883a 	mov	r7,r3
    9758:	000b2900 	call	b290 <__ltdf2>
    975c:	1000050e 	bge	r2,zero,9774 <TiltCalculateDynamic+0x5b4>
    9760:	01000074 	movhi	r4,1
    9764:	213bdc04 	addi	r4,r4,-4240
    9768:	20800a17 	ldw	r2,40(r4)
    976c:	20c00b17 	ldw	r3,44(r4)
    9770:	00001906 	br	97d8 <TiltCalculateDynamic+0x618>
		/* (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) */
		((Tilt_V[4] > Tilt_P[6]) ? 
    9774:	00800074 	movhi	r2,1
    9778:	10bbbe04 	addi	r2,r2,-4360
    977c:	11400817 	ldw	r5,32(r2)
    9780:	11800917 	ldw	r6,36(r2)
    9784:	01000074 	movhi	r4,1
    9788:	213bdc04 	addi	r4,r4,-4240
    978c:	20800c17 	ldw	r2,48(r4)
    9790:	20c00d17 	ldw	r3,52(r4)
			/* SignalLimiter2\maximum */
			Tilt_P[6]
		:
    9794:	2809883a 	mov	r4,r5
    9798:	300b883a 	mov	r5,r6
    979c:	100d883a 	mov	r6,r2
    97a0:	180f883a 	mov	r7,r3
    97a4:	000b1c80 	call	b1c8 <__gtdf2>
    97a8:	0080050e 	bge	zero,r2,97c0 <TiltCalculateDynamic+0x600>
    97ac:	00800074 	movhi	r2,1
    97b0:	10bbdc04 	addi	r2,r2,-4240
    97b4:	11000c17 	ldw	r4,48(r2)
    97b8:	11400d17 	ldw	r5,52(r2)
    97bc:	00000406 	br	97d0 <TiltCalculateDynamic+0x610>
    97c0:	00800074 	movhi	r2,1
    97c4:	10bbbe04 	addi	r2,r2,-4360
    97c8:	11000817 	ldw	r4,32(r2)
    97cc:	11400917 	ldw	r5,36(r2)

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	Tilt_V[7] = ((Tilt_V[4] < Tilt_P[5]) ? 
		/* SignalLimiter2\minimum */
		Tilt_P[5]
	:
    97d0:	2005883a 	mov	r2,r4
    97d4:	2807883a 	mov	r3,r5

	/* PlusMinus1\output = corrGain\output + PID1\output; */
	Tilt_V[4] = Tilt_V[1] + Tilt_V[2];

	/* SignalLimiter2\output = (if PlusMinus1\output < SignalLimiter2\minimum then SignalLimiter2\minimum else (if PlusMinus1\output > SignalLimiter2\maximum then SignalLimiter2\maximum else PlusMinus1\output end) end); */
	Tilt_V[7] = ((Tilt_V[4] < Tilt_P[5]) ? 
    97d8:	01000074 	movhi	r4,1
    97dc:	213bbe04 	addi	r4,r4,-4360
    97e0:	20800e15 	stw	r2,56(r4)
    97e4:	20c00f15 	stw	r3,60(r4)
		)
	);


	/* increment the step counter */
	Tilt_steps++;
    97e8:	d0a0f417 	ldw	r2,-31792(gp)
    97ec:	10800044 	addi	r2,r2,1
    97f0:	d0a0f415 	stw	r2,-31792(gp)
}
    97f4:	e037883a 	mov	sp,fp
    97f8:	dfc00717 	ldw	ra,28(sp)
    97fc:	df000617 	ldw	fp,24(sp)
    9800:	dd400517 	ldw	r21,20(sp)
    9804:	dd000417 	ldw	r20,16(sp)
    9808:	dcc00317 	ldw	r19,12(sp)
    980c:	dc800217 	ldw	r18,8(sp)
    9810:	dc400117 	ldw	r17,4(sp)
    9814:	dc000017 	ldw	r16,0(sp)
    9818:	dec00804 	addi	sp,sp,32
    981c:	f800283a 	ret

00009820 <TiltCalculateOutput>:
 * and are kept separate to make the dynamic set of equations smaller.
 * These dynamic equations are called often more than one time for each
 * integration step that is taken. This makes model computation much faster.
 */
void TiltCalculateOutput (void)
{
    9820:	deffff04 	addi	sp,sp,-4
    9824:	df000015 	stw	fp,0(sp)
    9828:	d839883a 	mov	fp,sp
	/* out = SignalLimiter2\output; */
	Tilt_V[11] = Tilt_V[7];
    982c:	01000074 	movhi	r4,1
    9830:	213bbe04 	addi	r4,r4,-4360
    9834:	20800e17 	ldw	r2,56(r4)
    9838:	20c00f17 	ldw	r3,60(r4)
    983c:	01000074 	movhi	r4,1
    9840:	213bbe04 	addi	r4,r4,-4360
    9844:	20801615 	stw	r2,88(r4)
    9848:	20c01715 	stw	r3,92(r4)

}
    984c:	e037883a 	mov	sp,fp
    9850:	df000017 	ldw	fp,0(sp)
    9854:	dec00104 	addi	sp,sp,4
    9858:	f800283a 	ret

0000985c <TiltCalculateFinal>:
/* This function calculates the final equations of the model.
 * These equations are calculated after all the calculations
 * are performed
 */
void TiltCalculateFinal (void)
{
    985c:	deffff04 	addi	sp,sp,-4
    9860:	df000015 	stw	fp,0(sp)
    9864:	d839883a 	mov	fp,sp

}
    9868:	e037883a 	mov	sp,fp
    986c:	df000017 	ldw	fp,0(sp)
    9870:	dec00104 	addi	sp,sp,4
    9874:	f800283a 	ret

00009878 <TiltModelTerminate>:

/* this method is called after all calculations are performed */
void TiltModelTerminate(void)
{
    9878:	deffff04 	addi	sp,sp,-4
    987c:	df000015 	stw	fp,0(sp)
    9880:	d839883a 	mov	fp,sp
}
    9884:	e037883a 	mov	sp,fp
    9888:	df000017 	ldw	fp,0(sp)
    988c:	dec00104 	addi	sp,sp,4
    9890:	f800283a 	ret

00009894 <TiltCopyInputsToVariables>:
,	NULL
};
*/
/* This function sets the input variables from the input vector */
void TiltCopyInputsToVariables (XXDouble *u)
{
    9894:	defffe04 	addi	sp,sp,-8
    9898:	df000115 	stw	fp,4(sp)
    989c:	df000104 	addi	fp,sp,4
    98a0:	e13fff15 	stw	r4,-4(fp)
	/* Copy the input vector to the input variables */
	Tilt_V[8] = u[0];		/* corr */
    98a4:	e13fff17 	ldw	r4,-4(fp)
    98a8:	20800017 	ldw	r2,0(r4)
    98ac:	20c00117 	ldw	r3,4(r4)
    98b0:	01000074 	movhi	r4,1
    98b4:	213bbe04 	addi	r4,r4,-4360
    98b8:	20801015 	stw	r2,64(r4)
    98bc:	20c01115 	stw	r3,68(r4)
	Tilt_V[9] = u[1];		/* in */
    98c0:	e13fff17 	ldw	r4,-4(fp)
    98c4:	20800217 	ldw	r2,8(r4)
    98c8:	20c00317 	ldw	r3,12(r4)
    98cc:	01000074 	movhi	r4,1
    98d0:	213bbe04 	addi	r4,r4,-4360
    98d4:	20801215 	stw	r2,72(r4)
    98d8:	20c01315 	stw	r3,76(r4)
	Tilt_V[10] = u[2];		/* position */
    98dc:	e13fff17 	ldw	r4,-4(fp)
    98e0:	20800417 	ldw	r2,16(r4)
    98e4:	20c00517 	ldw	r3,20(r4)
    98e8:	01000074 	movhi	r4,1
    98ec:	213bbe04 	addi	r4,r4,-4360
    98f0:	20801415 	stw	r2,80(r4)
    98f4:	20c01515 	stw	r3,84(r4)

}
    98f8:	e037883a 	mov	sp,fp
    98fc:	df000017 	ldw	fp,0(sp)
    9900:	dec00104 	addi	sp,sp,4
    9904:	f800283a 	ret

00009908 <TiltCopyVariablesToOutputs>:

/* This function uses the output variables to fill the output vector */
void TiltCopyVariablesToOutputs (XXDouble *y)
{
    9908:	defffe04 	addi	sp,sp,-8
    990c:	df000115 	stw	fp,4(sp)
    9910:	df000104 	addi	fp,sp,4
    9914:	e13fff15 	stw	r4,-4(fp)
	/* Copy the output variables to the output vector */
	y[0] = 	Tilt_V[11];		/* out */
    9918:	01000074 	movhi	r4,1
    991c:	213bbe04 	addi	r4,r4,-4360
    9920:	20801617 	ldw	r2,88(r4)
    9924:	20c01717 	ldw	r3,92(r4)
    9928:	e13fff17 	ldw	r4,-4(fp)
    992c:	20800015 	stw	r2,0(r4)
    9930:	20c00115 	stw	r3,4(r4)

}
    9934:	e037883a 	mov	sp,fp
    9938:	df000017 	ldw	fp,0(sp)
    993c:	dec00104 	addi	sp,sp,4
    9940:	f800283a 	ret

00009944 <TiltInitializeSubmodel>:

/* The initialization function for submodel */
void TiltInitializeSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    9944:	defffa04 	addi	sp,sp,-24
    9948:	dfc00515 	stw	ra,20(sp)
    994c:	df000415 	stw	fp,16(sp)
    9950:	df000404 	addi	fp,sp,16
    9954:	e13ffc15 	stw	r4,-16(fp)
    9958:	e17ffd15 	stw	r5,-12(fp)
    995c:	e1bffe15 	stw	r6,-8(fp)
    9960:	e1ffff15 	stw	r7,-4(fp)
	/* Initialization phase (allocating memory) */
	Tilt_initialize = XXTRUE;
    9964:	00800074 	movhi	r2,1
    9968:	10ba9804 	addi	r2,r2,-5536
    996c:	00c00044 	movi	r3,1
    9970:	10c00005 	stb	r3,0(r2)
	Tilt_steps = 0;
    9974:	00800074 	movhi	r2,1
    9978:	10bb8104 	addi	r2,r2,-4604
    997c:	10000015 	stw	zero,0(r2)
	TiltModelInitialize ();
    9980:	00091380 	call	9138 <TiltModelInitialize>
	TiltDiscreteInitialize ();
    9984:	0008e2c0 	call	8e2c <TiltDiscreteInitialize>

	/* Copy the inputs */
	Tilt_time = t;
    9988:	00800074 	movhi	r2,1
    998c:	10bb7f04 	addi	r2,r2,-4612
    9990:	e0fffe17 	ldw	r3,-8(fp)
    9994:	10c00015 	stw	r3,0(r2)
    9998:	e0ffff17 	ldw	r3,-4(fp)
    999c:	10c00115 	stw	r3,4(r2)
	TiltCopyInputsToVariables (u);
    99a0:	e13ffc17 	ldw	r4,-16(fp)
    99a4:	00098940 	call	9894 <TiltCopyInputsToVariables>

	/* Calculate the model for the first time */
	TiltCalculateInitial ();
    99a8:	000916c0 	call	916c <TiltCalculateInitial>
	TiltCalculateStatic ();
    99ac:	00091880 	call	9188 <TiltCalculateStatic>
	TiltCalculateInput ();
    99b0:	00091a40 	call	91a4 <TiltCalculateInput>
	TiltCalculateDynamic ();
    99b4:	00091c00 	call	91c0 <TiltCalculateDynamic>
	TiltCalculateOutput ();
    99b8:	00098200 	call	9820 <TiltCalculateOutput>

	/* Set the outputs */
	TiltCopyVariablesToOutputs (y);
    99bc:	e13ffd17 	ldw	r4,-12(fp)
    99c0:	00099080 	call	9908 <TiltCopyVariablesToOutputs>

	/* End of initialization phase */
	Tilt_initialize = XXFALSE;
    99c4:	00800074 	movhi	r2,1
    99c8:	10ba9804 	addi	r2,r2,-5536
    99cc:	10000005 	stb	zero,0(r2)
}
    99d0:	e037883a 	mov	sp,fp
    99d4:	dfc00117 	ldw	ra,4(sp)
    99d8:	df000017 	ldw	fp,0(sp)
    99dc:	dec00204 	addi	sp,sp,8
    99e0:	f800283a 	ret

000099e4 <TiltCalculateSubmodel>:

/* The function that calculates the submodel */
void TiltCalculateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    99e4:	defffa04 	addi	sp,sp,-24
    99e8:	dfc00515 	stw	ra,20(sp)
    99ec:	df000415 	stw	fp,16(sp)
    99f0:	df000404 	addi	fp,sp,16
    99f4:	e13ffc15 	stw	r4,-16(fp)
    99f8:	e17ffd15 	stw	r5,-12(fp)
    99fc:	e1bffe15 	stw	r6,-8(fp)
    9a00:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	Tilt_time = t;
    9a04:	00800074 	movhi	r2,1
    9a08:	10bb7f04 	addi	r2,r2,-4612
    9a0c:	e0fffe17 	ldw	r3,-8(fp)
    9a10:	10c00015 	stw	r3,0(r2)
    9a14:	e0ffff17 	ldw	r3,-4(fp)
    9a18:	10c00115 	stw	r3,4(r2)
	TiltCopyInputsToVariables (u);
    9a1c:	e13ffc17 	ldw	r4,-16(fp)
    9a20:	00098940 	call	9894 <TiltCopyInputsToVariables>

	/* Calculate the model */
	TiltCalculateInput ();
    9a24:	00091a40 	call	91a4 <TiltCalculateInput>
	TiltDiscreteStep ();
    9a28:	0008e740 	call	8e74 <TiltDiscreteStep>
	TiltCalculateOutput ();
    9a2c:	00098200 	call	9820 <TiltCalculateOutput>

	/* Copy the outputs */
	TiltCopyVariablesToOutputs (y);
    9a30:	e13ffd17 	ldw	r4,-12(fp)
    9a34:	00099080 	call	9908 <TiltCopyVariablesToOutputs>
}
    9a38:	e037883a 	mov	sp,fp
    9a3c:	dfc00117 	ldw	ra,4(sp)
    9a40:	df000017 	ldw	fp,0(sp)
    9a44:	dec00204 	addi	sp,sp,8
    9a48:	f800283a 	ret

00009a4c <TiltTerminateSubmodel>:

/* The termination function for submodel */
void TiltTerminateSubmodel (XXDouble *u, XXDouble *y, XXDouble t)
{
    9a4c:	defffa04 	addi	sp,sp,-24
    9a50:	dfc00515 	stw	ra,20(sp)
    9a54:	df000415 	stw	fp,16(sp)
    9a58:	df000404 	addi	fp,sp,16
    9a5c:	e13ffc15 	stw	r4,-16(fp)
    9a60:	e17ffd15 	stw	r5,-12(fp)
    9a64:	e1bffe15 	stw	r6,-8(fp)
    9a68:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the inputs */
	Tilt_time = t;
    9a6c:	00800074 	movhi	r2,1
    9a70:	10bb7f04 	addi	r2,r2,-4612
    9a74:	e0fffe17 	ldw	r3,-8(fp)
    9a78:	10c00015 	stw	r3,0(r2)
    9a7c:	e0ffff17 	ldw	r3,-4(fp)
    9a80:	10c00115 	stw	r3,4(r2)
	TiltCopyInputsToVariables (u);
    9a84:	e13ffc17 	ldw	r4,-16(fp)
    9a88:	00098940 	call	9894 <TiltCopyInputsToVariables>

	/* Calculate the final model equations */
	TiltCalculateFinal ();
    9a8c:	000985c0 	call	985c <TiltCalculateFinal>

	/* Set the outputs */
	TiltCopyVariablesToOutputs (y);
    9a90:	e13ffd17 	ldw	r4,-12(fp)
    9a94:	00099080 	call	9908 <TiltCopyVariablesToOutputs>

	/* and terminate the model itself (releasing memory) */
	TiltModelTerminate ();
    9a98:	00098780 	call	9878 <TiltModelTerminate>
	TiltDiscreteTerminate ();
    9a9c:	0008e580 	call	8e58 <TiltDiscreteTerminate>
}
    9aa0:	e037883a 	mov	sp,fp
    9aa4:	dfc00117 	ldw	ra,4(sp)
    9aa8:	df000017 	ldw	fp,0(sp)
    9aac:	dec00204 	addi	sp,sp,8
    9ab0:	f800283a 	ret

00009ab4 <convertToPwm>:
	//const int bits = bitSize / 2;
	/* Calculation */
	//return (int)(bits * pidOutput);
//}

int convertToPwm(XXDouble pidOutput) {
    9ab4:	defffb04 	addi	sp,sp,-20
    9ab8:	dfc00415 	stw	ra,16(sp)
    9abc:	df000315 	stw	fp,12(sp)
    9ac0:	df000304 	addi	fp,sp,12
    9ac4:	e13ffe15 	stw	r4,-8(fp)
    9ac8:	e17fff15 	stw	r5,-4(fp)
	const int bitSize = 100 ;
    9acc:	00801904 	movi	r2,100
    9ad0:	e0bffd15 	stw	r2,-12(fp)
	/* Calculation */
	return (int)(bitSize * pidOutput);
    9ad4:	e13ffd17 	ldw	r4,-12(fp)
    9ad8:	000b3480 	call	b348 <__floatsidf>
    9adc:	100b883a 	mov	r5,r2
    9ae0:	180d883a 	mov	r6,r3
    9ae4:	2809883a 	mov	r4,r5
    9ae8:	300b883a 	mov	r5,r6
    9aec:	e1bffe17 	ldw	r6,-8(fp)
    9af0:	e1ffff17 	ldw	r7,-4(fp)
    9af4:	000ad300 	call	ad30 <__muldf3>
    9af8:	1009883a 	mov	r4,r2
    9afc:	180b883a 	mov	r5,r3
    9b00:	2005883a 	mov	r2,r4
    9b04:	2807883a 	mov	r3,r5
    9b08:	1009883a 	mov	r4,r2
    9b0c:	180b883a 	mov	r5,r3
    9b10:	000b41c0 	call	b41c <__fixdfsi>
}
    9b14:	e037883a 	mov	sp,fp
    9b18:	dfc00117 	ldw	ra,4(sp)
    9b1c:	df000017 	ldw	fp,0(sp)
    9b20:	dec00204 	addi	sp,sp,8
    9b24:	f800283a 	ret

00009b28 <convertPanToRadian>:

float convertPanToRadian(int panEncoderInput) {
    9b28:	defff804 	addi	sp,sp,-32
    9b2c:	dfc00715 	stw	ra,28(sp)
    9b30:	df000615 	stw	fp,24(sp)
    9b34:	dc000515 	stw	r16,20(sp)
    9b38:	df000504 	addi	fp,sp,20
    9b3c:	e13fff15 	stw	r4,-4(fp)
	const int countsPerRev = 5000;
    9b40:	0084e204 	movi	r2,5000
    9b44:	e0bffb15 	stw	r2,-20(fp)
	const int centerPos = countsPerRev / 2;
    9b48:	e0bffb17 	ldw	r2,-20(fp)
    9b4c:	1006d7fa 	srli	r3,r2,31
    9b50:	1885883a 	add	r2,r3,r2
    9b54:	1005d07a 	srai	r2,r2,1
    9b58:	e0bffc15 	stw	r2,-16(fp)
	const float countPerDeg = (float)countsPerRev / 360;
    9b5c:	e13ffb17 	ldw	r4,-20(fp)
    9b60:	000a76c0 	call	a76c <__floatsisf>
    9b64:	1007883a 	mov	r3,r2
    9b68:	1809883a 	mov	r4,r3
    9b6c:	0150ed34 	movhi	r5,17332
    9b70:	000a6300 	call	a630 <__divsf3>
    9b74:	1007883a 	mov	r3,r2
    9b78:	e0fffd15 	stw	r3,-12(fp)

	const float degToRadian = (float)(PI / 180);
    9b7c:	008f23f4 	movhi	r2,15503
    9b80:	10be4844 	addi	r2,r2,-1759
    9b84:	e0bffe15 	stw	r2,-8(fp)

	//printf("countPerDeg Tilt: %f \n", countPerDeg);
	//printf("degToRadian Tilt: %f \n", degToRadian);

	/* Calculation */
	return (float) (panEncoderInput - centerPos) * (degToRadian / countPerDeg);
    9b88:	e0ffff17 	ldw	r3,-4(fp)
    9b8c:	e0bffc17 	ldw	r2,-16(fp)
    9b90:	1885c83a 	sub	r2,r3,r2
    9b94:	1009883a 	mov	r4,r2
    9b98:	000a76c0 	call	a76c <__floatsisf>
    9b9c:	1021883a 	mov	r16,r2
    9ba0:	e13ffe17 	ldw	r4,-8(fp)
    9ba4:	e17ffd17 	ldw	r5,-12(fp)
    9ba8:	000a6300 	call	a630 <__divsf3>
    9bac:	1007883a 	mov	r3,r2
    9bb0:	1805883a 	mov	r2,r3
    9bb4:	8009883a 	mov	r4,r16
    9bb8:	100b883a 	mov	r5,r2
    9bbc:	000a4a00 	call	a4a0 <__mulsf3>
    9bc0:	1009883a 	mov	r4,r2
    9bc4:	2007883a 	mov	r3,r4
    9bc8:	1805883a 	mov	r2,r3
}
    9bcc:	e037883a 	mov	sp,fp
    9bd0:	dfc00217 	ldw	ra,8(sp)
    9bd4:	df000117 	ldw	fp,4(sp)
    9bd8:	dc000017 	ldw	r16,0(sp)
    9bdc:	dec00304 	addi	sp,sp,12
    9be0:	f800283a 	ret

00009be4 <convertTiltToRadian>:

float convertTiltToRadian(int tiltEncoderInput) {
    9be4:	defff804 	addi	sp,sp,-32
    9be8:	dfc00715 	stw	ra,28(sp)
    9bec:	df000615 	stw	fp,24(sp)
    9bf0:	dc000515 	stw	r16,20(sp)
    9bf4:	df000504 	addi	fp,sp,20
    9bf8:	e13fff15 	stw	r4,-4(fp)
	const int countsPerRev = 2000;
    9bfc:	0081f404 	movi	r2,2000
    9c00:	e0bffb15 	stw	r2,-20(fp)
	const int centerPos = countsPerRev / 2;
    9c04:	e0bffb17 	ldw	r2,-20(fp)
    9c08:	1006d7fa 	srli	r3,r2,31
    9c0c:	1885883a 	add	r2,r3,r2
    9c10:	1005d07a 	srai	r2,r2,1
    9c14:	e0bffc15 	stw	r2,-16(fp)
	const float countPerDeg = (float)countsPerRev / 360;
    9c18:	e13ffb17 	ldw	r4,-20(fp)
    9c1c:	000a76c0 	call	a76c <__floatsisf>
    9c20:	1007883a 	mov	r3,r2
    9c24:	1809883a 	mov	r4,r3
    9c28:	0150ed34 	movhi	r5,17332
    9c2c:	000a6300 	call	a630 <__divsf3>
    9c30:	1007883a 	mov	r3,r2
    9c34:	e0fffd15 	stw	r3,-12(fp)

	const float degToRadian = (float) (PI / 180);
    9c38:	008f23f4 	movhi	r2,15503
    9c3c:	10be4844 	addi	r2,r2,-1759
    9c40:	e0bffe15 	stw	r2,-8(fp)

	//printf("countPerDeg Tilt: %f \n", countPerDeg);
	//printf("degToRadian Tilt: %f \n", degToRadian);

	/* Calculation */
	return (float) (tiltEncoderInput - centerPos) * (degToRadian / countPerDeg);
    9c44:	e0ffff17 	ldw	r3,-4(fp)
    9c48:	e0bffc17 	ldw	r2,-16(fp)
    9c4c:	1885c83a 	sub	r2,r3,r2
    9c50:	1009883a 	mov	r4,r2
    9c54:	000a76c0 	call	a76c <__floatsisf>
    9c58:	1021883a 	mov	r16,r2
    9c5c:	e13ffe17 	ldw	r4,-8(fp)
    9c60:	e17ffd17 	ldw	r5,-12(fp)
    9c64:	000a6300 	call	a630 <__divsf3>
    9c68:	1007883a 	mov	r3,r2
    9c6c:	1805883a 	mov	r2,r3
    9c70:	8009883a 	mov	r4,r16
    9c74:	100b883a 	mov	r5,r2
    9c78:	000a4a00 	call	a4a0 <__mulsf3>
    9c7c:	1009883a 	mov	r4,r2
    9c80:	2007883a 	mov	r3,r4
    9c84:	1805883a 	mov	r2,r3
}
    9c88:	e037883a 	mov	sp,fp
    9c8c:	dfc00217 	ldw	ra,8(sp)
    9c90:	df000117 	ldw	fp,4(sp)
    9c94:	dc000017 	ldw	r16,0(sp)
    9c98:	dec00304 	addi	sp,sp,12
    9c9c:	f800283a 	ret

00009ca0 <initUart>:

int initUart(const char device) {
    9ca0:	defffd04 	addi	sp,sp,-12
    9ca4:	dfc00215 	stw	ra,8(sp)
    9ca8:	df000115 	stw	fp,4(sp)
    9cac:	df000104 	addi	fp,sp,4
    9cb0:	2005883a 	mov	r2,r4
    9cb4:	e0bfff05 	stb	r2,-4(fp)
	// Returns the file descriptor integer
    return open(device, O_RDWR);
    9cb8:	e0bfff07 	ldb	r2,-4(fp)
    9cbc:	1009883a 	mov	r4,r2
    9cc0:	01400084 	movi	r5,2
    9cc4:	000cba00 	call	cba0 <open>
}
    9cc8:	e037883a 	mov	sp,fp
    9ccc:	dfc00117 	ldw	ra,4(sp)
    9cd0:	df000017 	ldw	fp,0(sp)
    9cd4:	dec00204 	addi	sp,sp,8
    9cd8:	f800283a 	ret

00009cdc <is_digit>:
struct UartPayload {
    int x;
    int y;
};

bool is_digit(char c) {
    9cdc:	defffe04 	addi	sp,sp,-8
    9ce0:	df000115 	stw	fp,4(sp)
    9ce4:	df000104 	addi	fp,sp,4
    9ce8:	2005883a 	mov	r2,r4
    9cec:	e0bfff05 	stb	r2,-4(fp)
    return c >= '0' && c <= '9';
    9cf0:	e0bfff07 	ldb	r2,-4(fp)
    9cf4:	10800c10 	cmplti	r2,r2,48
    9cf8:	1000051e 	bne	r2,zero,9d10 <is_digit+0x34>
    9cfc:	e0bfff07 	ldb	r2,-4(fp)
    9d00:	10800e88 	cmpgei	r2,r2,58
    9d04:	1000021e 	bne	r2,zero,9d10 <is_digit+0x34>
    9d08:	00800044 	movi	r2,1
    9d0c:	00000106 	br	9d14 <is_digit+0x38>
    9d10:	0005883a 	mov	r2,zero
    9d14:	1080004c 	andi	r2,r2,1
}
    9d18:	e037883a 	mov	sp,fp
    9d1c:	df000017 	ldw	fp,0(sp)
    9d20:	dec00104 	addi	sp,sp,4
    9d24:	f800283a 	ret

00009d28 <parse_int>:

int parse_int(const char *str, int *result) {
    9d28:	defff904 	addi	sp,sp,-28
    9d2c:	dfc00615 	stw	ra,24(sp)
    9d30:	df000515 	stw	fp,20(sp)
    9d34:	df000504 	addi	fp,sp,20
    9d38:	e13ffe15 	stw	r4,-8(fp)
    9d3c:	e17fff15 	stw	r5,-4(fp)
    int sign = 1;
    9d40:	00800044 	movi	r2,1
    9d44:	e0bffb15 	stw	r2,-20(fp)
    int i = 0;
    9d48:	e03ffc15 	stw	zero,-16(fp)
    int value = 0;
    9d4c:	e03ffd15 	stw	zero,-12(fp)

    if (str[i] == '-') {
    9d50:	e0bffc17 	ldw	r2,-16(fp)
    9d54:	e0fffe17 	ldw	r3,-8(fp)
    9d58:	1885883a 	add	r2,r3,r2
    9d5c:	10800003 	ldbu	r2,0(r2)
    9d60:	10803fcc 	andi	r2,r2,255
    9d64:	1080201c 	xori	r2,r2,128
    9d68:	10bfe004 	addi	r2,r2,-128
    9d6c:	10800b58 	cmpnei	r2,r2,45
    9d70:	1000181e 	bne	r2,zero,9dd4 <parse_int+0xac>
        sign = -1;
    9d74:	00bfffc4 	movi	r2,-1
    9d78:	e0bffb15 	stw	r2,-20(fp)
        i++;
    9d7c:	e0bffc17 	ldw	r2,-16(fp)
    9d80:	10800044 	addi	r2,r2,1
    9d84:	e0bffc15 	stw	r2,-16(fp)
    }

    while (is_digit(str[i])) {
    9d88:	00001206 	br	9dd4 <parse_int+0xac>
        value = value * 10 + (str[i] - '0');
    9d8c:	e13ffd17 	ldw	r4,-12(fp)
    9d90:	01400284 	movi	r5,10
    9d94:	000b5280 	call	b528 <__mulsi3>
    9d98:	1007883a 	mov	r3,r2
    9d9c:	e0bffc17 	ldw	r2,-16(fp)
    9da0:	e13ffe17 	ldw	r4,-8(fp)
    9da4:	2085883a 	add	r2,r4,r2
    9da8:	10800003 	ldbu	r2,0(r2)
    9dac:	10803fcc 	andi	r2,r2,255
    9db0:	1080201c 	xori	r2,r2,128
    9db4:	10bfe004 	addi	r2,r2,-128
    9db8:	10bff404 	addi	r2,r2,-48
    9dbc:	1885883a 	add	r2,r3,r2
    9dc0:	e0bffd15 	stw	r2,-12(fp)
        i++;
    9dc4:	e0bffc17 	ldw	r2,-16(fp)
    9dc8:	10800044 	addi	r2,r2,1
    9dcc:	e0bffc15 	stw	r2,-16(fp)
    9dd0:	00000106 	br	9dd8 <parse_int+0xb0>
    if (str[i] == '-') {
        sign = -1;
        i++;
    }

    while (is_digit(str[i])) {
    9dd4:	0001883a 	nop
    9dd8:	e0bffc17 	ldw	r2,-16(fp)
    9ddc:	e0fffe17 	ldw	r3,-8(fp)
    9de0:	1885883a 	add	r2,r3,r2
    9de4:	10800003 	ldbu	r2,0(r2)
    9de8:	10803fcc 	andi	r2,r2,255
    9dec:	1080201c 	xori	r2,r2,128
    9df0:	10bfe004 	addi	r2,r2,-128
    9df4:	1009883a 	mov	r4,r2
    9df8:	0009cdc0 	call	9cdc <is_digit>
    9dfc:	10803fcc 	andi	r2,r2,255
    9e00:	103fe21e 	bne	r2,zero,9d8c <parse_int+0x64>
        value = value * 10 + (str[i] - '0');
        i++;
    }

    *result = value * sign;
    9e04:	e13ffd17 	ldw	r4,-12(fp)
    9e08:	e17ffb17 	ldw	r5,-20(fp)
    9e0c:	000b5280 	call	b528 <__mulsi3>
    9e10:	1007883a 	mov	r3,r2
    9e14:	e0bfff17 	ldw	r2,-4(fp)
    9e18:	10c00015 	stw	r3,0(r2)

    // Return the number of characters consumed
    return i;
    9e1c:	e0bffc17 	ldw	r2,-16(fp)
}
    9e20:	e037883a 	mov	sp,fp
    9e24:	dfc00117 	ldw	ra,4(sp)
    9e28:	df000017 	ldw	fp,0(sp)
    9e2c:	dec00204 	addi	sp,sp,8
    9e30:	f800283a 	ret

00009e34 <readUartPayload>:

struct UartPayload readUartPayload(int file) {
    9e34:	deffb804 	addi	sp,sp,-288
    9e38:	dfc04715 	stw	ra,284(sp)
    9e3c:	df004615 	stw	fp,280(sp)
    9e40:	df004604 	addi	fp,sp,280
    9e44:	e13fff15 	stw	r4,-4(fp)
	// Payload starts with: <
	// Payload ends with: >
	// Payload contains: <int,int>
	char read_buffer[256];
	char current_character;
	int index = 0;
    9e48:	e03fba15 	stw	zero,-280(fp)
	struct UartPayload payload;
	
    // Read until payload start marker '<'
    while (read(file, &current_character, 1) > 0) {
    9e4c:	00000606 	br	9e68 <readUartPayload+0x34>
        if (current_character == '<') {
    9e50:	e0bffc03 	ldbu	r2,-16(fp)
    9e54:	10803fcc 	andi	r2,r2,255
    9e58:	1080201c 	xori	r2,r2,128
    9e5c:	10bfe004 	addi	r2,r2,-128
    9e60:	10800f18 	cmpnei	r2,r2,60
    9e64:	10000726 	beq	r2,zero,9e84 <readUartPayload+0x50>
	char current_character;
	int index = 0;
	struct UartPayload payload;
	
    // Read until payload start marker '<'
    while (read(file, &current_character, 1) > 0) {
    9e68:	e0bffc04 	addi	r2,fp,-16
    9e6c:	e13fff17 	ldw	r4,-4(fp)
    9e70:	100b883a 	mov	r5,r2
    9e74:	01800044 	movi	r6,1
    9e78:	000cd480 	call	cd48 <read>
    9e7c:	00bff416 	blt	zero,r2,9e50 <readUartPayload+0x1c>
            break;
        }
    }
	
	// Read until payload end marker '>'
    while (read(file, &current_character, 1) > 0) {
    9e80:	00001006 	br	9ec4 <readUartPayload+0x90>
	struct UartPayload payload;
	
    // Read until payload start marker '<'
    while (read(file, &current_character, 1) > 0) {
        if (current_character == '<') {
            break;
    9e84:	0001883a 	nop
        }
    }
	
	// Read until payload end marker '>'
    while (read(file, &current_character, 1) > 0) {
    9e88:	00000e06 	br	9ec4 <readUartPayload+0x90>
        if (current_character == '>') {
    9e8c:	e0bffc03 	ldbu	r2,-16(fp)
    9e90:	10803fcc 	andi	r2,r2,255
    9e94:	1080201c 	xori	r2,r2,128
    9e98:	10bfe004 	addi	r2,r2,-128
    9e9c:	10800f98 	cmpnei	r2,r2,62
    9ea0:	10000f26 	beq	r2,zero,9ee0 <readUartPayload+0xac>
            break;
        }
        read_buffer[index++] = current_character;
    9ea4:	e0fffc03 	ldbu	r3,-16(fp)
    9ea8:	e13fbc04 	addi	r4,fp,-272
    9eac:	e0bfba17 	ldw	r2,-280(fp)
    9eb0:	2085883a 	add	r2,r4,r2
    9eb4:	10c00005 	stb	r3,0(r2)
    9eb8:	e0bfba17 	ldw	r2,-280(fp)
    9ebc:	10800044 	addi	r2,r2,1
    9ec0:	e0bfba15 	stw	r2,-280(fp)
            break;
        }
    }
	
	// Read until payload end marker '>'
    while (read(file, &current_character, 1) > 0) {
    9ec4:	e0bffc04 	addi	r2,fp,-16
    9ec8:	e13fff17 	ldw	r4,-4(fp)
    9ecc:	100b883a 	mov	r5,r2
    9ed0:	01800044 	movi	r6,1
    9ed4:	000cd480 	call	cd48 <read>
    9ed8:	00bfec16 	blt	zero,r2,9e8c <readUartPayload+0x58>
    9edc:	00000106 	br	9ee4 <readUartPayload+0xb0>
        if (current_character == '>') {
            break;
    9ee0:	0001883a 	nop
        }
        read_buffer[index++] = current_character;
    }
	
	// Null-terminate the read buffer
    read_buffer[index] = '\0';
    9ee4:	e0ffbc04 	addi	r3,fp,-272
    9ee8:	e0bfba17 	ldw	r2,-280(fp)
    9eec:	1885883a 	add	r2,r3,r2
    9ef0:	10000005 	stb	zero,0(r2)
	
	// Parse the x and y values
    int offset = 0;
    9ef4:	e03fbb15 	stw	zero,-276(fp)
    offset += parse_int(&read_buffer[offset], &payload.x);
    9ef8:	e0ffbc04 	addi	r3,fp,-272
    9efc:	e0bfbb17 	ldw	r2,-276(fp)
    9f00:	1887883a 	add	r3,r3,r2
    9f04:	e0bffd04 	addi	r2,fp,-12
    9f08:	1809883a 	mov	r4,r3
    9f0c:	100b883a 	mov	r5,r2
    9f10:	0009d280 	call	9d28 <parse_int>
    9f14:	e0ffbb17 	ldw	r3,-276(fp)
    9f18:	1885883a 	add	r2,r3,r2
    9f1c:	e0bfbb15 	stw	r2,-276(fp)

    // Skip the comma separator
    offset++;
    9f20:	e0bfbb17 	ldw	r2,-276(fp)
    9f24:	10800044 	addi	r2,r2,1
    9f28:	e0bfbb15 	stw	r2,-276(fp)

    parse_int(&read_buffer[offset], &payload.y);
    9f2c:	e0ffbc04 	addi	r3,fp,-272
    9f30:	e0bfbb17 	ldw	r2,-276(fp)
    9f34:	1887883a 	add	r3,r3,r2
    9f38:	e0bffd04 	addi	r2,fp,-12
    9f3c:	10800104 	addi	r2,r2,4
    9f40:	1809883a 	mov	r4,r3
    9f44:	100b883a 	mov	r5,r2
    9f48:	0009d280 	call	9d28 <parse_int>

    return payload;
    9f4c:	e17ffd17 	ldw	r5,-12(fp)
    9f50:	e1bffe17 	ldw	r6,-8(fp)
    9f54:	2807883a 	mov	r3,r5
    9f58:	3009883a 	mov	r4,r6
}
    9f5c:	1805883a 	mov	r2,r3
    9f60:	2007883a 	mov	r3,r4
    9f64:	e037883a 	mov	sp,fp
    9f68:	dfc00117 	ldw	ra,4(sp)
    9f6c:	df000017 	ldw	fp,0(sp)
    9f70:	dec00204 	addi	sp,sp,8
    9f74:	f800283a 	ret

00009f78 <writeUart>:

void writeUart(int file, const char *data) {
    9f78:	defffc04 	addi	sp,sp,-16
    9f7c:	dfc00315 	stw	ra,12(sp)
    9f80:	df000215 	stw	fp,8(sp)
    9f84:	df000204 	addi	fp,sp,8
    9f88:	e13ffe15 	stw	r4,-8(fp)
    9f8c:	e17fff15 	stw	r5,-4(fp)
    write(file, data, strlen(data));
    9f90:	e13fff17 	ldw	r4,-4(fp)
    9f94:	000bf080 	call	bf08 <strlen>
    9f98:	e13ffe17 	ldw	r4,-8(fp)
    9f9c:	e17fff17 	ldw	r5,-4(fp)
    9fa0:	100d883a 	mov	r6,r2
    9fa4:	000cfe00 	call	cfe0 <write>
}
    9fa8:	e037883a 	mov	sp,fp
    9fac:	dfc00117 	ldw	ra,4(sp)
    9fb0:	df000017 	ldw	fp,0(sp)
    9fb4:	dec00204 	addi	sp,sp,8
    9fb8:	f800283a 	ret

00009fbc <main>:

int main() {
    9fbc:	deffd404 	addi	sp,sp,-176
    9fc0:	dfc02b15 	stw	ra,172(sp)
    9fc4:	df002a15 	stw	fp,168(sp)
    9fc8:	df002a04 	addi	fp,sp,168
	// Say hello through the debug interface
	printf("Hello from Nios II!\n");
    9fcc:	01000074 	movhi	r4,1
    9fd0:	21396e04 	addi	r4,r4,-6728
    9fd4:	000bef40 	call	bef4 <puts>

	// Put 0x08 in the memory of the IP and enable the count down
	IOWR(ESL_BUS_DEMO_0_BASE, 0x00, 1 << 31 | 0x20);
    9fd8:	00e00034 	movhi	r3,32768
    9fdc:	18c00804 	addi	r3,r3,32
    9fe0:	00800074 	movhi	r2,1
    9fe4:	10840004 	addi	r2,r2,4096
    9fe8:	10c00035 	stwio	r3,0(r2)

	// Verify that it is there
	int nReadOut = IORD(ESL_BUS_DEMO_0_BASE, 0x00);
    9fec:	00800074 	movhi	r2,1
    9ff0:	10840004 	addi	r2,r2,4096
    9ff4:	10800037 	ldwio	r2,0(r2)
    9ff8:	e0bfd915 	stw	r2,-156(fp)
	printf("From the IP: %u \n\r", nReadOut);
    9ffc:	01000074 	movhi	r4,1
    a000:	21397304 	addi	r4,r4,-6708
    a004:	e17fd917 	ldw	r5,-156(fp)
    a008:	000be280 	call	be28 <printf>
	XXDouble y_Tilt[1 + 1];

	XXDouble u_Pan[2 + 1];
	XXDouble y_Pan[2 + 1];

	int EncoderAxis = IORD(ESL_BUS_DEMO_0_BASE, 0x00);
    a00c:	00800074 	movhi	r2,1
    a010:	10840004 	addi	r2,r2,4096
    a014:	10800037 	ldwio	r2,0(r2)
    a018:	e0bfda15 	stw	r2,-152(fp)
	int encoderPan = EncoderAxis >> 16;
    a01c:	e0bfda17 	ldw	r2,-152(fp)
    a020:	1005d43a 	srai	r2,r2,16
    a024:	e0bfdb15 	stw	r2,-148(fp)
	int temp = EncoderAxis << 16;
    a028:	e0bfda17 	ldw	r2,-152(fp)
    a02c:	1004943a 	slli	r2,r2,16
    a030:	e0bfdc15 	stw	r2,-144(fp)
	int encoderTilt = temp >> 16;
    a034:	e0bfdc17 	ldw	r2,-144(fp)
    a038:	1005d43a 	srai	r2,r2,16
    a03c:	e0bfdd15 	stw	r2,-140(fp)

	/* Initialize the inputs and outputs of TIlt controller with correct initial values */
	u_Tilt[0] = 0.0;		/* corr */
    a040:	e03fe415 	stw	zero,-112(fp)
    a044:	e03fe515 	stw	zero,-108(fp)
	//u_Tilt[1] = convertPanToRadian(encoderTilt);		/* in */
	//u_Tilt[2] = convertPanToRadian(encoderTilt);		/* position */
	u_Tilt[1] = 0.0;		/* in */
    a048:	e03fe615 	stw	zero,-104(fp)
    a04c:	e03fe715 	stw	zero,-100(fp)
	u_Tilt[2] = 0.0;		/* position */
    a050:	e03fe815 	stw	zero,-96(fp)
    a054:	e03fe915 	stw	zero,-92(fp)

	y_Tilt[0] = 0.0;		/* out */
    a058:	e03fec15 	stw	zero,-80(fp)
    a05c:	e03fed15 	stw	zero,-76(fp)

	/* Initialize the inputs and outputs of Pan Controller with correct initial values */
	//u_Pan[0] = convertPanToRadian(encoderPan);		/* in */
	//u_Pan[1] = convertPanToRadian(encoderPan);		/* position */
	u_Pan[0] = 0.0;		/* in */
    a060:	e03ff015 	stw	zero,-64(fp)
    a064:	e03ff115 	stw	zero,-60(fp)
	u_Pan[1] = 0.0;		/* position */
    a068:	e03ff215 	stw	zero,-56(fp)
    a06c:	e03ff315 	stw	zero,-52(fp)

	y_Pan[0] = 0.0;		/* corr */
    a070:	e03ff615 	stw	zero,-40(fp)
    a074:	e03ff715 	stw	zero,-36(fp)
	y_Pan[1] = 0.0;		/* out */
    a078:	e03ff815 	stw	zero,-32(fp)
    a07c:	e03ff915 	stw	zero,-28(fp)

	/* Initialize the submodel itself */
	printf("Starting PID loop");
    a080:	01000074 	movhi	r4,1
    a084:	21397804 	addi	r4,r4,-6688
    a088:	000be280 	call	be28 <printf>
	//TiltInitializeSubmodel(u_Tilt, y_Tilt, Tilt_time);
	PanInitializeSubmodel(u_Pan, y_Pan, Pan_time);
    a08c:	01000074 	movhi	r4,1
    a090:	213b7904 	addi	r4,r4,-4636
    a094:	20800017 	ldw	r2,0(r4)
    a098:	20c00117 	ldw	r3,4(r4)
    a09c:	e13ff004 	addi	r4,fp,-64
    a0a0:	e17ff604 	addi	r5,fp,-40
    a0a4:	100d883a 	mov	r6,r2
    a0a8:	180f883a 	mov	r7,r3
    a0ac:	0008cbc0 	call	8cbc <PanInitializeSubmodel>
	// write(file, &echo_back, 3);
	//usleep(10000000);
	//printf("%c \n", read_buffer);
	
	clock_t startTimeTilt, startTimePan, curTimeTilt, curTimePan;
	startTimeTilt = clock();
    a0b0:	000bd800 	call	bd80 <clock>
    a0b4:	e0bfde15 	stw	r2,-136(fp)
	startTimePan = clock();
    a0b8:	000bd800 	call	bd80 <clock>
    a0bc:	e0bfd615 	stw	r2,-168(fp)
	//while ((Tilt_time < Tilt_finish_time) || (Pan_time < Pan_finish_time))
	while (1)//(Pan_time < Pan_finish_time))
	{
		EncoderAxis = IORD(ESL_BUS_DEMO_0_BASE, 0x00);
    a0c0:	00800074 	movhi	r2,1
    a0c4:	10840004 	addi	r2,r2,4096
    a0c8:	10800037 	ldwio	r2,0(r2)
    a0cc:	e0bfda15 	stw	r2,-152(fp)
		encoderPan = EncoderAxis >> 16;
    a0d0:	e0bfda17 	ldw	r2,-152(fp)
    a0d4:	1005d43a 	srai	r2,r2,16
    a0d8:	e0bfdb15 	stw	r2,-148(fp)
		temp = EncoderAxis << 16;
    a0dc:	e0bfda17 	ldw	r2,-152(fp)
    a0e0:	1004943a 	slli	r2,r2,16
    a0e4:	e0bfdc15 	stw	r2,-144(fp)
		encoderTilt = temp >> 16;
    a0e8:	e0bfdc17 	ldw	r2,-144(fp)
    a0ec:	1005d43a 	srai	r2,r2,16
    a0f0:	e0bfdd15 	stw	r2,-140(fp)

		u_Pan[0] = convertPanToRadian(encoderPan);
    a0f4:	e13fdb17 	ldw	r4,-148(fp)
    a0f8:	0009b280 	call	9b28 <convertPanToRadian>
    a0fc:	1007883a 	mov	r3,r2
    a100:	1809883a 	mov	r4,r3
    a104:	000a8100 	call	a810 <__extendsfdf2>
    a108:	1009883a 	mov	r4,r2
    a10c:	180b883a 	mov	r5,r3
    a110:	e13ff015 	stw	r4,-64(fp)
    a114:	e17ff115 	stw	r5,-60(fp)
		u_Tilt[0] = y_Pan[0];
    a118:	e0bff617 	ldw	r2,-40(fp)
    a11c:	e0fff717 	ldw	r3,-36(fp)
    a120:	e0bfe415 	stw	r2,-112(fp)
    a124:	e0ffe515 	stw	r3,-108(fp)
		u_Tilt[1] = convertTiltToRadian(encoderTilt);
    a128:	e13fdd17 	ldw	r4,-140(fp)
    a12c:	0009be40 	call	9be4 <convertTiltToRadian>
    a130:	1007883a 	mov	r3,r2
    a134:	1809883a 	mov	r4,r3
    a138:	000a8100 	call	a810 <__extendsfdf2>
    a13c:	1009883a 	mov	r4,r2
    a140:	180b883a 	mov	r5,r3
    a144:	e13fe615 	stw	r4,-104(fp)
    a148:	e17fe715 	stw	r5,-100(fp)
		//printf("Pan encoder: %d \n", (int)encoderPan);
		//printf("Pan tilt: %d \n", (int)encoderTilt);

		//usleep(10000);
		//generate inputs
		u_Pan[1] = 0;
    a14c:	e03ff215 	stw	zero,-56(fp)
    a150:	e03ff315 	stw	zero,-52(fp)
		u_Tilt[2] = 0;
    a154:	e03fe815 	stw	zero,-96(fp)
    a158:	e03fe915 	stw	zero,-92(fp)
		if(Pan_time >= 1 && Pan_time <= 2){
    a15c:	01000074 	movhi	r4,1
    a160:	213b7904 	addi	r4,r4,-4636
    a164:	20800017 	ldw	r2,0(r4)
    a168:	20c00117 	ldw	r3,4(r4)
    a16c:	1009883a 	mov	r4,r2
    a170:	180b883a 	mov	r5,r3
    a174:	000d883a 	mov	r6,zero
    a178:	01cffc34 	movhi	r7,16368
    a17c:	000b22c0 	call	b22c <__gedf2>
    a180:	10001016 	blt	r2,zero,a1c4 <main+0x208>
    a184:	01000074 	movhi	r4,1
    a188:	213b7904 	addi	r4,r4,-4636
    a18c:	20800017 	ldw	r2,0(r4)
    a190:	20c00117 	ldw	r3,4(r4)
    a194:	1009883a 	mov	r4,r2
    a198:	180b883a 	mov	r5,r3
    a19c:	000d883a 	mov	r6,zero
    a1a0:	01d00034 	movhi	r7,16384
    a1a4:	000b2ec0 	call	b2ec <__ledf2>
    a1a8:	00800616 	blt	zero,r2,a1c4 <main+0x208>
			u_Pan[1] = 0.5*PI;
    a1ac:	00b020f4 	movhi	r2,49283
    a1b0:	10849bc4 	addi	r2,r2,4719
    a1b4:	e0bff215 	stw	r2,-56(fp)
    a1b8:	008ffe74 	movhi	r2,16377
    a1bc:	10887284 	addi	r2,r2,8650
    a1c0:	e0bff315 	stw	r2,-52(fp)
			//printf("time 0\n");;
		}
		if(Pan_time >= 5 && Pan_time <= 6){
    a1c4:	01000074 	movhi	r4,1
    a1c8:	213b7904 	addi	r4,r4,-4636
    a1cc:	20800017 	ldw	r2,0(r4)
    a1d0:	20c00117 	ldw	r3,4(r4)
    a1d4:	1009883a 	mov	r4,r2
    a1d8:	180b883a 	mov	r5,r3
    a1dc:	000d883a 	mov	r6,zero
    a1e0:	01d00534 	movhi	r7,16404
    a1e4:	000b22c0 	call	b22c <__gedf2>
    a1e8:	10001016 	blt	r2,zero,a22c <main+0x270>
    a1ec:	01000074 	movhi	r4,1
    a1f0:	213b7904 	addi	r4,r4,-4636
    a1f4:	20800017 	ldw	r2,0(r4)
    a1f8:	20c00117 	ldw	r3,4(r4)
    a1fc:	1009883a 	mov	r4,r2
    a200:	180b883a 	mov	r5,r3
    a204:	000d883a 	mov	r6,zero
    a208:	01d00634 	movhi	r7,16408
    a20c:	000b2ec0 	call	b2ec <__ledf2>
    a210:	00800616 	blt	zero,r2,a22c <main+0x270>
			u_Pan[1] = 1.0*PI;
    a214:	00b020f4 	movhi	r2,49283
    a218:	10849bc4 	addi	r2,r2,4719
    a21c:	e0bff215 	stw	r2,-56(fp)
    a220:	00900274 	movhi	r2,16393
    a224:	10887284 	addi	r2,r2,8650
    a228:	e0bff315 	stw	r2,-52(fp)
			//printf("time 5\n");
		}
		if(Pan_time >= 10 && Pan_time <= 11){
    a22c:	01000074 	movhi	r4,1
    a230:	213b7904 	addi	r4,r4,-4636
    a234:	20800017 	ldw	r2,0(r4)
    a238:	20c00117 	ldw	r3,4(r4)
    a23c:	1009883a 	mov	r4,r2
    a240:	180b883a 	mov	r5,r3
    a244:	000d883a 	mov	r6,zero
    a248:	01d00934 	movhi	r7,16420
    a24c:	000b22c0 	call	b22c <__gedf2>
    a250:	10001016 	blt	r2,zero,a294 <main+0x2d8>
    a254:	01000074 	movhi	r4,1
    a258:	213b7904 	addi	r4,r4,-4636
    a25c:	20800017 	ldw	r2,0(r4)
    a260:	20c00117 	ldw	r3,4(r4)
    a264:	1009883a 	mov	r4,r2
    a268:	180b883a 	mov	r5,r3
    a26c:	000d883a 	mov	r6,zero
    a270:	01d009b4 	movhi	r7,16422
    a274:	000b2ec0 	call	b2ec <__ledf2>
    a278:	00800616 	blt	zero,r2,a294 <main+0x2d8>

			u_Pan[1] = -1.0*PI;
    a27c:	00b020f4 	movhi	r2,49283
    a280:	10849bc4 	addi	r2,r2,4719
    a284:	e0bff215 	stw	r2,-56(fp)
    a288:	00b00274 	movhi	r2,49161
    a28c:	10887284 	addi	r2,r2,8650
    a290:	e0bff315 	stw	r2,-52(fp)
			//printf("time 10\n");
		}
		if(Pan_time >= 15){
    a294:	01000074 	movhi	r4,1
    a298:	213b7904 	addi	r4,r4,-4636
    a29c:	20800017 	ldw	r2,0(r4)
    a2a0:	20c00117 	ldw	r3,4(r4)
    a2a4:	1009883a 	mov	r4,r2
    a2a8:	180b883a 	mov	r5,r3
    a2ac:	000d883a 	mov	r6,zero
    a2b0:	01d00bb4 	movhi	r7,16430
    a2b4:	000b22c0 	call	b22c <__gedf2>
    a2b8:	10000416 	blt	r2,zero,a2cc <main+0x310>

			Pan_time = 0.0;
    a2bc:	00800074 	movhi	r2,1
    a2c0:	10bb7904 	addi	r2,r2,-4636
    a2c4:	10000015 	stw	zero,0(r2)
    a2c8:	10000115 	stw	zero,4(r2)
		//if(Tilt_time >= 15){

		//	Tilt_time = 0.0;
		//}

		curTimeTilt = clock();
    a2cc:	000bd800 	call	bd80 <clock>
    a2d0:	e0bfdf15 	stw	r2,-132(fp)
		//if ((float)(curTimeTilt - startTimeTilt)/CLOCKS_PER_SEC >= Tilt_step_size) {
			//TiltCalculateSubmodel(u_Tilt, y_Tilt, Tilt_time);
			//startTimeTilt = curTimeTilt;
		//}
		curTimePan = clock();
    a2d4:	000bd800 	call	bd80 <clock>
    a2d8:	e0bfe015 	stw	r2,-128(fp)
		//printf("time curTimePan %u \n", (int)curTimePan);
		if ((float)(curTimePan - startTimePan)/CLOCKS_PER_SEC >= Pan_step_size ) {
    a2dc:	e0ffe017 	ldw	r3,-128(fp)
    a2e0:	e0bfd617 	ldw	r2,-168(fp)
    a2e4:	1885c83a 	sub	r2,r3,r2
    a2e8:	1009883a 	mov	r4,r2
    a2ec:	000a8540 	call	a854 <__floatunsisf>
    a2f0:	1007883a 	mov	r3,r2
    a2f4:	1809883a 	mov	r4,r3
    a2f8:	01511eb4 	movhi	r5,17530
    a2fc:	000a6300 	call	a630 <__divsf3>
    a300:	1007883a 	mov	r3,r2
    a304:	1805883a 	mov	r2,r3
    a308:	1009883a 	mov	r4,r2
    a30c:	000a8100 	call	a810 <__extendsfdf2>
    a310:	100b883a 	mov	r5,r2
    a314:	180d883a 	mov	r6,r3
    a318:	01000074 	movhi	r4,1
    a31c:	213a8f04 	addi	r4,r4,-5572
    a320:	20800017 	ldw	r2,0(r4)
    a324:	20c00117 	ldw	r3,4(r4)
    a328:	2809883a 	mov	r4,r5
    a32c:	300b883a 	mov	r5,r6
    a330:	100d883a 	mov	r6,r2
    a334:	180f883a 	mov	r7,r3
    a338:	000b22c0 	call	b22c <__gedf2>
    a33c:	10000b16 	blt	r2,zero,a36c <main+0x3b0>
			PanCalculateSubmodel(u_Pan, y_Pan, Pan_time);
    a340:	01000074 	movhi	r4,1
    a344:	213b7904 	addi	r4,r4,-4636
    a348:	20800017 	ldw	r2,0(r4)
    a34c:	20c00117 	ldw	r3,4(r4)
    a350:	e13ff004 	addi	r4,fp,-64
    a354:	e17ff604 	addi	r5,fp,-40
    a358:	100d883a 	mov	r6,r2
    a35c:	180f883a 	mov	r7,r3
    a360:	0008d5c0 	call	8d5c <PanCalculateSubmodel>
			startTimePan = curTimePan;
    a364:	e0bfe017 	ldw	r2,-128(fp)
    a368:	e0bfd615 	stw	r2,-168(fp)
			//printf("Calcmodel\n");
		}
		
		int pwmPan = convertToPwm(y_Pan[1]);
    a36c:	e0bff817 	ldw	r2,-32(fp)
    a370:	e0fff917 	ldw	r3,-28(fp)
    a374:	1009883a 	mov	r4,r2
    a378:	180b883a 	mov	r5,r3
    a37c:	0009ab40 	call	9ab4 <convertToPwm>
    a380:	e0bfe115 	stw	r2,-124(fp)
		int pwmTilt = convertToPwm(y_Tilt[0]);
    a384:	e0bfec17 	ldw	r2,-80(fp)
    a388:	e0ffed17 	ldw	r3,-76(fp)
    a38c:	1009883a 	mov	r4,r2
    a390:	180b883a 	mov	r5,r3
    a394:	0009ab40 	call	9ab4 <convertToPwm>
    a398:	e0bfe215 	stw	r2,-120(fp)

		int panDir = 0;
    a39c:	e03fd715 	stw	zero,-164(fp)
		if (pwmPan < 0) {
    a3a0:	e0bfe117 	ldw	r2,-124(fp)
    a3a4:	1000020e 	bge	r2,zero,a3b0 <main+0x3f4>
			panDir = 1;
    a3a8:	00800044 	movi	r2,1
    a3ac:	e0bfd715 	stw	r2,-164(fp)
		}
		int tiltDir = 0;
    a3b0:	e03fd815 	stw	zero,-160(fp)
		if (pwmTilt < 0) {
    a3b4:	e0bfe217 	ldw	r2,-120(fp)
    a3b8:	1000020e 	bge	r2,zero,a3c4 <main+0x408>
			tiltDir = 1;
    a3bc:	00800044 	movi	r2,1
    a3c0:	e0bfd815 	stw	r2,-160(fp)
		}

		pwmPan = abs(pwmPan);
    a3c4:	e0bfe117 	ldw	r2,-124(fp)
    a3c8:	1000010e 	bge	r2,zero,a3d0 <main+0x414>
    a3cc:	0085c83a 	sub	r2,zero,r2
    a3d0:	e0bfe115 	stw	r2,-124(fp)
		pwmTilt = abs(pwmTilt);
    a3d4:	e0bfe217 	ldw	r2,-120(fp)
    a3d8:	1000010e 	bge	r2,zero,a3e0 <main+0x424>
    a3dc:	0085c83a 	sub	r2,zero,r2
    a3e0:	e0bfe215 	stw	r2,-120(fp)
		//printf("Pan direction: %d \n", panDir);
		//printf("Pan pwm: %d \n", pwmPan);
		//printf("Pan Tilt: %d \n", pwmTilt);
		//printf("Position: %d \n", (int)1000 * u_Pan[0]);

		uint32_t message = 0;
    a3e4:	e03fe315 	stw	zero,-116(fp)
		message = tiltDir << 31 | panDir << 30 | pwmPan << 10 | pwmTilt;
    a3e8:	e0bfd817 	ldw	r2,-160(fp)
    a3ec:	100697fa 	slli	r3,r2,31
    a3f0:	e0bfd717 	ldw	r2,-164(fp)
    a3f4:	100497ba 	slli	r2,r2,30
    a3f8:	1886b03a 	or	r3,r3,r2
    a3fc:	e0bfe117 	ldw	r2,-124(fp)
    a400:	100492ba 	slli	r2,r2,10
    a404:	1886b03a 	or	r3,r3,r2
    a408:	e0bfe217 	ldw	r2,-120(fp)
    a40c:	1884b03a 	or	r2,r3,r2
    a410:	e0bfe315 	stw	r2,-116(fp)

		//printf("To the IP: %u \n\r", message);
		IOWR(ESL_BUS_DEMO_0_BASE, 0x00, message);	
    a414:	e0ffe317 	ldw	r3,-116(fp)
    a418:	00800074 	movhi	r2,1
    a41c:	10840004 	addi	r2,r2,4096
    a420:	10c00035 	stwio	r3,0(r2)
	}
    a424:	003f2606 	br	a0c0 <main+0x104>

0000a428 <XXString2Double>:
	double m_double;
	const char* m_char;
}str2dbl;

XXDouble XXString2Double(const char* argument)
{
    a428:	defffc04 	addi	sp,sp,-16
    a42c:	df000315 	stw	fp,12(sp)
    a430:	df000304 	addi	fp,sp,12
    a434:	e13fff15 	stw	r4,-4(fp)
	str2dbl myConversion;
	myConversion.m_char = argument;
    a438:	e0bfff17 	ldw	r2,-4(fp)
    a43c:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_double;
    a440:	e17ffd17 	ldw	r5,-12(fp)
    a444:	e1bffe17 	ldw	r6,-8(fp)
    a448:	2807883a 	mov	r3,r5
    a44c:	3009883a 	mov	r4,r6

}
    a450:	1805883a 	mov	r2,r3
    a454:	2007883a 	mov	r3,r4
    a458:	e037883a 	mov	sp,fp
    a45c:	df000017 	ldw	fp,0(sp)
    a460:	dec00104 	addi	sp,sp,4
    a464:	f800283a 	ret

0000a468 <XXDouble2String>:

const char* XXDouble2String(XXDouble argument)
{
    a468:	defffb04 	addi	sp,sp,-20
    a46c:	df000415 	stw	fp,16(sp)
    a470:	df000404 	addi	fp,sp,16
    a474:	e13ffe15 	stw	r4,-8(fp)
    a478:	e17fff15 	stw	r5,-4(fp)
	str2dbl myConversion;
	myConversion.m_double = argument;
    a47c:	e0bffe17 	ldw	r2,-8(fp)
    a480:	e0bffc15 	stw	r2,-16(fp)
    a484:	e0bfff17 	ldw	r2,-4(fp)
    a488:	e0bffd15 	stw	r2,-12(fp)
	return myConversion.m_char;
    a48c:	e0bffc17 	ldw	r2,-16(fp)
}
    a490:	e037883a 	mov	sp,fp
    a494:	df000017 	ldw	fp,0(sp)
    a498:	dec00104 	addi	sp,sp,4
    a49c:	f800283a 	ret

0000a4a0 <__mulsf3>:
    a4a0:	defff104 	addi	sp,sp,-60
    a4a4:	d9000d15 	stw	r4,52(sp)
    a4a8:	d9400c15 	stw	r5,48(sp)
    a4ac:	d9000d04 	addi	r4,sp,52
    a4b0:	d9400804 	addi	r5,sp,32
    a4b4:	dfc00e15 	stw	ra,56(sp)
    a4b8:	000b8380 	call	b838 <__unpack_f>
    a4bc:	d9000c04 	addi	r4,sp,48
    a4c0:	d9400404 	addi	r5,sp,16
    a4c4:	000b8380 	call	b838 <__unpack_f>
    a4c8:	d8c00817 	ldw	r3,32(sp)
    a4cc:	00800044 	movi	r2,1
    a4d0:	10c00936 	bltu	r2,r3,a4f8 <__mulsf3+0x58>
    a4d4:	d8c00917 	ldw	r3,36(sp)
    a4d8:	d8800517 	ldw	r2,20(sp)
    a4dc:	d9000804 	addi	r4,sp,32
    a4e0:	1884c03a 	cmpne	r2,r3,r2
    a4e4:	d8800915 	stw	r2,36(sp)
    a4e8:	000b70c0 	call	b70c <__pack_f>
    a4ec:	dfc00e17 	ldw	ra,56(sp)
    a4f0:	dec00f04 	addi	sp,sp,60
    a4f4:	f800283a 	ret
    a4f8:	d9000417 	ldw	r4,16(sp)
    a4fc:	11000936 	bltu	r2,r4,a524 <__mulsf3+0x84>
    a500:	d8800517 	ldw	r2,20(sp)
    a504:	d8c00917 	ldw	r3,36(sp)
    a508:	d9000404 	addi	r4,sp,16
    a50c:	1884c03a 	cmpne	r2,r3,r2
    a510:	d8800515 	stw	r2,20(sp)
    a514:	000b70c0 	call	b70c <__pack_f>
    a518:	dfc00e17 	ldw	ra,56(sp)
    a51c:	dec00f04 	addi	sp,sp,60
    a520:	f800283a 	ret
    a524:	00800104 	movi	r2,4
    a528:	1880051e 	bne	r3,r2,a540 <__mulsf3+0xa0>
    a52c:	00800084 	movi	r2,2
    a530:	20bfe81e 	bne	r4,r2,a4d4 <__mulsf3+0x34>
    a534:	01000074 	movhi	r4,1
    a538:	21397d04 	addi	r4,r4,-6668
    a53c:	003fea06 	br	a4e8 <__mulsf3+0x48>
    a540:	2080031e 	bne	r4,r2,a550 <__mulsf3+0xb0>
    a544:	00800084 	movi	r2,2
    a548:	18bffa26 	beq	r3,r2,a534 <__mulsf3+0x94>
    a54c:	003fec06 	br	a500 <__mulsf3+0x60>
    a550:	00800084 	movi	r2,2
    a554:	18bfdf26 	beq	r3,r2,a4d4 <__mulsf3+0x34>
    a558:	20bfe926 	beq	r4,r2,a500 <__mulsf3+0x60>
    a55c:	d9000717 	ldw	r4,28(sp)
    a560:	d9800b17 	ldw	r6,44(sp)
    a564:	000b883a 	mov	r5,zero
    a568:	000f883a 	mov	r7,zero
    a56c:	000b5500 	call	b550 <__muldi3>
    a570:	d9000617 	ldw	r4,24(sp)
    a574:	d9400a17 	ldw	r5,40(sp)
    a578:	d9c00917 	ldw	r7,36(sp)
    a57c:	290b883a 	add	r5,r5,r4
    a580:	d9000517 	ldw	r4,20(sp)
    a584:	29800084 	addi	r6,r5,2
    a588:	d9800215 	stw	r6,8(sp)
    a58c:	3908c03a 	cmpne	r4,r7,r4
    a590:	d9000115 	stw	r4,4(sp)
    a594:	1809883a 	mov	r4,r3
    a598:	1800070e 	bge	r3,zero,a5b8 <__mulsf3+0x118>
    a59c:	1900004c 	andi	r4,r3,1
    a5a0:	294000c4 	addi	r5,r5,3
    a5a4:	20000226 	beq	r4,zero,a5b0 <__mulsf3+0x110>
    a5a8:	1004d07a 	srli	r2,r2,1
    a5ac:	10a00034 	orhi	r2,r2,32768
    a5b0:	1808d07a 	srli	r4,r3,1
    a5b4:	d9400215 	stw	r5,8(sp)
    a5b8:	01900034 	movhi	r6,16384
    a5bc:	31bfffc4 	addi	r6,r6,-1
    a5c0:	31000c36 	bltu	r6,r4,a5f4 <__mulsf3+0x154>
    a5c4:	d8c00217 	ldw	r3,8(sp)
    a5c8:	18ffffc4 	addi	r3,r3,-1
    a5cc:	00000306 	br	a5dc <__mulsf3+0x13c>
    a5d0:	1085883a 	add	r2,r2,r2
    a5d4:	18ffffc4 	addi	r3,r3,-1
    a5d8:	31000536 	bltu	r6,r4,a5f0 <__mulsf3+0x150>
    a5dc:	2109883a 	add	r4,r4,r4
    a5e0:	180b883a 	mov	r5,r3
    a5e4:	103ffa0e 	bge	r2,zero,a5d0 <__mulsf3+0x130>
    a5e8:	21000054 	ori	r4,r4,1
    a5ec:	003ff806 	br	a5d0 <__mulsf3+0x130>
    a5f0:	d9400215 	stw	r5,8(sp)
    a5f4:	21401fcc 	andi	r5,r4,127
    a5f8:	00c01004 	movi	r3,64
    a5fc:	28c00526 	beq	r5,r3,a614 <__mulsf3+0x174>
    a600:	008000c4 	movi	r2,3
    a604:	d9000315 	stw	r4,12(sp)
    a608:	d8800015 	stw	r2,0(sp)
    a60c:	d809883a 	mov	r4,sp
    a610:	003fb506 	br	a4e8 <__mulsf3+0x48>
    a614:	20c0200c 	andi	r3,r4,128
    a618:	183ff91e 	bne	r3,zero,a600 <__mulsf3+0x160>
    a61c:	103ff826 	beq	r2,zero,a600 <__mulsf3+0x160>
    a620:	21001004 	addi	r4,r4,64
    a624:	00bfe004 	movi	r2,-128
    a628:	2088703a 	and	r4,r4,r2
    a62c:	003ff406 	br	a600 <__mulsf3+0x160>

0000a630 <__divsf3>:
    a630:	defff504 	addi	sp,sp,-44
    a634:	d9000915 	stw	r4,36(sp)
    a638:	d9400815 	stw	r5,32(sp)
    a63c:	d9000904 	addi	r4,sp,36
    a640:	d9400404 	addi	r5,sp,16
    a644:	dfc00a15 	stw	ra,40(sp)
    a648:	000b8380 	call	b838 <__unpack_f>
    a64c:	d9000804 	addi	r4,sp,32
    a650:	d80b883a 	mov	r5,sp
    a654:	000b8380 	call	b838 <__unpack_f>
    a658:	d8c00417 	ldw	r3,16(sp)
    a65c:	00800044 	movi	r2,1
    a660:	10c00536 	bltu	r2,r3,a678 <__divsf3+0x48>
    a664:	d9000404 	addi	r4,sp,16
    a668:	000b70c0 	call	b70c <__pack_f>
    a66c:	dfc00a17 	ldw	ra,40(sp)
    a670:	dec00b04 	addi	sp,sp,44
    a674:	f800283a 	ret
    a678:	d9000017 	ldw	r4,0(sp)
    a67c:	11000536 	bltu	r2,r4,a694 <__divsf3+0x64>
    a680:	d809883a 	mov	r4,sp
    a684:	000b70c0 	call	b70c <__pack_f>
    a688:	dfc00a17 	ldw	ra,40(sp)
    a68c:	dec00b04 	addi	sp,sp,44
    a690:	f800283a 	ret
    a694:	d9800517 	ldw	r6,20(sp)
    a698:	d9400117 	ldw	r5,4(sp)
    a69c:	00800104 	movi	r2,4
    a6a0:	314af03a 	xor	r5,r6,r5
    a6a4:	d9400515 	stw	r5,20(sp)
    a6a8:	18800226 	beq	r3,r2,a6b4 <__divsf3+0x84>
    a6ac:	01400084 	movi	r5,2
    a6b0:	1940041e 	bne	r3,r5,a6c4 <__divsf3+0x94>
    a6b4:	193feb1e 	bne	r3,r4,a664 <__divsf3+0x34>
    a6b8:	01000074 	movhi	r4,1
    a6bc:	21397d04 	addi	r4,r4,-6668
    a6c0:	003fe906 	br	a668 <__divsf3+0x38>
    a6c4:	20802226 	beq	r4,r2,a750 <__divsf3+0x120>
    a6c8:	21402526 	beq	r4,r5,a760 <__divsf3+0x130>
    a6cc:	d9000617 	ldw	r4,24(sp)
    a6d0:	d8c00217 	ldw	r3,8(sp)
    a6d4:	d8800717 	ldw	r2,28(sp)
    a6d8:	d9400317 	ldw	r5,12(sp)
    a6dc:	20c7c83a 	sub	r3,r4,r3
    a6e0:	d8c00615 	stw	r3,24(sp)
    a6e4:	1140032e 	bgeu	r2,r5,a6f4 <__divsf3+0xc4>
    a6e8:	18ffffc4 	addi	r3,r3,-1
    a6ec:	1085883a 	add	r2,r2,r2
    a6f0:	d8c00615 	stw	r3,24(sp)
    a6f4:	00c007c4 	movi	r3,31
    a6f8:	01100034 	movhi	r4,16384
    a6fc:	000d883a 	mov	r6,zero
    a700:	18ffffc4 	addi	r3,r3,-1
    a704:	11400236 	bltu	r2,r5,a710 <__divsf3+0xe0>
    a708:	310cb03a 	or	r6,r6,r4
    a70c:	1145c83a 	sub	r2,r2,r5
    a710:	2008d07a 	srli	r4,r4,1
    a714:	1085883a 	add	r2,r2,r2
    a718:	183ff91e 	bne	r3,zero,a700 <__divsf3+0xd0>
    a71c:	31001fcc 	andi	r4,r6,127
    a720:	00c01004 	movi	r3,64
    a724:	20c00226 	beq	r4,r3,a730 <__divsf3+0x100>
    a728:	d9800715 	stw	r6,28(sp)
    a72c:	003fcd06 	br	a664 <__divsf3+0x34>
    a730:	30c0200c 	andi	r3,r6,128
    a734:	183ffc1e 	bne	r3,zero,a728 <__divsf3+0xf8>
    a738:	103ffb26 	beq	r2,zero,a728 <__divsf3+0xf8>
    a73c:	31801004 	addi	r6,r6,64
    a740:	00bfe004 	movi	r2,-128
    a744:	308c703a 	and	r6,r6,r2
    a748:	d9800715 	stw	r6,28(sp)
    a74c:	003fc506 	br	a664 <__divsf3+0x34>
    a750:	d8000715 	stw	zero,28(sp)
    a754:	d8000615 	stw	zero,24(sp)
    a758:	d9000404 	addi	r4,sp,16
    a75c:	003fc206 	br	a668 <__divsf3+0x38>
    a760:	d8800415 	stw	r2,16(sp)
    a764:	d9000404 	addi	r4,sp,16
    a768:	003fbf06 	br	a668 <__divsf3+0x38>

0000a76c <__floatsisf>:
    a76c:	2004d7fa 	srli	r2,r4,31
    a770:	defffa04 	addi	sp,sp,-24
    a774:	00c000c4 	movi	r3,3
    a778:	dfc00515 	stw	ra,20(sp)
    a77c:	dc000415 	stw	r16,16(sp)
    a780:	d8c00015 	stw	r3,0(sp)
    a784:	d8800115 	stw	r2,4(sp)
    a788:	2000081e 	bne	r4,zero,a7ac <__floatsisf+0x40>
    a78c:	00800084 	movi	r2,2
    a790:	d8800015 	stw	r2,0(sp)
    a794:	d809883a 	mov	r4,sp
    a798:	000b70c0 	call	b70c <__pack_f>
    a79c:	dfc00517 	ldw	ra,20(sp)
    a7a0:	dc000417 	ldw	r16,16(sp)
    a7a4:	dec00604 	addi	sp,sp,24
    a7a8:	f800283a 	ret
    a7ac:	00c00784 	movi	r3,30
    a7b0:	d8c00215 	stw	r3,8(sp)
    a7b4:	10000b1e 	bne	r2,zero,a7e4 <__floatsisf+0x78>
    a7b8:	2021883a 	mov	r16,r4
    a7bc:	8009883a 	mov	r4,r16
    a7c0:	000b6600 	call	b660 <__clzsi2>
    a7c4:	113fffc4 	addi	r4,r2,-1
    a7c8:	01000d0e 	bge	zero,r4,a800 <__floatsisf+0x94>
    a7cc:	8108983a 	sll	r4,r16,r4
    a7d0:	00c007c4 	movi	r3,31
    a7d4:	1885c83a 	sub	r2,r3,r2
    a7d8:	d9000315 	stw	r4,12(sp)
    a7dc:	d8800215 	stw	r2,8(sp)
    a7e0:	003fec06 	br	a794 <__floatsisf+0x28>
    a7e4:	00a00034 	movhi	r2,32768
    a7e8:	20800726 	beq	r4,r2,a808 <__floatsisf+0x9c>
    a7ec:	0121c83a 	sub	r16,zero,r4
    a7f0:	8009883a 	mov	r4,r16
    a7f4:	000b6600 	call	b660 <__clzsi2>
    a7f8:	113fffc4 	addi	r4,r2,-1
    a7fc:	013ff316 	blt	zero,r4,a7cc <__floatsisf+0x60>
    a800:	dc000315 	stw	r16,12(sp)
    a804:	003fe306 	br	a794 <__floatsisf+0x28>
    a808:	00b3c034 	movhi	r2,52992
    a80c:	003fe306 	br	a79c <__floatsisf+0x30>

0000a810 <__extendsfdf2>:
    a810:	defff904 	addi	sp,sp,-28
    a814:	d9000515 	stw	r4,20(sp)
    a818:	d9400104 	addi	r5,sp,4
    a81c:	d9000504 	addi	r4,sp,20
    a820:	dfc00615 	stw	ra,24(sp)
    a824:	000b8380 	call	b838 <__unpack_f>
    a828:	d9c00417 	ldw	r7,16(sp)
    a82c:	d9000117 	ldw	r4,4(sp)
    a830:	d9400217 	ldw	r5,8(sp)
    a834:	3804d0ba 	srli	r2,r7,2
    a838:	d9800317 	ldw	r6,12(sp)
    a83c:	380e97ba 	slli	r7,r7,30
    a840:	d8800015 	stw	r2,0(sp)
    a844:	000b4f00 	call	b4f0 <__make_dp>
    a848:	dfc00617 	ldw	ra,24(sp)
    a84c:	dec00704 	addi	sp,sp,28
    a850:	f800283a 	ret

0000a854 <__floatunsisf>:
    a854:	defffa04 	addi	sp,sp,-24
    a858:	dc000415 	stw	r16,16(sp)
    a85c:	dfc00515 	stw	ra,20(sp)
    a860:	d8000115 	stw	zero,4(sp)
    a864:	2021883a 	mov	r16,r4
    a868:	20001326 	beq	r4,zero,a8b8 <__floatunsisf+0x64>
    a86c:	008000c4 	movi	r2,3
    a870:	d8800015 	stw	r2,0(sp)
    a874:	00800784 	movi	r2,30
    a878:	d8800215 	stw	r2,8(sp)
    a87c:	000b6600 	call	b660 <__clzsi2>
    a880:	10ffffc4 	addi	r3,r2,-1
    a884:	18001416 	blt	r3,zero,a8d8 <__floatunsisf+0x84>
    a888:	18002526 	beq	r3,zero,a920 <__floatunsisf+0xcc>
    a88c:	80e0983a 	sll	r16,r16,r3
    a890:	00c007c4 	movi	r3,31
    a894:	1885c83a 	sub	r2,r3,r2
    a898:	dc000315 	stw	r16,12(sp)
    a89c:	d8800215 	stw	r2,8(sp)
    a8a0:	d809883a 	mov	r4,sp
    a8a4:	000b70c0 	call	b70c <__pack_f>
    a8a8:	dfc00517 	ldw	ra,20(sp)
    a8ac:	dc000417 	ldw	r16,16(sp)
    a8b0:	dec00604 	addi	sp,sp,24
    a8b4:	f800283a 	ret
    a8b8:	00800084 	movi	r2,2
    a8bc:	d809883a 	mov	r4,sp
    a8c0:	d8800015 	stw	r2,0(sp)
    a8c4:	000b70c0 	call	b70c <__pack_f>
    a8c8:	dfc00517 	ldw	ra,20(sp)
    a8cc:	dc000417 	ldw	r16,16(sp)
    a8d0:	dec00604 	addi	sp,sp,24
    a8d4:	f800283a 	ret
    a8d8:	00c7c83a 	sub	r3,zero,r3
    a8dc:	01000044 	movi	r4,1
    a8e0:	20c8983a 	sll	r4,r4,r3
    a8e4:	80c6d83a 	srl	r3,r16,r3
    a8e8:	213fffc4 	addi	r4,r4,-1
    a8ec:	2420703a 	and	r16,r4,r16
    a8f0:	8020c03a 	cmpne	r16,r16,zero
    a8f4:	010007c4 	movi	r4,31
    a8f8:	80c6b03a 	or	r3,r16,r3
    a8fc:	2085c83a 	sub	r2,r4,r2
    a900:	d809883a 	mov	r4,sp
    a904:	d8c00315 	stw	r3,12(sp)
    a908:	d8800215 	stw	r2,8(sp)
    a90c:	000b70c0 	call	b70c <__pack_f>
    a910:	dfc00517 	ldw	ra,20(sp)
    a914:	dc000417 	ldw	r16,16(sp)
    a918:	dec00604 	addi	sp,sp,24
    a91c:	f800283a 	ret
    a920:	dc000315 	stw	r16,12(sp)
    a924:	003fde06 	br	a8a0 <__floatunsisf+0x4c>

0000a928 <_fpadd_parts>:
    a928:	2005883a 	mov	r2,r4
    a92c:	21000017 	ldw	r4,0(r4)
    a930:	01c00044 	movi	r7,1
    a934:	3900622e 	bgeu	r7,r4,aac0 <_fpadd_parts+0x198>
    a938:	28c00017 	ldw	r3,0(r5)
    a93c:	38c05f2e 	bgeu	r7,r3,aabc <_fpadd_parts+0x194>
    a940:	01c00104 	movi	r7,4
    a944:	21c0c626 	beq	r4,r7,ac60 <_fpadd_parts+0x338>
    a948:	19c05c26 	beq	r3,r7,aabc <_fpadd_parts+0x194>
    a94c:	01c00084 	movi	r7,2
    a950:	19c06b26 	beq	r3,r7,ab00 <_fpadd_parts+0x1d8>
    a954:	21c05926 	beq	r4,r7,aabc <_fpadd_parts+0x194>
    a958:	11c00217 	ldw	r7,8(r2)
    a95c:	2ac00217 	ldw	r11,8(r5)
    a960:	13000317 	ldw	r12,12(r2)
    a964:	13400417 	ldw	r13,16(r2)
    a968:	3ac9c83a 	sub	r4,r7,r11
    a96c:	2a000317 	ldw	r8,12(r5)
    a970:	2a400417 	ldw	r9,16(r5)
    a974:	2015883a 	mov	r10,r4
    a978:	20007516 	blt	r4,zero,ab50 <_fpadd_parts+0x228>
    a97c:	00c00fc4 	movi	r3,63
    a980:	1a805016 	blt	r3,r10,aac4 <_fpadd_parts+0x19c>
    a984:	0100870e 	bge	zero,r4,aba4 <_fpadd_parts+0x27c>
    a988:	50fff804 	addi	r3,r10,-32
    a98c:	18009916 	blt	r3,zero,abf4 <_fpadd_parts+0x2cc>
    a990:	48d6d83a 	srl	r11,r9,r3
    a994:	001d883a 	mov	r14,zero
    a998:	18009e16 	blt	r3,zero,ac14 <_fpadd_parts+0x2ec>
    a99c:	01000044 	movi	r4,1
    a9a0:	20c6983a 	sll	r3,r4,r3
    a9a4:	0015883a 	mov	r10,zero
    a9a8:	513fffc4 	addi	r4,r10,-1
    a9ac:	2295403a 	cmpgeu	r10,r4,r10
    a9b0:	1a87c83a 	sub	r3,r3,r10
    a9b4:	1a52703a 	and	r9,r3,r9
    a9b8:	2210703a 	and	r8,r4,r8
    a9bc:	4250b03a 	or	r8,r8,r9
    a9c0:	4010c03a 	cmpne	r8,r8,zero
    a9c4:	42d0b03a 	or	r8,r8,r11
    a9c8:	7013883a 	mov	r9,r14
    a9cc:	11000117 	ldw	r4,4(r2)
    a9d0:	28800117 	ldw	r2,4(r5)
    a9d4:	20804126 	beq	r4,r2,aadc <_fpadd_parts+0x1b4>
    a9d8:	20006326 	beq	r4,zero,ab68 <_fpadd_parts+0x240>
    a9dc:	4305c83a 	sub	r2,r8,r12
    a9e0:	4091803a 	cmpltu	r8,r8,r2
    a9e4:	4b47c83a 	sub	r3,r9,r13
    a9e8:	1a07c83a 	sub	r3,r3,r8
    a9ec:	18006316 	blt	r3,zero,ab7c <_fpadd_parts+0x254>
    a9f0:	30000115 	stw	zero,4(r6)
    a9f4:	31c00215 	stw	r7,8(r6)
    a9f8:	30800315 	stw	r2,12(r6)
    a9fc:	30c00415 	stw	r3,16(r6)
    aa00:	11ffffc4 	addi	r7,r2,-1
    aa04:	388b403a 	cmpgeu	r5,r7,r2
    aa08:	194bc83a 	sub	r5,r3,r5
    aa0c:	01040034 	movhi	r4,4096
    aa10:	213fffc4 	addi	r4,r4,-1
    aa14:	21401736 	bltu	r4,r5,aa74 <_fpadd_parts+0x14c>
    aa18:	29008226 	beq	r5,r4,ac24 <_fpadd_parts+0x2fc>
    aa1c:	31400217 	ldw	r5,8(r6)
    aa20:	02840034 	movhi	r10,4096
    aa24:	52bfffc4 	addi	r10,r10,-1
    aa28:	033fff84 	movi	r12,-2
    aa2c:	297fffc4 	addi	r5,r5,-1
    aa30:	00000106 	br	aa38 <_fpadd_parts+0x110>
    aa34:	3a804a26 	beq	r7,r10,ab60 <_fpadd_parts+0x238>
    aa38:	1089883a 	add	r4,r2,r2
    aa3c:	2091803a 	cmpltu	r8,r4,r2
    aa40:	18c7883a 	add	r3,r3,r3
    aa44:	227fffc4 	addi	r9,r4,-1
    aa48:	40d1883a 	add	r8,r8,r3
    aa4c:	490f403a 	cmpgeu	r7,r9,r4
    aa50:	41cfc83a 	sub	r7,r8,r7
    aa54:	2817883a 	mov	r11,r5
    aa58:	2005883a 	mov	r2,r4
    aa5c:	4007883a 	mov	r3,r8
    aa60:	297fffc4 	addi	r5,r5,-1
    aa64:	51fff32e 	bgeu	r10,r7,aa34 <_fpadd_parts+0x10c>
    aa68:	31000315 	stw	r4,12(r6)
    aa6c:	32000415 	stw	r8,16(r6)
    aa70:	32c00215 	stw	r11,8(r6)
    aa74:	010000c4 	movi	r4,3
    aa78:	31000015 	stw	r4,0(r6)
    aa7c:	01080034 	movhi	r4,8192
    aa80:	213fffc4 	addi	r4,r4,-1
    aa84:	20c00b2e 	bgeu	r4,r3,aab4 <_fpadd_parts+0x18c>
    aa88:	180e97fa 	slli	r7,r3,31
    aa8c:	1008d07a 	srli	r4,r2,1
    aa90:	31400217 	ldw	r5,8(r6)
    aa94:	1806d07a 	srli	r3,r3,1
    aa98:	1080004c 	andi	r2,r2,1
    aa9c:	3908b03a 	or	r4,r7,r4
    aaa0:	1108b03a 	or	r4,r2,r4
    aaa4:	29400044 	addi	r5,r5,1
    aaa8:	31000315 	stw	r4,12(r6)
    aaac:	30c00415 	stw	r3,16(r6)
    aab0:	31400215 	stw	r5,8(r6)
    aab4:	3005883a 	mov	r2,r6
    aab8:	f800283a 	ret
    aabc:	2805883a 	mov	r2,r5
    aac0:	f800283a 	ret
    aac4:	59c01e0e 	bge	r11,r7,ab40 <_fpadd_parts+0x218>
    aac8:	11000117 	ldw	r4,4(r2)
    aacc:	28800117 	ldw	r2,4(r5)
    aad0:	0011883a 	mov	r8,zero
    aad4:	0013883a 	mov	r9,zero
    aad8:	20bfbf1e 	bne	r4,r2,a9d8 <_fpadd_parts+0xb0>
    aadc:	4305883a 	add	r2,r8,r12
    aae0:	1207803a 	cmpltu	r3,r2,r8
    aae4:	4b53883a 	add	r9,r9,r13
    aae8:	1a47883a 	add	r3,r3,r9
    aaec:	31000115 	stw	r4,4(r6)
    aaf0:	31c00215 	stw	r7,8(r6)
    aaf4:	30800315 	stw	r2,12(r6)
    aaf8:	30c00415 	stw	r3,16(r6)
    aafc:	003fdd06 	br	aa74 <_fpadd_parts+0x14c>
    ab00:	20ffef1e 	bne	r4,r3,aac0 <_fpadd_parts+0x198>
    ab04:	31000015 	stw	r4,0(r6)
    ab08:	10c00117 	ldw	r3,4(r2)
    ab0c:	30c00115 	stw	r3,4(r6)
    ab10:	10c00217 	ldw	r3,8(r2)
    ab14:	11000117 	ldw	r4,4(r2)
    ab18:	29400117 	ldw	r5,4(r5)
    ab1c:	30c00215 	stw	r3,8(r6)
    ab20:	10c00317 	ldw	r3,12(r2)
    ab24:	2908703a 	and	r4,r5,r4
    ab28:	30c00315 	stw	r3,12(r6)
    ab2c:	10c00417 	ldw	r3,16(r2)
    ab30:	31000115 	stw	r4,4(r6)
    ab34:	3005883a 	mov	r2,r6
    ab38:	30c00415 	stw	r3,16(r6)
    ab3c:	f800283a 	ret
    ab40:	580f883a 	mov	r7,r11
    ab44:	0019883a 	mov	r12,zero
    ab48:	001b883a 	mov	r13,zero
    ab4c:	003f9f06 	br	a9cc <_fpadd_parts+0xa4>
    ab50:	0115c83a 	sub	r10,zero,r4
    ab54:	00c00fc4 	movi	r3,63
    ab58:	1abfda16 	blt	r3,r10,aac4 <_fpadd_parts+0x19c>
    ab5c:	003f8906 	br	a984 <_fpadd_parts+0x5c>
    ab60:	627fb52e 	bgeu	r12,r9,aa38 <_fpadd_parts+0x110>
    ab64:	003fc006 	br	aa68 <_fpadd_parts+0x140>
    ab68:	6205c83a 	sub	r2,r12,r8
    ab6c:	6099803a 	cmpltu	r12,r12,r2
    ab70:	6a47c83a 	sub	r3,r13,r9
    ab74:	1b07c83a 	sub	r3,r3,r12
    ab78:	183f9d0e 	bge	r3,zero,a9f0 <_fpadd_parts+0xc8>
    ab7c:	0085c83a 	sub	r2,zero,r2
    ab80:	1008c03a 	cmpne	r4,r2,zero
    ab84:	00c7c83a 	sub	r3,zero,r3
    ab88:	1907c83a 	sub	r3,r3,r4
    ab8c:	01000044 	movi	r4,1
    ab90:	31000115 	stw	r4,4(r6)
    ab94:	31c00215 	stw	r7,8(r6)
    ab98:	30800315 	stw	r2,12(r6)
    ab9c:	30c00415 	stw	r3,16(r6)
    aba0:	003f9706 	br	aa00 <_fpadd_parts+0xd8>
    aba4:	203f8926 	beq	r4,zero,a9cc <_fpadd_parts+0xa4>
    aba8:	50fff804 	addi	r3,r10,-32
    abac:	3a8f883a 	add	r7,r7,r10
    abb0:	18002316 	blt	r3,zero,ac40 <_fpadd_parts+0x318>
    abb4:	68d6d83a 	srl	r11,r13,r3
    abb8:	001d883a 	mov	r14,zero
    abbc:	18001c16 	blt	r3,zero,ac30 <_fpadd_parts+0x308>
    abc0:	01000044 	movi	r4,1
    abc4:	20c6983a 	sll	r3,r4,r3
    abc8:	0015883a 	mov	r10,zero
    abcc:	513fffc4 	addi	r4,r10,-1
    abd0:	2295403a 	cmpgeu	r10,r4,r10
    abd4:	1a87c83a 	sub	r3,r3,r10
    abd8:	1b5a703a 	and	r13,r3,r13
    abdc:	2318703a 	and	r12,r4,r12
    abe0:	6358b03a 	or	r12,r12,r13
    abe4:	6018c03a 	cmpne	r12,r12,zero
    abe8:	62d8b03a 	or	r12,r12,r11
    abec:	701b883a 	mov	r13,r14
    abf0:	003f7606 	br	a9cc <_fpadd_parts+0xa4>
    abf4:	4808907a 	slli	r4,r9,1
    abf8:	02c007c4 	movi	r11,31
    abfc:	5a97c83a 	sub	r11,r11,r10
    ac00:	22c8983a 	sll	r4,r4,r11
    ac04:	4296d83a 	srl	r11,r8,r10
    ac08:	4a9cd83a 	srl	r14,r9,r10
    ac0c:	22d6b03a 	or	r11,r4,r11
    ac10:	003f6106 	br	a998 <_fpadd_parts+0x70>
    ac14:	00c00044 	movi	r3,1
    ac18:	1a94983a 	sll	r10,r3,r10
    ac1c:	0007883a 	mov	r3,zero
    ac20:	003f6106 	br	a9a8 <_fpadd_parts+0x80>
    ac24:	013fff84 	movi	r4,-2
    ac28:	21ff7c2e 	bgeu	r4,r7,aa1c <_fpadd_parts+0xf4>
    ac2c:	003f9106 	br	aa74 <_fpadd_parts+0x14c>
    ac30:	00c00044 	movi	r3,1
    ac34:	1a94983a 	sll	r10,r3,r10
    ac38:	0007883a 	mov	r3,zero
    ac3c:	003fe306 	br	abcc <_fpadd_parts+0x2a4>
    ac40:	6816907a 	slli	r11,r13,1
    ac44:	010007c4 	movi	r4,31
    ac48:	2289c83a 	sub	r4,r4,r10
    ac4c:	5908983a 	sll	r4,r11,r4
    ac50:	6296d83a 	srl	r11,r12,r10
    ac54:	6a9cd83a 	srl	r14,r13,r10
    ac58:	22d6b03a 	or	r11,r4,r11
    ac5c:	003fd706 	br	abbc <_fpadd_parts+0x294>
    ac60:	193f971e 	bne	r3,r4,aac0 <_fpadd_parts+0x198>
    ac64:	11000117 	ldw	r4,4(r2)
    ac68:	28c00117 	ldw	r3,4(r5)
    ac6c:	20ff9426 	beq	r4,r3,aac0 <_fpadd_parts+0x198>
    ac70:	00800074 	movhi	r2,1
    ac74:	10b98104 	addi	r2,r2,-6652
    ac78:	f800283a 	ret

0000ac7c <__adddf3>:
    ac7c:	deffec04 	addi	sp,sp,-80
    ac80:	d9001115 	stw	r4,68(sp)
    ac84:	d9401215 	stw	r5,72(sp)
    ac88:	d9001104 	addi	r4,sp,68
    ac8c:	d9400a04 	addi	r5,sp,40
    ac90:	dfc01315 	stw	ra,76(sp)
    ac94:	d9c01015 	stw	r7,64(sp)
    ac98:	d9800f15 	stw	r6,60(sp)
    ac9c:	000bb240 	call	bb24 <__unpack_d>
    aca0:	d9000f04 	addi	r4,sp,60
    aca4:	d9400504 	addi	r5,sp,20
    aca8:	000bb240 	call	bb24 <__unpack_d>
    acac:	d9000a04 	addi	r4,sp,40
    acb0:	d9400504 	addi	r5,sp,20
    acb4:	d80d883a 	mov	r6,sp
    acb8:	000a9280 	call	a928 <_fpadd_parts>
    acbc:	1009883a 	mov	r4,r2
    acc0:	000b9000 	call	b900 <__pack_d>
    acc4:	dfc01317 	ldw	ra,76(sp)
    acc8:	dec01404 	addi	sp,sp,80
    accc:	f800283a 	ret

0000acd0 <__subdf3>:
    acd0:	deffec04 	addi	sp,sp,-80
    acd4:	d9001115 	stw	r4,68(sp)
    acd8:	d9401215 	stw	r5,72(sp)
    acdc:	d9001104 	addi	r4,sp,68
    ace0:	d9400a04 	addi	r5,sp,40
    ace4:	dfc01315 	stw	ra,76(sp)
    ace8:	d9c01015 	stw	r7,64(sp)
    acec:	d9800f15 	stw	r6,60(sp)
    acf0:	000bb240 	call	bb24 <__unpack_d>
    acf4:	d9000f04 	addi	r4,sp,60
    acf8:	d9400504 	addi	r5,sp,20
    acfc:	000bb240 	call	bb24 <__unpack_d>
    ad00:	d8800617 	ldw	r2,24(sp)
    ad04:	d9000a04 	addi	r4,sp,40
    ad08:	d9400504 	addi	r5,sp,20
    ad0c:	d80d883a 	mov	r6,sp
    ad10:	1080005c 	xori	r2,r2,1
    ad14:	d8800615 	stw	r2,24(sp)
    ad18:	000a9280 	call	a928 <_fpadd_parts>
    ad1c:	1009883a 	mov	r4,r2
    ad20:	000b9000 	call	b900 <__pack_d>
    ad24:	dfc01317 	ldw	ra,76(sp)
    ad28:	dec01404 	addi	sp,sp,80
    ad2c:	f800283a 	ret

0000ad30 <__muldf3>:
    ad30:	deffe404 	addi	sp,sp,-112
    ad34:	d9001115 	stw	r4,68(sp)
    ad38:	d9401215 	stw	r5,72(sp)
    ad3c:	d9001104 	addi	r4,sp,68
    ad40:	d9400a04 	addi	r5,sp,40
    ad44:	dfc01b15 	stw	ra,108(sp)
    ad48:	d9800f15 	stw	r6,60(sp)
    ad4c:	d9c01015 	stw	r7,64(sp)
    ad50:	ddc01a15 	stw	r23,104(sp)
    ad54:	dd801915 	stw	r22,100(sp)
    ad58:	dd401815 	stw	r21,96(sp)
    ad5c:	dd001715 	stw	r20,92(sp)
    ad60:	dcc01615 	stw	r19,88(sp)
    ad64:	dc801515 	stw	r18,84(sp)
    ad68:	dc401415 	stw	r17,80(sp)
    ad6c:	dc001315 	stw	r16,76(sp)
    ad70:	000bb240 	call	bb24 <__unpack_d>
    ad74:	d9000f04 	addi	r4,sp,60
    ad78:	d9400504 	addi	r5,sp,20
    ad7c:	000bb240 	call	bb24 <__unpack_d>
    ad80:	d8c00a17 	ldw	r3,40(sp)
    ad84:	00800044 	movi	r2,1
    ad88:	10c01136 	bltu	r2,r3,add0 <__muldf3+0xa0>
    ad8c:	d8c00b17 	ldw	r3,44(sp)
    ad90:	d8800617 	ldw	r2,24(sp)
    ad94:	d9000a04 	addi	r4,sp,40
    ad98:	1884c03a 	cmpne	r2,r3,r2
    ad9c:	d8800b15 	stw	r2,44(sp)
    ada0:	000b9000 	call	b900 <__pack_d>
    ada4:	dfc01b17 	ldw	ra,108(sp)
    ada8:	ddc01a17 	ldw	r23,104(sp)
    adac:	dd801917 	ldw	r22,100(sp)
    adb0:	dd401817 	ldw	r21,96(sp)
    adb4:	dd001717 	ldw	r20,92(sp)
    adb8:	dcc01617 	ldw	r19,88(sp)
    adbc:	dc801517 	ldw	r18,84(sp)
    adc0:	dc401417 	ldw	r17,80(sp)
    adc4:	dc001317 	ldw	r16,76(sp)
    adc8:	dec01c04 	addi	sp,sp,112
    adcc:	f800283a 	ret
    add0:	d9000517 	ldw	r4,20(sp)
    add4:	11000636 	bltu	r2,r4,adf0 <__muldf3+0xc0>
    add8:	d8800617 	ldw	r2,24(sp)
    addc:	d8c00b17 	ldw	r3,44(sp)
    ade0:	d9000504 	addi	r4,sp,20
    ade4:	1884c03a 	cmpne	r2,r3,r2
    ade8:	d8800615 	stw	r2,24(sp)
    adec:	003fec06 	br	ada0 <__muldf3+0x70>
    adf0:	00800104 	movi	r2,4
    adf4:	1880051e 	bne	r3,r2,ae0c <__muldf3+0xdc>
    adf8:	00800084 	movi	r2,2
    adfc:	20bfe31e 	bne	r4,r2,ad8c <__muldf3+0x5c>
    ae00:	01000074 	movhi	r4,1
    ae04:	21398104 	addi	r4,r4,-6652
    ae08:	003fe506 	br	ada0 <__muldf3+0x70>
    ae0c:	2080031e 	bne	r4,r2,ae1c <__muldf3+0xec>
    ae10:	00800084 	movi	r2,2
    ae14:	18bffa26 	beq	r3,r2,ae00 <__muldf3+0xd0>
    ae18:	003fef06 	br	add8 <__muldf3+0xa8>
    ae1c:	00800084 	movi	r2,2
    ae20:	18bfda26 	beq	r3,r2,ad8c <__muldf3+0x5c>
    ae24:	20bfec26 	beq	r4,r2,add8 <__muldf3+0xa8>
    ae28:	dc000d17 	ldw	r16,52(sp)
    ae2c:	dd000817 	ldw	r20,32(sp)
    ae30:	dc800917 	ldw	r18,36(sp)
    ae34:	8009883a 	mov	r4,r16
    ae38:	000b883a 	mov	r5,zero
    ae3c:	a00d883a 	mov	r6,r20
    ae40:	000f883a 	mov	r7,zero
    ae44:	000b5500 	call	b550 <__muldi3>
    ae48:	dc400e17 	ldw	r17,56(sp)
    ae4c:	9009883a 	mov	r4,r18
    ae50:	800d883a 	mov	r6,r16
    ae54:	000b883a 	mov	r5,zero
    ae58:	000f883a 	mov	r7,zero
    ae5c:	102f883a 	mov	r23,r2
    ae60:	1827883a 	mov	r19,r3
    ae64:	000b5500 	call	b550 <__muldi3>
    ae68:	900d883a 	mov	r6,r18
    ae6c:	8809883a 	mov	r4,r17
    ae70:	000b883a 	mov	r5,zero
    ae74:	000f883a 	mov	r7,zero
    ae78:	102b883a 	mov	r21,r2
    ae7c:	1821883a 	mov	r16,r3
    ae80:	000b5500 	call	b550 <__muldi3>
    ae84:	8809883a 	mov	r4,r17
    ae88:	000b883a 	mov	r5,zero
    ae8c:	a00d883a 	mov	r6,r20
    ae90:	000f883a 	mov	r7,zero
    ae94:	102d883a 	mov	r22,r2
    ae98:	1825883a 	mov	r18,r3
    ae9c:	000b5500 	call	b550 <__muldi3>
    aea0:	154b883a 	add	r5,r2,r21
    aea4:	2889803a 	cmpltu	r4,r5,r2
    aea8:	1c07883a 	add	r3,r3,r16
    aeac:	20c9883a 	add	r4,r4,r3
    aeb0:	24004b36 	bltu	r4,r16,afe0 <__muldf3+0x2b0>
    aeb4:	8100011e 	bne	r16,r4,aebc <__muldf3+0x18c>
    aeb8:	2d404936 	bltu	r5,r21,afe0 <__muldf3+0x2b0>
    aebc:	0011883a 	mov	r8,zero
    aec0:	0007883a 	mov	r3,zero
    aec4:	2ccb883a 	add	r5,r5,r19
    aec8:	b80d883a 	mov	r6,r23
    aecc:	2cc0012e 	bgeu	r5,r19,aed4 <__muldf3+0x1a4>
    aed0:	02000044 	movi	r8,1
    aed4:	258f883a 	add	r7,r4,r22
    aed8:	3909803a 	cmpltu	r4,r7,r4
    aedc:	da400c17 	ldw	r9,48(sp)
    aee0:	2489883a 	add	r4,r4,r18
    aee4:	d8800717 	ldw	r2,28(sp)
    aee8:	20c9883a 	add	r4,r4,r3
    aeec:	da800b17 	ldw	r10,44(sp)
    aef0:	d8c00617 	ldw	r3,24(sp)
    aef4:	3a11883a 	add	r8,r7,r8
    aef8:	4885883a 	add	r2,r9,r2
    aefc:	50c6c03a 	cmpne	r3,r10,r3
    af00:	41cf803a 	cmpltu	r7,r8,r7
    af04:	12400104 	addi	r9,r2,4
    af08:	d8c00115 	stw	r3,4(sp)
    af0c:	3909883a 	add	r4,r7,r4
    af10:	da400215 	stw	r9,8(sp)
    af14:	03480034 	movhi	r13,8192
    af18:	6b7fffc4 	addi	r13,r13,-1
    af1c:	4007883a 	mov	r3,r8
    af20:	6900102e 	bgeu	r13,r4,af64 <__muldf3+0x234>
    af24:	10800144 	addi	r2,r2,5
    af28:	180ed07a 	srli	r7,r3,1
    af2c:	18c0004c 	andi	r3,r3,1
    af30:	201097fa 	slli	r8,r4,31
    af34:	281697fa 	slli	r11,r5,31
    af38:	2008d07a 	srli	r4,r4,1
    af3c:	3014d07a 	srli	r10,r6,1
    af40:	2812d07a 	srli	r9,r5,1
    af44:	1019883a 	mov	r12,r2
    af48:	18000226 	beq	r3,zero,af54 <__muldf3+0x224>
    af4c:	5a8cb03a 	or	r6,r11,r10
    af50:	49600034 	orhi	r5,r9,32768
    af54:	41c6b03a 	or	r3,r8,r7
    af58:	10800044 	addi	r2,r2,1
    af5c:	693ff236 	bltu	r13,r4,af28 <__muldf3+0x1f8>
    af60:	db000215 	stw	r12,8(sp)
    af64:	03440034 	movhi	r13,4096
    af68:	6b7fffc4 	addi	r13,r13,-1
    af6c:	69001336 	bltu	r13,r4,afbc <__muldf3+0x28c>
    af70:	d8800217 	ldw	r2,8(sp)
    af74:	10bfffc4 	addi	r2,r2,-1
    af78:	18d3883a 	add	r9,r3,r3
    af7c:	48c7803a 	cmpltu	r3,r9,r3
    af80:	2109883a 	add	r4,r4,r4
    af84:	190f883a 	add	r7,r3,r4
    af88:	3191883a 	add	r8,r6,r6
    af8c:	4197803a 	cmpltu	r11,r8,r6
    af90:	2955883a 	add	r10,r5,r5
    af94:	1019883a 	mov	r12,r2
    af98:	4807883a 	mov	r3,r9
    af9c:	3809883a 	mov	r4,r7
    afa0:	2800010e 	bge	r5,zero,afa8 <__muldf3+0x278>
    afa4:	48c00054 	ori	r3,r9,1
    afa8:	400d883a 	mov	r6,r8
    afac:	5a8b883a 	add	r5,r11,r10
    afb0:	10bfffc4 	addi	r2,r2,-1
    afb4:	69fff02e 	bgeu	r13,r7,af78 <__muldf3+0x248>
    afb8:	db000215 	stw	r12,8(sp)
    afbc:	18803fcc 	andi	r2,r3,255
    afc0:	01c02004 	movi	r7,128
    afc4:	11c00926 	beq	r2,r7,afec <__muldf3+0x2bc>
    afc8:	008000c4 	movi	r2,3
    afcc:	d9000415 	stw	r4,16(sp)
    afd0:	d8c00315 	stw	r3,12(sp)
    afd4:	d8800015 	stw	r2,0(sp)
    afd8:	d809883a 	mov	r4,sp
    afdc:	003f7006 	br	ada0 <__muldf3+0x70>
    afe0:	0011883a 	mov	r8,zero
    afe4:	00c00044 	movi	r3,1
    afe8:	003fb606 	br	aec4 <__muldf3+0x194>
    afec:	19c0400c 	andi	r7,r3,256
    aff0:	383ff51e 	bne	r7,zero,afc8 <__muldf3+0x298>
    aff4:	314ab03a 	or	r5,r6,r5
    aff8:	283ff326 	beq	r5,zero,afc8 <__muldf3+0x298>
    affc:	1885883a 	add	r2,r3,r2
    b000:	10cb803a 	cmpltu	r5,r2,r3
    b004:	00ffc004 	movi	r3,-256
    b008:	10c6703a 	and	r3,r2,r3
    b00c:	2909883a 	add	r4,r5,r4
    b010:	003fed06 	br	afc8 <__muldf3+0x298>

0000b014 <__divdf3>:
    b014:	defff104 	addi	sp,sp,-60
    b018:	d9000c15 	stw	r4,48(sp)
    b01c:	d9400d15 	stw	r5,52(sp)
    b020:	d9000c04 	addi	r4,sp,48
    b024:	d9400504 	addi	r5,sp,20
    b028:	dfc00e15 	stw	ra,56(sp)
    b02c:	d9800a15 	stw	r6,40(sp)
    b030:	d9c00b15 	stw	r7,44(sp)
    b034:	000bb240 	call	bb24 <__unpack_d>
    b038:	d9000a04 	addi	r4,sp,40
    b03c:	d80b883a 	mov	r5,sp
    b040:	000bb240 	call	bb24 <__unpack_d>
    b044:	d8c00517 	ldw	r3,20(sp)
    b048:	00800044 	movi	r2,1
    b04c:	10c00536 	bltu	r2,r3,b064 <__divdf3+0x50>
    b050:	d9000504 	addi	r4,sp,20
    b054:	000b9000 	call	b900 <__pack_d>
    b058:	dfc00e17 	ldw	ra,56(sp)
    b05c:	dec00f04 	addi	sp,sp,60
    b060:	f800283a 	ret
    b064:	d9000017 	ldw	r4,0(sp)
    b068:	11000536 	bltu	r2,r4,b080 <__divdf3+0x6c>
    b06c:	d809883a 	mov	r4,sp
    b070:	000b9000 	call	b900 <__pack_d>
    b074:	dfc00e17 	ldw	ra,56(sp)
    b078:	dec00f04 	addi	sp,sp,60
    b07c:	f800283a 	ret
    b080:	d9800617 	ldw	r6,24(sp)
    b084:	d9400117 	ldw	r5,4(sp)
    b088:	00800104 	movi	r2,4
    b08c:	314af03a 	xor	r5,r6,r5
    b090:	d9400615 	stw	r5,24(sp)
    b094:	18800226 	beq	r3,r2,b0a0 <__divdf3+0x8c>
    b098:	01400084 	movi	r5,2
    b09c:	1940041e 	bne	r3,r5,b0b0 <__divdf3+0x9c>
    b0a0:	193feb1e 	bne	r3,r4,b050 <__divdf3+0x3c>
    b0a4:	01000074 	movhi	r4,1
    b0a8:	21398104 	addi	r4,r4,-6652
    b0ac:	003fe906 	br	b054 <__divdf3+0x40>
    b0b0:	20803326 	beq	r4,r2,b180 <__divdf3+0x16c>
    b0b4:	21403726 	beq	r4,r5,b194 <__divdf3+0x180>
    b0b8:	d8800217 	ldw	r2,8(sp)
    b0bc:	d9000717 	ldw	r4,28(sp)
    b0c0:	d8c00917 	ldw	r3,36(sp)
    b0c4:	da000417 	ldw	r8,16(sp)
    b0c8:	2089c83a 	sub	r4,r4,r2
    b0cc:	d9000715 	stw	r4,28(sp)
    b0d0:	d8800817 	ldw	r2,32(sp)
    b0d4:	dbc00317 	ldw	r15,12(sp)
    b0d8:	1a000236 	bltu	r3,r8,b0e4 <__divdf3+0xd0>
    b0dc:	40c0081e 	bne	r8,r3,b100 <__divdf3+0xec>
    b0e0:	13c0072e 	bgeu	r2,r15,b100 <__divdf3+0xec>
    b0e4:	108b883a 	add	r5,r2,r2
    b0e8:	288d803a 	cmpltu	r6,r5,r2
    b0ec:	18c7883a 	add	r3,r3,r3
    b0f0:	213fffc4 	addi	r4,r4,-1
    b0f4:	2805883a 	mov	r2,r5
    b0f8:	30c7883a 	add	r3,r6,r3
    b0fc:	d9000715 	stw	r4,28(sp)
    b100:	01400f44 	movi	r5,61
    b104:	000f883a 	mov	r7,zero
    b108:	01040034 	movhi	r4,4096
    b10c:	0019883a 	mov	r12,zero
    b110:	001b883a 	mov	r13,zero
    b114:	201697fa 	slli	r11,r4,31
    b118:	3814d07a 	srli	r10,r7,1
    b11c:	297fffc4 	addi	r5,r5,-1
    b120:	1a000936 	bltu	r3,r8,b148 <__divdf3+0x134>
    b124:	13cdc83a 	sub	r6,r2,r15
    b128:	1193803a 	cmpltu	r9,r2,r6
    b12c:	1a1dc83a 	sub	r14,r3,r8
    b130:	40c0011e 	bne	r8,r3,b138 <__divdf3+0x124>
    b134:	13c00436 	bltu	r2,r15,b148 <__divdf3+0x134>
    b138:	3005883a 	mov	r2,r6
    b13c:	7247c83a 	sub	r3,r14,r9
    b140:	61d8b03a 	or	r12,r12,r7
    b144:	691ab03a 	or	r13,r13,r4
    b148:	108d883a 	add	r6,r2,r2
    b14c:	3093803a 	cmpltu	r9,r6,r2
    b150:	18c7883a 	add	r3,r3,r3
    b154:	5a8eb03a 	or	r7,r11,r10
    b158:	2008d07a 	srli	r4,r4,1
    b15c:	3005883a 	mov	r2,r6
    b160:	48c7883a 	add	r3,r9,r3
    b164:	283feb1e 	bne	r5,zero,b114 <__divdf3+0x100>
    b168:	61003fcc 	andi	r4,r12,255
    b16c:	01402004 	movi	r5,128
    b170:	21400b26 	beq	r4,r5,b1a0 <__divdf3+0x18c>
    b174:	db000815 	stw	r12,32(sp)
    b178:	db400915 	stw	r13,36(sp)
    b17c:	003fb406 	br	b050 <__divdf3+0x3c>
    b180:	d8000815 	stw	zero,32(sp)
    b184:	d8000915 	stw	zero,36(sp)
    b188:	d8000715 	stw	zero,28(sp)
    b18c:	d9000504 	addi	r4,sp,20
    b190:	003fb006 	br	b054 <__divdf3+0x40>
    b194:	d8800515 	stw	r2,20(sp)
    b198:	d9000504 	addi	r4,sp,20
    b19c:	003fad06 	br	b054 <__divdf3+0x40>
    b1a0:	6140400c 	andi	r5,r12,256
    b1a4:	283ff31e 	bne	r5,zero,b174 <__divdf3+0x160>
    b1a8:	30c4b03a 	or	r2,r6,r3
    b1ac:	103ff126 	beq	r2,zero,b174 <__divdf3+0x160>
    b1b0:	6109883a 	add	r4,r12,r4
    b1b4:	2305803a 	cmpltu	r2,r4,r12
    b1b8:	033fc004 	movi	r12,-256
    b1bc:	2318703a 	and	r12,r4,r12
    b1c0:	135b883a 	add	r13,r2,r13
    b1c4:	003feb06 	br	b174 <__divdf3+0x160>

0000b1c8 <__gtdf2>:
    b1c8:	defff104 	addi	sp,sp,-60
    b1cc:	d9000c15 	stw	r4,48(sp)
    b1d0:	d9400d15 	stw	r5,52(sp)
    b1d4:	d9000c04 	addi	r4,sp,48
    b1d8:	d9400504 	addi	r5,sp,20
    b1dc:	dfc00e15 	stw	ra,56(sp)
    b1e0:	d9800a15 	stw	r6,40(sp)
    b1e4:	d9c00b15 	stw	r7,44(sp)
    b1e8:	000bb240 	call	bb24 <__unpack_d>
    b1ec:	d9000a04 	addi	r4,sp,40
    b1f0:	d80b883a 	mov	r5,sp
    b1f4:	000bb240 	call	bb24 <__unpack_d>
    b1f8:	d8c00517 	ldw	r3,20(sp)
    b1fc:	00800044 	movi	r2,1
    b200:	10c0082e 	bgeu	r2,r3,b224 <__gtdf2+0x5c>
    b204:	d8c00017 	ldw	r3,0(sp)
    b208:	10c0062e 	bgeu	r2,r3,b224 <__gtdf2+0x5c>
    b20c:	d9000504 	addi	r4,sp,20
    b210:	d80b883a 	mov	r5,sp
    b214:	000bc280 	call	bc28 <__fpcmp_parts_d>
    b218:	dfc00e17 	ldw	ra,56(sp)
    b21c:	dec00f04 	addi	sp,sp,60
    b220:	f800283a 	ret
    b224:	00bfffc4 	movi	r2,-1
    b228:	003ffb06 	br	b218 <__gtdf2+0x50>

0000b22c <__gedf2>:
    b22c:	defff104 	addi	sp,sp,-60
    b230:	d9000c15 	stw	r4,48(sp)
    b234:	d9400d15 	stw	r5,52(sp)
    b238:	d9000c04 	addi	r4,sp,48
    b23c:	d9400504 	addi	r5,sp,20
    b240:	dfc00e15 	stw	ra,56(sp)
    b244:	d9800a15 	stw	r6,40(sp)
    b248:	d9c00b15 	stw	r7,44(sp)
    b24c:	000bb240 	call	bb24 <__unpack_d>
    b250:	d9000a04 	addi	r4,sp,40
    b254:	d80b883a 	mov	r5,sp
    b258:	000bb240 	call	bb24 <__unpack_d>
    b25c:	d8c00517 	ldw	r3,20(sp)
    b260:	00800044 	movi	r2,1
    b264:	10c0082e 	bgeu	r2,r3,b288 <__gedf2+0x5c>
    b268:	d8c00017 	ldw	r3,0(sp)
    b26c:	10c0062e 	bgeu	r2,r3,b288 <__gedf2+0x5c>
    b270:	d9000504 	addi	r4,sp,20
    b274:	d80b883a 	mov	r5,sp
    b278:	000bc280 	call	bc28 <__fpcmp_parts_d>
    b27c:	dfc00e17 	ldw	ra,56(sp)
    b280:	dec00f04 	addi	sp,sp,60
    b284:	f800283a 	ret
    b288:	00bfffc4 	movi	r2,-1
    b28c:	003ffb06 	br	b27c <__gedf2+0x50>

0000b290 <__ltdf2>:
    b290:	defff104 	addi	sp,sp,-60
    b294:	d9000c15 	stw	r4,48(sp)
    b298:	d9400d15 	stw	r5,52(sp)
    b29c:	d9000c04 	addi	r4,sp,48
    b2a0:	d9400504 	addi	r5,sp,20
    b2a4:	dfc00e15 	stw	ra,56(sp)
    b2a8:	d9800a15 	stw	r6,40(sp)
    b2ac:	d9c00b15 	stw	r7,44(sp)
    b2b0:	000bb240 	call	bb24 <__unpack_d>
    b2b4:	d9000a04 	addi	r4,sp,40
    b2b8:	d80b883a 	mov	r5,sp
    b2bc:	000bb240 	call	bb24 <__unpack_d>
    b2c0:	d8c00517 	ldw	r3,20(sp)
    b2c4:	00800044 	movi	r2,1
    b2c8:	10c0052e 	bgeu	r2,r3,b2e0 <__ltdf2+0x50>
    b2cc:	d8c00017 	ldw	r3,0(sp)
    b2d0:	10c0032e 	bgeu	r2,r3,b2e0 <__ltdf2+0x50>
    b2d4:	d9000504 	addi	r4,sp,20
    b2d8:	d80b883a 	mov	r5,sp
    b2dc:	000bc280 	call	bc28 <__fpcmp_parts_d>
    b2e0:	dfc00e17 	ldw	ra,56(sp)
    b2e4:	dec00f04 	addi	sp,sp,60
    b2e8:	f800283a 	ret

0000b2ec <__ledf2>:
    b2ec:	defff104 	addi	sp,sp,-60
    b2f0:	d9000c15 	stw	r4,48(sp)
    b2f4:	d9400d15 	stw	r5,52(sp)
    b2f8:	d9000c04 	addi	r4,sp,48
    b2fc:	d9400504 	addi	r5,sp,20
    b300:	dfc00e15 	stw	ra,56(sp)
    b304:	d9800a15 	stw	r6,40(sp)
    b308:	d9c00b15 	stw	r7,44(sp)
    b30c:	000bb240 	call	bb24 <__unpack_d>
    b310:	d9000a04 	addi	r4,sp,40
    b314:	d80b883a 	mov	r5,sp
    b318:	000bb240 	call	bb24 <__unpack_d>
    b31c:	d8c00517 	ldw	r3,20(sp)
    b320:	00800044 	movi	r2,1
    b324:	10c0052e 	bgeu	r2,r3,b33c <__ledf2+0x50>
    b328:	d8c00017 	ldw	r3,0(sp)
    b32c:	10c0032e 	bgeu	r2,r3,b33c <__ledf2+0x50>
    b330:	d9000504 	addi	r4,sp,20
    b334:	d80b883a 	mov	r5,sp
    b338:	000bc280 	call	bc28 <__fpcmp_parts_d>
    b33c:	dfc00e17 	ldw	ra,56(sp)
    b340:	dec00f04 	addi	sp,sp,60
    b344:	f800283a 	ret

0000b348 <__floatsidf>:
    b348:	2004d7fa 	srli	r2,r4,31
    b34c:	defff904 	addi	sp,sp,-28
    b350:	00c000c4 	movi	r3,3
    b354:	dfc00615 	stw	ra,24(sp)
    b358:	dc000515 	stw	r16,20(sp)
    b35c:	d8c00015 	stw	r3,0(sp)
    b360:	d8800115 	stw	r2,4(sp)
    b364:	2000081e 	bne	r4,zero,b388 <__floatsidf+0x40>
    b368:	00800084 	movi	r2,2
    b36c:	d8800015 	stw	r2,0(sp)
    b370:	d809883a 	mov	r4,sp
    b374:	000b9000 	call	b900 <__pack_d>
    b378:	dfc00617 	ldw	ra,24(sp)
    b37c:	dc000517 	ldw	r16,20(sp)
    b380:	dec00704 	addi	sp,sp,28
    b384:	f800283a 	ret
    b388:	00c00f04 	movi	r3,60
    b38c:	d8c00215 	stw	r3,8(sp)
    b390:	10000f1e 	bne	r2,zero,b3d0 <__floatsidf+0x88>
    b394:	2021883a 	mov	r16,r4
    b398:	8009883a 	mov	r4,r16
    b39c:	000b6600 	call	b660 <__clzsi2>
    b3a0:	11000744 	addi	r4,r2,29
    b3a4:	0100110e 	bge	zero,r4,b3ec <__floatsidf+0xa4>
    b3a8:	10ffff44 	addi	r3,r2,-3
    b3ac:	18001216 	blt	r3,zero,b3f8 <__floatsidf+0xb0>
    b3b0:	80c6983a 	sll	r3,r16,r3
    b3b4:	0009883a 	mov	r4,zero
    b3b8:	014007c4 	movi	r5,31
    b3bc:	2885c83a 	sub	r2,r5,r2
    b3c0:	d9000315 	stw	r4,12(sp)
    b3c4:	d8c00415 	stw	r3,16(sp)
    b3c8:	d8800215 	stw	r2,8(sp)
    b3cc:	003fe806 	br	b370 <__floatsidf+0x28>
    b3d0:	00a00034 	movhi	r2,32768
    b3d4:	20800e26 	beq	r4,r2,b410 <__floatsidf+0xc8>
    b3d8:	0121c83a 	sub	r16,zero,r4
    b3dc:	8009883a 	mov	r4,r16
    b3e0:	000b6600 	call	b660 <__clzsi2>
    b3e4:	11000744 	addi	r4,r2,29
    b3e8:	013fef16 	blt	zero,r4,b3a8 <__floatsidf+0x60>
    b3ec:	dc000315 	stw	r16,12(sp)
    b3f0:	d8000415 	stw	zero,16(sp)
    b3f4:	003fde06 	br	b370 <__floatsidf+0x28>
    b3f8:	800ad07a 	srli	r5,r16,1
    b3fc:	00c007c4 	movi	r3,31
    b400:	1907c83a 	sub	r3,r3,r4
    b404:	28c6d83a 	srl	r3,r5,r3
    b408:	8108983a 	sll	r4,r16,r4
    b40c:	003fea06 	br	b3b8 <__floatsidf+0x70>
    b410:	0005883a 	mov	r2,zero
    b414:	00f07834 	movhi	r3,49632
    b418:	003fd706 	br	b378 <__floatsidf+0x30>

0000b41c <__fixdfsi>:
    b41c:	defff804 	addi	sp,sp,-32
    b420:	d9000515 	stw	r4,20(sp)
    b424:	d9400615 	stw	r5,24(sp)
    b428:	d9000504 	addi	r4,sp,20
    b42c:	d80b883a 	mov	r5,sp
    b430:	dfc00715 	stw	ra,28(sp)
    b434:	000bb240 	call	bb24 <__unpack_d>
    b438:	d8800017 	ldw	r2,0(sp)
    b43c:	00c00084 	movi	r3,2
    b440:	10c01c26 	beq	r2,r3,b4b4 <__fixdfsi+0x98>
    b444:	00c00044 	movi	r3,1
    b448:	18801a2e 	bgeu	r3,r2,b4b4 <__fixdfsi+0x98>
    b44c:	00c00104 	movi	r3,4
    b450:	10c01126 	beq	r2,r3,b498 <__fixdfsi+0x7c>
    b454:	d8800217 	ldw	r2,8(sp)
    b458:	10001616 	blt	r2,zero,b4b4 <__fixdfsi+0x98>
    b45c:	00c00784 	movi	r3,30
    b460:	18800d16 	blt	r3,r2,b498 <__fixdfsi+0x7c>
    b464:	00c00f04 	movi	r3,60
    b468:	1885c83a 	sub	r2,r3,r2
    b46c:	10fff804 	addi	r3,r2,-32
    b470:	d9400317 	ldw	r5,12(sp)
    b474:	d9000417 	ldw	r4,16(sp)
    b478:	18001616 	blt	r3,zero,b4d4 <__fixdfsi+0xb8>
    b47c:	20c4d83a 	srl	r2,r4,r3
    b480:	d8c00117 	ldw	r3,4(sp)
    b484:	18000126 	beq	r3,zero,b48c <__fixdfsi+0x70>
    b488:	0085c83a 	sub	r2,zero,r2
    b48c:	dfc00717 	ldw	ra,28(sp)
    b490:	dec00804 	addi	sp,sp,32
    b494:	f800283a 	ret
    b498:	d8800117 	ldw	r2,4(sp)
    b49c:	1000091e 	bne	r2,zero,b4c4 <__fixdfsi+0xa8>
    b4a0:	00a00034 	movhi	r2,32768
    b4a4:	10bfffc4 	addi	r2,r2,-1
    b4a8:	dfc00717 	ldw	ra,28(sp)
    b4ac:	dec00804 	addi	sp,sp,32
    b4b0:	f800283a 	ret
    b4b4:	0005883a 	mov	r2,zero
    b4b8:	dfc00717 	ldw	ra,28(sp)
    b4bc:	dec00804 	addi	sp,sp,32
    b4c0:	f800283a 	ret
    b4c4:	00a00034 	movhi	r2,32768
    b4c8:	dfc00717 	ldw	ra,28(sp)
    b4cc:	dec00804 	addi	sp,sp,32
    b4d0:	f800283a 	ret
    b4d4:	2008907a 	slli	r4,r4,1
    b4d8:	018007c4 	movi	r6,31
    b4dc:	308dc83a 	sub	r6,r6,r2
    b4e0:	2188983a 	sll	r4,r4,r6
    b4e4:	2884d83a 	srl	r2,r5,r2
    b4e8:	2084b03a 	or	r2,r4,r2
    b4ec:	003fe406 	br	b480 <__fixdfsi+0x64>

0000b4f0 <__make_dp>:
    b4f0:	defff904 	addi	sp,sp,-28
    b4f4:	d8800717 	ldw	r2,28(sp)
    b4f8:	d9000015 	stw	r4,0(sp)
    b4fc:	d809883a 	mov	r4,sp
    b500:	dfc00515 	stw	ra,20(sp)
    b504:	d9c00615 	stw	r7,24(sp)
    b508:	d9400115 	stw	r5,4(sp)
    b50c:	d9800215 	stw	r6,8(sp)
    b510:	d9c00315 	stw	r7,12(sp)
    b514:	d8800415 	stw	r2,16(sp)
    b518:	000b9000 	call	b900 <__pack_d>
    b51c:	dfc00517 	ldw	ra,20(sp)
    b520:	dec00704 	addi	sp,sp,28
    b524:	f800283a 	ret

0000b528 <__mulsi3>:
    b528:	0005883a 	mov	r2,zero
    b52c:	20000726 	beq	r4,zero,b54c <__mulsi3+0x24>
    b530:	20c0004c 	andi	r3,r4,1
    b534:	2008d07a 	srli	r4,r4,1
    b538:	18000126 	beq	r3,zero,b540 <__mulsi3+0x18>
    b53c:	1145883a 	add	r2,r2,r5
    b540:	294b883a 	add	r5,r5,r5
    b544:	203ffa1e 	bne	r4,zero,b530 <__mulsi3+0x8>
    b548:	f800283a 	ret
    b54c:	f800283a 	ret

0000b550 <__muldi3>:
    b550:	defff604 	addi	sp,sp,-40
    b554:	dd400515 	stw	r21,20(sp)
    b558:	dd000415 	stw	r20,16(sp)
    b55c:	257fffcc 	andi	r21,r4,65535
    b560:	353fffcc 	andi	r20,r6,65535
    b564:	dcc00315 	stw	r19,12(sp)
    b568:	3026d43a 	srli	r19,r6,16
    b56c:	dd800615 	stw	r22,24(sp)
    b570:	dc800215 	stw	r18,8(sp)
    b574:	dc400115 	stw	r17,4(sp)
    b578:	2024d43a 	srli	r18,r4,16
    b57c:	2023883a 	mov	r17,r4
    b580:	282d883a 	mov	r22,r5
    b584:	a009883a 	mov	r4,r20
    b588:	a80b883a 	mov	r5,r21
    b58c:	dfc00915 	stw	ra,36(sp)
    b590:	df000815 	stw	fp,32(sp)
    b594:	ddc00715 	stw	r23,28(sp)
    b598:	3839883a 	mov	fp,r7
    b59c:	dc000015 	stw	r16,0(sp)
    b5a0:	3021883a 	mov	r16,r6
    b5a4:	000b5280 	call	b528 <__mulsi3>
    b5a8:	a80b883a 	mov	r5,r21
    b5ac:	9809883a 	mov	r4,r19
    b5b0:	102f883a 	mov	r23,r2
    b5b4:	000b5280 	call	b528 <__mulsi3>
    b5b8:	a009883a 	mov	r4,r20
    b5bc:	900b883a 	mov	r5,r18
    b5c0:	102b883a 	mov	r21,r2
    b5c4:	000b5280 	call	b528 <__mulsi3>
    b5c8:	9809883a 	mov	r4,r19
    b5cc:	900b883a 	mov	r5,r18
    b5d0:	1029883a 	mov	r20,r2
    b5d4:	000b5280 	call	b528 <__mulsi3>
    b5d8:	1007883a 	mov	r3,r2
    b5dc:	b804d43a 	srli	r2,r23,16
    b5e0:	a549883a 	add	r4,r20,r21
    b5e4:	2089883a 	add	r4,r4,r2
    b5e8:	2500022e 	bgeu	r4,r20,b5f4 <__muldi3+0xa4>
    b5ec:	00800074 	movhi	r2,1
    b5f0:	1887883a 	add	r3,r3,r2
    b5f4:	200cd43a 	srli	r6,r4,16
    b5f8:	2004943a 	slli	r2,r4,16
    b5fc:	e00b883a 	mov	r5,fp
    b600:	8809883a 	mov	r4,r17
    b604:	bdffffcc 	andi	r23,r23,65535
    b608:	19a3883a 	add	r17,r3,r6
    b60c:	15ef883a 	add	r23,r2,r23
    b610:	000b5280 	call	b528 <__mulsi3>
    b614:	8009883a 	mov	r4,r16
    b618:	b00b883a 	mov	r5,r22
    b61c:	1025883a 	mov	r18,r2
    b620:	000b5280 	call	b528 <__mulsi3>
    b624:	9085883a 	add	r2,r18,r2
    b628:	1447883a 	add	r3,r2,r17
    b62c:	b805883a 	mov	r2,r23
    b630:	dfc00917 	ldw	ra,36(sp)
    b634:	df000817 	ldw	fp,32(sp)
    b638:	ddc00717 	ldw	r23,28(sp)
    b63c:	dd800617 	ldw	r22,24(sp)
    b640:	dd400517 	ldw	r21,20(sp)
    b644:	dd000417 	ldw	r20,16(sp)
    b648:	dcc00317 	ldw	r19,12(sp)
    b64c:	dc800217 	ldw	r18,8(sp)
    b650:	dc400117 	ldw	r17,4(sp)
    b654:	dc000017 	ldw	r16,0(sp)
    b658:	dec00a04 	addi	sp,sp,40
    b65c:	f800283a 	ret

0000b660 <__clzsi2>:
    b660:	00bfffd4 	movui	r2,65535
    b664:	11000b36 	bltu	r2,r4,b694 <__clzsi2+0x34>
    b668:	00803fc4 	movi	r2,255
    b66c:	11001e2e 	bgeu	r2,r4,b6e8 <__clzsi2+0x88>
    b670:	00c00204 	movi	r3,8
    b674:	20c8d83a 	srl	r4,r4,r3
    b678:	00c00074 	movhi	r3,1
    b67c:	18f98604 	addi	r3,r3,-6632
    b680:	00800604 	movi	r2,24
    b684:	1909883a 	add	r4,r3,r4
    b688:	20c00003 	ldbu	r3,0(r4)
    b68c:	10c5c83a 	sub	r2,r2,r3
    b690:	f800283a 	ret
    b694:	00804034 	movhi	r2,256
    b698:	10bfffc4 	addi	r2,r2,-1
    b69c:	11000936 	bltu	r2,r4,b6c4 <__clzsi2+0x64>
    b6a0:	00800404 	movi	r2,16
    b6a4:	1007883a 	mov	r3,r2
    b6a8:	20c8d83a 	srl	r4,r4,r3
    b6ac:	00c00074 	movhi	r3,1
    b6b0:	18f98604 	addi	r3,r3,-6632
    b6b4:	1909883a 	add	r4,r3,r4
    b6b8:	20c00003 	ldbu	r3,0(r4)
    b6bc:	10c5c83a 	sub	r2,r2,r3
    b6c0:	f800283a 	ret
    b6c4:	00c00604 	movi	r3,24
    b6c8:	20c8d83a 	srl	r4,r4,r3
    b6cc:	00c00074 	movhi	r3,1
    b6d0:	18f98604 	addi	r3,r3,-6632
    b6d4:	00800204 	movi	r2,8
    b6d8:	1909883a 	add	r4,r3,r4
    b6dc:	20c00003 	ldbu	r3,0(r4)
    b6e0:	10c5c83a 	sub	r2,r2,r3
    b6e4:	f800283a 	ret
    b6e8:	0007883a 	mov	r3,zero
    b6ec:	20c8d83a 	srl	r4,r4,r3
    b6f0:	00c00074 	movhi	r3,1
    b6f4:	18f98604 	addi	r3,r3,-6632
    b6f8:	00800804 	movi	r2,32
    b6fc:	1909883a 	add	r4,r3,r4
    b700:	20c00003 	ldbu	r3,0(r4)
    b704:	10c5c83a 	sub	r2,r2,r3
    b708:	f800283a 	ret

0000b70c <__pack_f>:
    b70c:	21400017 	ldw	r5,0(r4)
    b710:	01800044 	movi	r6,1
    b714:	20c00317 	ldw	r3,12(r4)
    b718:	21c00117 	ldw	r7,4(r4)
    b71c:	3140282e 	bgeu	r6,r5,b7c0 <__pack_f+0xb4>
    b720:	00800104 	movi	r2,4
    b724:	28802326 	beq	r5,r2,b7b4 <__pack_f+0xa8>
    b728:	00800084 	movi	r2,2
    b72c:	28800f26 	beq	r5,r2,b76c <__pack_f+0x60>
    b730:	18000e26 	beq	r3,zero,b76c <__pack_f+0x60>
    b734:	21000217 	ldw	r4,8(r4)
    b738:	00bfe084 	movi	r2,-126
    b73c:	20802616 	blt	r4,r2,b7d8 <__pack_f+0xcc>
    b740:	00801fc4 	movi	r2,127
    b744:	11001b16 	blt	r2,r4,b7b4 <__pack_f+0xa8>
    b748:	188a703a 	and	r5,r3,r2
    b74c:	00801004 	movi	r2,64
    b750:	28801126 	beq	r5,r2,b798 <__pack_f+0x8c>
    b754:	18c00fc4 	addi	r3,r3,63
    b758:	18001316 	blt	r3,zero,b7a8 <__pack_f+0x9c>
    b75c:	21001fc4 	addi	r4,r4,127
    b760:	180690ba 	slli	r3,r3,2
    b764:	1806d27a 	srli	r3,r3,9
    b768:	00000206 	br	b774 <__pack_f+0x68>
    b76c:	0009883a 	mov	r4,zero
    b770:	0007883a 	mov	r3,zero
    b774:	21003fcc 	andi	r4,r4,255
    b778:	200895fa 	slli	r4,r4,23
    b77c:	380a97fa 	slli	r5,r7,31
    b780:	00802034 	movhi	r2,128
    b784:	10bfffc4 	addi	r2,r2,-1
    b788:	1886703a 	and	r3,r3,r2
    b78c:	1904b03a 	or	r2,r3,r4
    b790:	1144b03a 	or	r2,r2,r5
    b794:	f800283a 	ret
    b798:	1880200c 	andi	r2,r3,128
    b79c:	103fee26 	beq	r2,zero,b758 <__pack_f+0x4c>
    b7a0:	18c01004 	addi	r3,r3,64
    b7a4:	183fed0e 	bge	r3,zero,b75c <__pack_f+0x50>
    b7a8:	1806d07a 	srli	r3,r3,1
    b7ac:	21002004 	addi	r4,r4,128
    b7b0:	003feb06 	br	b760 <__pack_f+0x54>
    b7b4:	013fffc4 	movi	r4,-1
    b7b8:	0007883a 	mov	r3,zero
    b7bc:	003fed06 	br	b774 <__pack_f+0x68>
    b7c0:	18c00434 	orhi	r3,r3,16
    b7c4:	00802034 	movhi	r2,128
    b7c8:	10bfffc4 	addi	r2,r2,-1
    b7cc:	1886703a 	and	r3,r3,r2
    b7d0:	013fffc4 	movi	r4,-1
    b7d4:	003fe706 	br	b774 <__pack_f+0x68>
    b7d8:	1105c83a 	sub	r2,r2,r4
    b7dc:	01000644 	movi	r4,25
    b7e0:	20801216 	blt	r4,r2,b82c <__pack_f+0x120>
    b7e4:	3088983a 	sll	r4,r6,r2
    b7e8:	1884d83a 	srl	r2,r3,r2
    b7ec:	213fffc4 	addi	r4,r4,-1
    b7f0:	20c6703a 	and	r3,r4,r3
    b7f4:	1806c03a 	cmpne	r3,r3,zero
    b7f8:	1884b03a 	or	r2,r3,r2
    b7fc:	11001fcc 	andi	r4,r2,127
    b800:	00c01004 	movi	r3,64
    b804:	20c00a1e 	bne	r4,r3,b830 <__pack_f+0x124>
    b808:	10c0200c 	andi	r3,r2,128
    b80c:	18000126 	beq	r3,zero,b814 <__pack_f+0x108>
    b810:	10801004 	addi	r2,r2,64
    b814:	100690ba 	slli	r3,r2,2
    b818:	01100034 	movhi	r4,16384
    b81c:	1105403a 	cmpgeu	r2,r2,r4
    b820:	1806d27a 	srli	r3,r3,9
    b824:	1009883a 	mov	r4,r2
    b828:	003fd206 	br	b774 <__pack_f+0x68>
    b82c:	0005883a 	mov	r2,zero
    b830:	10800fc4 	addi	r2,r2,63
    b834:	003ff706 	br	b814 <__pack_f+0x108>

0000b838 <__unpack_f>:
    b838:	20c00017 	ldw	r3,0(r4)
    b83c:	00802034 	movhi	r2,128
    b840:	10bfffc4 	addi	r2,r2,-1
    b844:	1808d5fa 	srli	r4,r3,23
    b848:	180cd7fa 	srli	r6,r3,31
    b84c:	1884703a 	and	r2,r3,r2
    b850:	21003fcc 	andi	r4,r4,255
    b854:	29800115 	stw	r6,4(r5)
    b858:	2000111e 	bne	r4,zero,b8a0 <__unpack_f+0x68>
    b85c:	10001a26 	beq	r2,zero,b8c8 <__unpack_f+0x90>
    b860:	00ffe084 	movi	r3,-126
    b864:	100491fa 	slli	r2,r2,7
    b868:	28c00215 	stw	r3,8(r5)
    b86c:	00c000c4 	movi	r3,3
    b870:	28c00015 	stw	r3,0(r5)
    b874:	01900034 	movhi	r6,16384
    b878:	31bfffc4 	addi	r6,r6,-1
    b87c:	30801036 	bltu	r6,r2,b8c0 <__unpack_f+0x88>
    b880:	00ffe044 	movi	r3,-127
    b884:	1085883a 	add	r2,r2,r2
    b888:	1809883a 	mov	r4,r3
    b88c:	18ffffc4 	addi	r3,r3,-1
    b890:	30bffc2e 	bgeu	r6,r2,b884 <__unpack_f+0x4c>
    b894:	29000215 	stw	r4,8(r5)
    b898:	28800315 	stw	r2,12(r5)
    b89c:	f800283a 	ret
    b8a0:	01803fc4 	movi	r6,255
    b8a4:	21800b26 	beq	r4,r6,b8d4 <__unpack_f+0x9c>
    b8a8:	100491fa 	slli	r2,r2,7
    b8ac:	213fe044 	addi	r4,r4,-127
    b8b0:	00c000c4 	movi	r3,3
    b8b4:	10900034 	orhi	r2,r2,16384
    b8b8:	29000215 	stw	r4,8(r5)
    b8bc:	28c00015 	stw	r3,0(r5)
    b8c0:	28800315 	stw	r2,12(r5)
    b8c4:	f800283a 	ret
    b8c8:	00800084 	movi	r2,2
    b8cc:	28800015 	stw	r2,0(r5)
    b8d0:	f800283a 	ret
    b8d4:	10000526 	beq	r2,zero,b8ec <__unpack_f+0xb4>
    b8d8:	18c0042c 	andhi	r3,r3,16
    b8dc:	18000626 	beq	r3,zero,b8f8 <__unpack_f+0xc0>
    b8e0:	00c00044 	movi	r3,1
    b8e4:	28c00015 	stw	r3,0(r5)
    b8e8:	003ff506 	br	b8c0 <__unpack_f+0x88>
    b8ec:	00800104 	movi	r2,4
    b8f0:	28800015 	stw	r2,0(r5)
    b8f4:	f800283a 	ret
    b8f8:	28000015 	stw	zero,0(r5)
    b8fc:	003ff006 	br	b8c0 <__unpack_f+0x88>

0000b900 <__pack_d>:
    b900:	20800017 	ldw	r2,0(r4)
    b904:	defff804 	addi	sp,sp,-32
    b908:	dcc00315 	stw	r19,12(sp)
    b90c:	dc800215 	stw	r18,8(sp)
    b910:	dfc00715 	stw	ra,28(sp)
    b914:	dd800615 	stw	r22,24(sp)
    b918:	dd400515 	stw	r21,20(sp)
    b91c:	dd000415 	stw	r20,16(sp)
    b920:	dc400115 	stw	r17,4(sp)
    b924:	dc000015 	stw	r16,0(sp)
    b928:	04800044 	movi	r18,1
    b92c:	24400317 	ldw	r17,12(r4)
    b930:	24000417 	ldw	r16,16(r4)
    b934:	24c00117 	ldw	r19,4(r4)
    b938:	9080422e 	bgeu	r18,r2,ba44 <__pack_d+0x144>
    b93c:	00c00104 	movi	r3,4
    b940:	10c03c26 	beq	r2,r3,ba34 <__pack_d+0x134>
    b944:	00c00084 	movi	r3,2
    b948:	10c01926 	beq	r2,r3,b9b0 <__pack_d+0xb0>
    b94c:	8c04b03a 	or	r2,r17,r16
    b950:	10001726 	beq	r2,zero,b9b0 <__pack_d+0xb0>
    b954:	21000217 	ldw	r4,8(r4)
    b958:	00bf0084 	movi	r2,-1022
    b95c:	20804016 	blt	r4,r2,ba60 <__pack_d+0x160>
    b960:	0080ffc4 	movi	r2,1023
    b964:	11003316 	blt	r2,r4,ba34 <__pack_d+0x134>
    b968:	88803fcc 	andi	r2,r17,255
    b96c:	00c02004 	movi	r3,128
    b970:	10c02926 	beq	r2,r3,ba18 <__pack_d+0x118>
    b974:	88801fc4 	addi	r2,r17,127
    b978:	1463803a 	cmpltu	r17,r2,r17
    b97c:	8c21883a 	add	r16,r17,r16
    b980:	1023883a 	mov	r17,r2
    b984:	00880034 	movhi	r2,8192
    b988:	10bfffc4 	addi	r2,r2,-1
    b98c:	14001c36 	bltu	r2,r16,ba00 <__pack_d+0x100>
    b990:	2100ffc4 	addi	r4,r4,1023
    b994:	8006963a 	slli	r3,r16,24
    b998:	8804d23a 	srli	r2,r17,8
    b99c:	8020913a 	slli	r16,r16,4
    b9a0:	2101ffcc 	andi	r4,r4,2047
    b9a4:	1884b03a 	or	r2,r3,r2
    b9a8:	8020d33a 	srli	r16,r16,12
    b9ac:	00000306 	br	b9bc <__pack_d+0xbc>
    b9b0:	0009883a 	mov	r4,zero
    b9b4:	0005883a 	mov	r2,zero
    b9b8:	0021883a 	mov	r16,zero
    b9bc:	2008953a 	slli	r4,r4,20
    b9c0:	982697fa 	slli	r19,r19,31
    b9c4:	00c00434 	movhi	r3,16
    b9c8:	18ffffc4 	addi	r3,r3,-1
    b9cc:	80e0703a 	and	r16,r16,r3
    b9d0:	8106b03a 	or	r3,r16,r4
    b9d4:	1cc6b03a 	or	r3,r3,r19
    b9d8:	dfc00717 	ldw	ra,28(sp)
    b9dc:	dd800617 	ldw	r22,24(sp)
    b9e0:	dd400517 	ldw	r21,20(sp)
    b9e4:	dd000417 	ldw	r20,16(sp)
    b9e8:	dcc00317 	ldw	r19,12(sp)
    b9ec:	dc800217 	ldw	r18,8(sp)
    b9f0:	dc400117 	ldw	r17,4(sp)
    b9f4:	dc000017 	ldw	r16,0(sp)
    b9f8:	dec00804 	addi	sp,sp,32
    b9fc:	f800283a 	ret
    ba00:	800697fa 	slli	r3,r16,31
    ba04:	8804d07a 	srli	r2,r17,1
    ba08:	21010004 	addi	r4,r4,1024
    ba0c:	8020d07a 	srli	r16,r16,1
    ba10:	18a2b03a 	or	r17,r3,r2
    ba14:	003fdf06 	br	b994 <__pack_d+0x94>
    ba18:	88c0400c 	andi	r3,r17,256
    ba1c:	183fd926 	beq	r3,zero,b984 <__pack_d+0x84>
    ba20:	8885883a 	add	r2,r17,r2
    ba24:	1463803a 	cmpltu	r17,r2,r17
    ba28:	8c21883a 	add	r16,r17,r16
    ba2c:	1023883a 	mov	r17,r2
    ba30:	003fd406 	br	b984 <__pack_d+0x84>
    ba34:	0101ffc4 	movi	r4,2047
    ba38:	0005883a 	mov	r2,zero
    ba3c:	0021883a 	mov	r16,zero
    ba40:	003fde06 	br	b9bc <__pack_d+0xbc>
    ba44:	84000234 	orhi	r16,r16,8
    ba48:	00c00434 	movhi	r3,16
    ba4c:	18ffffc4 	addi	r3,r3,-1
    ba50:	8805883a 	mov	r2,r17
    ba54:	80e0703a 	and	r16,r16,r3
    ba58:	0101ffc4 	movi	r4,2047
    ba5c:	003fd706 	br	b9bc <__pack_d+0xbc>
    ba60:	1129c83a 	sub	r20,r2,r4
    ba64:	00800e04 	movi	r2,56
    ba68:	15002716 	blt	r2,r20,bb08 <__pack_d+0x208>
    ba6c:	800b883a 	mov	r5,r16
    ba70:	a00d883a 	mov	r6,r20
    ba74:	8809883a 	mov	r4,r17
    ba78:	000bcf80 	call	bcf8 <__lshrdi3>
    ba7c:	9009883a 	mov	r4,r18
    ba80:	000b883a 	mov	r5,zero
    ba84:	a00d883a 	mov	r6,r20
    ba88:	102d883a 	mov	r22,r2
    ba8c:	182b883a 	mov	r21,r3
    ba90:	000bd3c0 	call	bd3c <__ashldi3>
    ba94:	1009003a 	cmpeq	r4,r2,zero
    ba98:	1907c83a 	sub	r3,r3,r4
    ba9c:	10bfffc4 	addi	r2,r2,-1
    baa0:	1c20703a 	and	r16,r3,r16
    baa4:	1444703a 	and	r2,r2,r17
    baa8:	1404b03a 	or	r2,r2,r16
    baac:	1004c03a 	cmpne	r2,r2,zero
    bab0:	1584b03a 	or	r2,r2,r22
    bab4:	11003fcc 	andi	r4,r2,255
    bab8:	01402004 	movi	r5,128
    babc:	a807883a 	mov	r3,r21
    bac0:	2140131e 	bne	r4,r5,bb10 <__pack_d+0x210>
    bac4:	1140400c 	andi	r5,r2,256
    bac8:	28000426 	beq	r5,zero,badc <__pack_d+0x1dc>
    bacc:	1109883a 	add	r4,r2,r4
    bad0:	2085803a 	cmpltu	r2,r4,r2
    bad4:	1547883a 	add	r3,r2,r21
    bad8:	2005883a 	mov	r2,r4
    badc:	1808963a 	slli	r4,r3,24
    bae0:	1004d23a 	srli	r2,r2,8
    bae4:	1820913a 	slli	r16,r3,4
    bae8:	01440034 	movhi	r5,4096
    baec:	297fffc4 	addi	r5,r5,-1
    baf0:	2084b03a 	or	r2,r4,r2
    baf4:	8020d33a 	srli	r16,r16,12
    baf8:	01000044 	movi	r4,1
    bafc:	28ffaf36 	bltu	r5,r3,b9bc <__pack_d+0xbc>
    bb00:	0009883a 	mov	r4,zero
    bb04:	003fad06 	br	b9bc <__pack_d+0xbc>
    bb08:	0005883a 	mov	r2,zero
    bb0c:	0007883a 	mov	r3,zero
    bb10:	11001fc4 	addi	r4,r2,127
    bb14:	2085803a 	cmpltu	r2,r4,r2
    bb18:	10c7883a 	add	r3,r2,r3
    bb1c:	2005883a 	mov	r2,r4
    bb20:	003fee06 	br	badc <__pack_d+0x1dc>

0000bb24 <__unpack_d>:
    bb24:	21800117 	ldw	r6,4(r4)
    bb28:	20c00017 	ldw	r3,0(r4)
    bb2c:	3004d7fa 	srli	r2,r6,31
    bb30:	3008d53a 	srli	r4,r6,20
    bb34:	28800115 	stw	r2,4(r5)
    bb38:	2101ffcc 	andi	r4,r4,2047
    bb3c:	00800434 	movhi	r2,16
    bb40:	10bfffc4 	addi	r2,r2,-1
    bb44:	3084703a 	and	r2,r6,r2
    bb48:	20001a1e 	bne	r4,zero,bbb4 <__unpack_d+0x90>
    bb4c:	1888b03a 	or	r4,r3,r2
    bb50:	20002626 	beq	r4,zero,bbec <__unpack_d+0xc8>
    bb54:	1808d63a 	srli	r4,r3,24
    bb58:	1004923a 	slli	r2,r2,8
    bb5c:	01bf0084 	movi	r6,-1022
    bb60:	29800215 	stw	r6,8(r5)
    bb64:	2084b03a 	or	r2,r4,r2
    bb68:	010000c4 	movi	r4,3
    bb6c:	29000015 	stw	r4,0(r5)
    bb70:	02040034 	movhi	r8,4096
    bb74:	423fffc4 	addi	r8,r8,-1
    bb78:	1806923a 	slli	r3,r3,8
    bb7c:	40801836 	bltu	r8,r2,bbe0 <__unpack_d+0xbc>
    bb80:	013f0044 	movi	r4,-1023
    bb84:	18cd883a 	add	r6,r3,r3
    bb88:	30c7803a 	cmpltu	r3,r6,r3
    bb8c:	1085883a 	add	r2,r2,r2
    bb90:	1885883a 	add	r2,r3,r2
    bb94:	200f883a 	mov	r7,r4
    bb98:	3007883a 	mov	r3,r6
    bb9c:	213fffc4 	addi	r4,r4,-1
    bba0:	40bff82e 	bgeu	r8,r2,bb84 <__unpack_d+0x60>
    bba4:	29c00215 	stw	r7,8(r5)
    bba8:	28c00315 	stw	r3,12(r5)
    bbac:	28800415 	stw	r2,16(r5)
    bbb0:	f800283a 	ret
    bbb4:	01c1ffc4 	movi	r7,2047
    bbb8:	21c00f26 	beq	r4,r7,bbf8 <__unpack_d+0xd4>
    bbbc:	180cd63a 	srli	r6,r3,24
    bbc0:	1004923a 	slli	r2,r2,8
    bbc4:	213f0044 	addi	r4,r4,-1023
    bbc8:	1806923a 	slli	r3,r3,8
    bbcc:	3084b03a 	or	r2,r6,r2
    bbd0:	29000215 	stw	r4,8(r5)
    bbd4:	010000c4 	movi	r4,3
    bbd8:	10840034 	orhi	r2,r2,4096
    bbdc:	29000015 	stw	r4,0(r5)
    bbe0:	28c00315 	stw	r3,12(r5)
    bbe4:	28800415 	stw	r2,16(r5)
    bbe8:	f800283a 	ret
    bbec:	00800084 	movi	r2,2
    bbf0:	28800015 	stw	r2,0(r5)
    bbf4:	f800283a 	ret
    bbf8:	1888b03a 	or	r4,r3,r2
    bbfc:	20000526 	beq	r4,zero,bc14 <__unpack_d+0xf0>
    bc00:	3180022c 	andhi	r6,r6,8
    bc04:	30000626 	beq	r6,zero,bc20 <__unpack_d+0xfc>
    bc08:	01000044 	movi	r4,1
    bc0c:	29000015 	stw	r4,0(r5)
    bc10:	003ff306 	br	bbe0 <__unpack_d+0xbc>
    bc14:	00800104 	movi	r2,4
    bc18:	28800015 	stw	r2,0(r5)
    bc1c:	f800283a 	ret
    bc20:	28000015 	stw	zero,0(r5)
    bc24:	003fee06 	br	bbe0 <__unpack_d+0xbc>

0000bc28 <__fpcmp_parts_d>:
    bc28:	20c00017 	ldw	r3,0(r4)
    bc2c:	00800044 	movi	r2,1
    bc30:	10c0142e 	bgeu	r2,r3,bc84 <__fpcmp_parts_d+0x5c>
    bc34:	29800017 	ldw	r6,0(r5)
    bc38:	1180122e 	bgeu	r2,r6,bc84 <__fpcmp_parts_d+0x5c>
    bc3c:	01c00104 	movi	r7,4
    bc40:	19c02826 	beq	r3,r7,bce4 <__fpcmp_parts_d+0xbc>
    bc44:	31c00926 	beq	r6,r7,bc6c <__fpcmp_parts_d+0x44>
    bc48:	01c00084 	movi	r7,2
    bc4c:	19c00626 	beq	r3,r7,bc68 <__fpcmp_parts_d+0x40>
    bc50:	31c00a26 	beq	r6,r7,bc7c <__fpcmp_parts_d+0x54>
    bc54:	20c00117 	ldw	r3,4(r4)
    bc58:	29800117 	ldw	r6,4(r5)
    bc5c:	19800b26 	beq	r3,r6,bc8c <__fpcmp_parts_d+0x64>
    bc60:	1800041e 	bne	r3,zero,bc74 <__fpcmp_parts_d+0x4c>
    bc64:	f800283a 	ret
    bc68:	30c01a26 	beq	r6,r3,bcd4 <__fpcmp_parts_d+0xac>
    bc6c:	28800117 	ldw	r2,4(r5)
    bc70:	1000041e 	bne	r2,zero,bc84 <__fpcmp_parts_d+0x5c>
    bc74:	00bfffc4 	movi	r2,-1
    bc78:	f800283a 	ret
    bc7c:	20800117 	ldw	r2,4(r4)
    bc80:	103ffc1e 	bne	r2,zero,bc74 <__fpcmp_parts_d+0x4c>
    bc84:	00800044 	movi	r2,1
    bc88:	f800283a 	ret
    bc8c:	21c00217 	ldw	r7,8(r4)
    bc90:	29800217 	ldw	r6,8(r5)
    bc94:	31c0020e 	bge	r6,r7,bca0 <__fpcmp_parts_d+0x78>
    bc98:	183ff61e 	bne	r3,zero,bc74 <__fpcmp_parts_d+0x4c>
    bc9c:	f800283a 	ret
    bca0:	39800a16 	blt	r7,r6,bccc <__fpcmp_parts_d+0xa4>
    bca4:	20800417 	ldw	r2,16(r4)
    bca8:	29800417 	ldw	r6,16(r5)
    bcac:	21c00317 	ldw	r7,12(r4)
    bcb0:	29000317 	ldw	r4,12(r5)
    bcb4:	30800936 	bltu	r6,r2,bcdc <__fpcmp_parts_d+0xb4>
    bcb8:	1180011e 	bne	r2,r6,bcc0 <__fpcmp_parts_d+0x98>
    bcbc:	21c00736 	bltu	r4,r7,bcdc <__fpcmp_parts_d+0xb4>
    bcc0:	11800236 	bltu	r2,r6,bccc <__fpcmp_parts_d+0xa4>
    bcc4:	3080031e 	bne	r6,r2,bcd4 <__fpcmp_parts_d+0xac>
    bcc8:	3900022e 	bgeu	r7,r4,bcd4 <__fpcmp_parts_d+0xac>
    bccc:	183fe926 	beq	r3,zero,bc74 <__fpcmp_parts_d+0x4c>
    bcd0:	003fec06 	br	bc84 <__fpcmp_parts_d+0x5c>
    bcd4:	0005883a 	mov	r2,zero
    bcd8:	f800283a 	ret
    bcdc:	183fe926 	beq	r3,zero,bc84 <__fpcmp_parts_d+0x5c>
    bce0:	003fe406 	br	bc74 <__fpcmp_parts_d+0x4c>
    bce4:	30ffe51e 	bne	r6,r3,bc7c <__fpcmp_parts_d+0x54>
    bce8:	28c00117 	ldw	r3,4(r5)
    bcec:	20800117 	ldw	r2,4(r4)
    bcf0:	1885c83a 	sub	r2,r3,r2
    bcf4:	f800283a 	ret

0000bcf8 <__lshrdi3>:
    bcf8:	2005883a 	mov	r2,r4
    bcfc:	2807883a 	mov	r3,r5
    bd00:	30000826 	beq	r6,zero,bd24 <__lshrdi3+0x2c>
    bd04:	01000804 	movi	r4,32
    bd08:	2189c83a 	sub	r4,r4,r6
    bd0c:	0100060e 	bge	zero,r4,bd28 <__lshrdi3+0x30>
    bd10:	1184d83a 	srl	r2,r2,r6
    bd14:	2908983a 	sll	r4,r5,r4
    bd18:	298cd83a 	srl	r6,r5,r6
    bd1c:	2084b03a 	or	r2,r4,r2
    bd20:	3007883a 	mov	r3,r6
    bd24:	f800283a 	ret
    bd28:	0105c83a 	sub	r2,zero,r4
    bd2c:	000d883a 	mov	r6,zero
    bd30:	2884d83a 	srl	r2,r5,r2
    bd34:	3007883a 	mov	r3,r6
    bd38:	003ffa06 	br	bd24 <__lshrdi3+0x2c>

0000bd3c <__ashldi3>:
    bd3c:	2005883a 	mov	r2,r4
    bd40:	2807883a 	mov	r3,r5
    bd44:	30000826 	beq	r6,zero,bd68 <__ashldi3+0x2c>
    bd48:	01000804 	movi	r4,32
    bd4c:	2189c83a 	sub	r4,r4,r6
    bd50:	0100060e 	bge	zero,r4,bd6c <__ashldi3+0x30>
    bd54:	1108d83a 	srl	r4,r2,r4
    bd58:	2986983a 	sll	r3,r5,r6
    bd5c:	118c983a 	sll	r6,r2,r6
    bd60:	20c6b03a 	or	r3,r4,r3
    bd64:	3005883a 	mov	r2,r6
    bd68:	f800283a 	ret
    bd6c:	0107c83a 	sub	r3,zero,r4
    bd70:	000d883a 	mov	r6,zero
    bd74:	10c6983a 	sll	r3,r2,r3
    bd78:	3005883a 	mov	r2,r6
    bd7c:	003ffa06 	br	bd68 <__ashldi3+0x2c>

0000bd80 <clock>:
    bd80:	00800074 	movhi	r2,1
    bd84:	10ba9c04 	addi	r2,r2,-5520
    bd88:	11000017 	ldw	r4,0(r2)
    bd8c:	defffb04 	addi	sp,sp,-20
    bd90:	d80b883a 	mov	r5,sp
    bd94:	dfc00415 	stw	ra,16(sp)
    bd98:	000bf300 	call	bf30 <_times_r>
    bd9c:	00ffffc4 	movi	r3,-1
    bda0:	10c00726 	beq	r2,r3,bdc0 <clock+0x40>
    bda4:	d8c00117 	ldw	r3,4(sp)
    bda8:	d8800017 	ldw	r2,0(sp)
    bdac:	1885883a 	add	r2,r3,r2
    bdb0:	d8c00217 	ldw	r3,8(sp)
    bdb4:	10c5883a 	add	r2,r2,r3
    bdb8:	d8c00317 	ldw	r3,12(sp)
    bdbc:	10c5883a 	add	r2,r2,r3
    bdc0:	dfc00417 	ldw	ra,16(sp)
    bdc4:	dec00504 	addi	sp,sp,20
    bdc8:	f800283a 	ret

0000bdcc <memset>:
    bdcc:	2005883a 	mov	r2,r4
    bdd0:	30000526 	beq	r6,zero,bde8 <memset+0x1c>
    bdd4:	218d883a 	add	r6,r4,r6
    bdd8:	2007883a 	mov	r3,r4
    bddc:	19400005 	stb	r5,0(r3)
    bde0:	18c00044 	addi	r3,r3,1
    bde4:	19bffd1e 	bne	r3,r6,bddc <memset+0x10>
    bde8:	f800283a 	ret

0000bdec <_printf_r>:
    bdec:	defffd04 	addi	sp,sp,-12
    bdf0:	dfc00015 	stw	ra,0(sp)
    bdf4:	d9800115 	stw	r6,4(sp)
    bdf8:	d9c00215 	stw	r7,8(sp)
    bdfc:	20800217 	ldw	r2,8(r4)
    be00:	00c00074 	movhi	r3,1
    be04:	18f1a404 	addi	r3,r3,-14704
    be08:	280d883a 	mov	r6,r5
    be0c:	10c00115 	stw	r3,4(r2)
    be10:	100b883a 	mov	r5,r2
    be14:	d9c00104 	addi	r7,sp,4
    be18:	000bf380 	call	bf38 <___vfprintf_internal_r>
    be1c:	dfc00017 	ldw	ra,0(sp)
    be20:	dec00304 	addi	sp,sp,12
    be24:	f800283a 	ret

0000be28 <printf>:
    be28:	defffc04 	addi	sp,sp,-16
    be2c:	dfc00015 	stw	ra,0(sp)
    be30:	d9400115 	stw	r5,4(sp)
    be34:	d9800215 	stw	r6,8(sp)
    be38:	d9c00315 	stw	r7,12(sp)
    be3c:	00800074 	movhi	r2,1
    be40:	10ba9c04 	addi	r2,r2,-5520
    be44:	10800017 	ldw	r2,0(r2)
    be48:	00c00074 	movhi	r3,1
    be4c:	18f1a404 	addi	r3,r3,-14704
    be50:	200b883a 	mov	r5,r4
    be54:	10800217 	ldw	r2,8(r2)
    be58:	d9800104 	addi	r6,sp,4
    be5c:	10c00115 	stw	r3,4(r2)
    be60:	1009883a 	mov	r4,r2
    be64:	000c66c0 	call	c66c <__vfprintf_internal>
    be68:	dfc00017 	ldw	ra,0(sp)
    be6c:	dec00404 	addi	sp,sp,16
    be70:	f800283a 	ret

0000be74 <_puts_r>:
    be74:	defffd04 	addi	sp,sp,-12
    be78:	dc000015 	stw	r16,0(sp)
    be7c:	2021883a 	mov	r16,r4
    be80:	2809883a 	mov	r4,r5
    be84:	dfc00215 	stw	ra,8(sp)
    be88:	dc400115 	stw	r17,4(sp)
    be8c:	2823883a 	mov	r17,r5
    be90:	000bf080 	call	bf08 <strlen>
    be94:	81400217 	ldw	r5,8(r16)
    be98:	00c00074 	movhi	r3,1
    be9c:	18f1a404 	addi	r3,r3,-14704
    bea0:	880d883a 	mov	r6,r17
    bea4:	8009883a 	mov	r4,r16
    bea8:	28c00115 	stw	r3,4(r5)
    beac:	100f883a 	mov	r7,r2
    beb0:	183ee83a 	callr	r3
    beb4:	047fffc4 	movi	r17,-1
    beb8:	14400926 	beq	r2,r17,bee0 <_puts_r+0x6c>
    bebc:	81400217 	ldw	r5,8(r16)
    bec0:	8009883a 	mov	r4,r16
    bec4:	01800074 	movhi	r6,1
    bec8:	31b9c604 	addi	r6,r6,-6376
    becc:	28800117 	ldw	r2,4(r5)
    bed0:	01c00044 	movi	r7,1
    bed4:	103ee83a 	callr	r2
    bed8:	14400126 	beq	r2,r17,bee0 <_puts_r+0x6c>
    bedc:	0005883a 	mov	r2,zero
    bee0:	dfc00217 	ldw	ra,8(sp)
    bee4:	dc400117 	ldw	r17,4(sp)
    bee8:	dc000017 	ldw	r16,0(sp)
    beec:	dec00304 	addi	sp,sp,12
    bef0:	f800283a 	ret

0000bef4 <puts>:
    bef4:	00800074 	movhi	r2,1
    bef8:	10ba9c04 	addi	r2,r2,-5520
    befc:	200b883a 	mov	r5,r4
    bf00:	11000017 	ldw	r4,0(r2)
    bf04:	000be741 	jmpi	be74 <_puts_r>

0000bf08 <strlen>:
    bf08:	20800007 	ldb	r2,0(r4)
    bf0c:	10000626 	beq	r2,zero,bf28 <strlen+0x20>
    bf10:	2005883a 	mov	r2,r4
    bf14:	10800044 	addi	r2,r2,1
    bf18:	10c00007 	ldb	r3,0(r2)
    bf1c:	183ffd1e 	bne	r3,zero,bf14 <strlen+0xc>
    bf20:	1105c83a 	sub	r2,r2,r4
    bf24:	f800283a 	ret
    bf28:	0005883a 	mov	r2,zero
    bf2c:	f800283a 	ret

0000bf30 <_times_r>:
    bf30:	2809883a 	mov	r4,r5
    bf34:	000cf0c1 	jmpi	cf0c <times>

0000bf38 <___vfprintf_internal_r>:
    bf38:	deffe004 	addi	sp,sp,-128
    bf3c:	d8c00804 	addi	r3,sp,32
    bf40:	ddc01d15 	stw	r23,116(sp)
    bf44:	dd401b15 	stw	r21,108(sp)
    bf48:	dd001a15 	stw	r20,104(sp)
    bf4c:	dcc01915 	stw	r19,100(sp)
    bf50:	dc801815 	stw	r18,96(sp)
    bf54:	dc001615 	stw	r16,88(sp)
    bf58:	dfc01f15 	stw	ra,124(sp)
    bf5c:	df001e15 	stw	fp,120(sp)
    bf60:	dd801c15 	stw	r22,112(sp)
    bf64:	dc401715 	stw	r17,92(sp)
    bf68:	d9000f15 	stw	r4,60(sp)
    bf6c:	d9c00e15 	stw	r7,56(sp)
    bf70:	3021883a 	mov	r16,r6
    bf74:	0025883a 	mov	r18,zero
    bf78:	d8001415 	stw	zero,80(sp)
    bf7c:	d8000d15 	stw	zero,52(sp)
    bf80:	0029883a 	mov	r20,zero
    bf84:	d8000b15 	stw	zero,44(sp)
    bf88:	d8000c15 	stw	zero,48(sp)
    bf8c:	d8001315 	stw	zero,76(sp)
    bf90:	d8001015 	stw	zero,64(sp)
    bf94:	002b883a 	mov	r21,zero
    bf98:	04c00044 	movi	r19,1
    bf9c:	d8c00a15 	stw	r3,40(sp)
    bfa0:	282f883a 	mov	r23,r5
    bfa4:	80c00003 	ldbu	r3,0(r16)
    bfa8:	84000044 	addi	r16,r16,1
    bfac:	18803fcc 	andi	r2,r3,255
    bfb0:	1080201c 	xori	r2,r2,128
    bfb4:	10bfe004 	addi	r2,r2,-128
    bfb8:	10001426 	beq	r2,zero,c00c <___vfprintf_internal_r+0xd4>
    bfbc:	acc03026 	beq	r21,r19,c080 <___vfprintf_internal_r+0x148>
    bfc0:	9d401f16 	blt	r19,r21,c040 <___vfprintf_internal_r+0x108>
    bfc4:	a83ff71e 	bne	r21,zero,bfa4 <___vfprintf_internal_r+0x6c>
    bfc8:	01000944 	movi	r4,37
    bfcc:	1100d926 	beq	r2,r4,c334 <___vfprintf_internal_r+0x3fc>
    bfd0:	b8800117 	ldw	r2,4(r23)
    bfd4:	d9000f17 	ldw	r4,60(sp)
    bfd8:	d8c00905 	stb	r3,36(sp)
    bfdc:	b80b883a 	mov	r5,r23
    bfe0:	d9800904 	addi	r6,sp,36
    bfe4:	01c00044 	movi	r7,1
    bfe8:	103ee83a 	callr	r2
    bfec:	1000a31e 	bne	r2,zero,c27c <___vfprintf_internal_r+0x344>
    bff0:	80c00003 	ldbu	r3,0(r16)
    bff4:	94800044 	addi	r18,r18,1
    bff8:	84000044 	addi	r16,r16,1
    bffc:	18803fcc 	andi	r2,r3,255
    c000:	1080201c 	xori	r2,r2,128
    c004:	10bfe004 	addi	r2,r2,-128
    c008:	103fec1e 	bne	r2,zero,bfbc <___vfprintf_internal_r+0x84>
    c00c:	9005883a 	mov	r2,r18
    c010:	dfc01f17 	ldw	ra,124(sp)
    c014:	df001e17 	ldw	fp,120(sp)
    c018:	ddc01d17 	ldw	r23,116(sp)
    c01c:	dd801c17 	ldw	r22,112(sp)
    c020:	dd401b17 	ldw	r21,108(sp)
    c024:	dd001a17 	ldw	r20,104(sp)
    c028:	dcc01917 	ldw	r19,100(sp)
    c02c:	dc801817 	ldw	r18,96(sp)
    c030:	dc401717 	ldw	r17,92(sp)
    c034:	dc001617 	ldw	r16,88(sp)
    c038:	dec02004 	addi	sp,sp,128
    c03c:	f800283a 	ret
    c040:	01000084 	movi	r4,2
    c044:	a9001226 	beq	r21,r4,c090 <___vfprintf_internal_r+0x158>
    c048:	010000c4 	movi	r4,3
    c04c:	a93fd51e 	bne	r21,r4,bfa4 <___vfprintf_internal_r+0x6c>
    c050:	1c7ff404 	addi	r17,r3,-48
    c054:	8c403fcc 	andi	r17,r17,255
    c058:	01000244 	movi	r4,9
    c05c:	24401b36 	bltu	r4,r17,c0cc <___vfprintf_internal_r+0x194>
    c060:	d9000b17 	ldw	r4,44(sp)
    c064:	00bfffc4 	movi	r2,-1
    c068:	2080ea26 	beq	r4,r2,c414 <___vfprintf_internal_r+0x4dc>
    c06c:	01400284 	movi	r5,10
    c070:	000b5280 	call	b528 <__mulsi3>
    c074:	88a3883a 	add	r17,r17,r2
    c078:	dc400b15 	stw	r17,44(sp)
    c07c:	003fc906 	br	bfa4 <___vfprintf_internal_r+0x6c>
    c080:	01000c04 	movi	r4,48
    c084:	1100de26 	beq	r2,r4,c400 <___vfprintf_internal_r+0x4c8>
    c088:	01000944 	movi	r4,37
    c08c:	1100fd26 	beq	r2,r4,c484 <___vfprintf_internal_r+0x54c>
    c090:	1c7ff404 	addi	r17,r3,-48
    c094:	8c403fcc 	andi	r17,r17,255
    c098:	01000244 	movi	r4,9
    c09c:	24400936 	bltu	r4,r17,c0c4 <___vfprintf_internal_r+0x18c>
    c0a0:	d9000c17 	ldw	r4,48(sp)
    c0a4:	00bfffc4 	movi	r2,-1
    c0a8:	2080d826 	beq	r4,r2,c40c <___vfprintf_internal_r+0x4d4>
    c0ac:	01400284 	movi	r5,10
    c0b0:	000b5280 	call	b528 <__mulsi3>
    c0b4:	88a3883a 	add	r17,r17,r2
    c0b8:	dc400c15 	stw	r17,48(sp)
    c0bc:	05400084 	movi	r21,2
    c0c0:	003fb806 	br	bfa4 <___vfprintf_internal_r+0x6c>
    c0c4:	01000b84 	movi	r4,46
    c0c8:	1100a726 	beq	r2,r4,c368 <___vfprintf_internal_r+0x430>
    c0cc:	01401b04 	movi	r5,108
    c0d0:	1140a326 	beq	r2,r5,c360 <___vfprintf_internal_r+0x428>
    c0d4:	d9000b17 	ldw	r4,44(sp)
    c0d8:	00bfffc4 	movi	r2,-1
    c0dc:	2080e626 	beq	r4,r2,c478 <___vfprintf_internal_r+0x540>
    c0e0:	d8001015 	stw	zero,64(sp)
    c0e4:	18ffea04 	addi	r3,r3,-88
    c0e8:	18c03fcc 	andi	r3,r3,255
    c0ec:	00800804 	movi	r2,32
    c0f0:	10c0022e 	bgeu	r2,r3,c0fc <___vfprintf_internal_r+0x1c4>
    c0f4:	002b883a 	mov	r21,zero
    c0f8:	003faa06 	br	bfa4 <___vfprintf_internal_r+0x6c>
    c0fc:	18c7883a 	add	r3,r3,r3
    c100:	18c7883a 	add	r3,r3,r3
    c104:	01400074 	movhi	r5,1
    c108:	29704604 	addi	r5,r5,-16104
    c10c:	1947883a 	add	r3,r3,r5
    c110:	18800017 	ldw	r2,0(r3)
    c114:	1000683a 	jmp	r2
    c118:	0000c4b0 	cmpltui	zero,zero,786
    c11c:	0000c0f4 	movhi	zero,771
    c120:	0000c0f4 	movhi	zero,771
    c124:	0000c0f4 	movhi	zero,771
    c128:	0000c0f4 	movhi	zero,771
    c12c:	0000c0f4 	movhi	zero,771
    c130:	0000c0f4 	movhi	zero,771
    c134:	0000c0f4 	movhi	zero,771
    c138:	0000c0f4 	movhi	zero,771
    c13c:	0000c0f4 	movhi	zero,771
    c140:	0000c0f4 	movhi	zero,771
    c144:	0000c4c0 	call	c4c <__alt_mem_onchip_mem-0x73b4>
    c148:	0000c19c 	xori	zero,zero,774
    c14c:	0000c0f4 	movhi	zero,771
    c150:	0000c0f4 	movhi	zero,771
    c154:	0000c0f4 	movhi	zero,771
    c158:	0000c0f4 	movhi	zero,771
    c15c:	0000c19c 	xori	zero,zero,774
    c160:	0000c0f4 	movhi	zero,771
    c164:	0000c0f4 	movhi	zero,771
    c168:	0000c0f4 	movhi	zero,771
    c16c:	0000c0f4 	movhi	zero,771
    c170:	0000c0f4 	movhi	zero,771
    c174:	0000c284 	movi	zero,778
    c178:	0000c0f4 	movhi	zero,771
    c17c:	0000c0f4 	movhi	zero,771
    c180:	0000c0f4 	movhi	zero,771
    c184:	0000c50c 	andi	zero,zero,788
    c188:	0000c0f4 	movhi	zero,771
    c18c:	0000c288 	cmpgei	zero,zero,778
    c190:	0000c0f4 	movhi	zero,771
    c194:	0000c0f4 	movhi	zero,771
    c198:	0000c4b8 	rdprs	zero,zero,786
    c19c:	d8c00d17 	ldw	r3,52(sp)
    c1a0:	18003926 	beq	r3,zero,c288 <___vfprintf_internal_r+0x350>
    c1a4:	d9000e17 	ldw	r4,56(sp)
    c1a8:	00c00044 	movi	r3,1
    c1ac:	25400017 	ldw	r21,0(r4)
    c1b0:	21000104 	addi	r4,r4,4
    c1b4:	d9000e15 	stw	r4,56(sp)
    c1b8:	d8c00d15 	stw	r3,52(sp)
    c1bc:	a8012116 	blt	r21,zero,c644 <___vfprintf_internal_r+0x70c>
    c1c0:	d8001215 	stw	zero,72(sp)
    c1c4:	d823883a 	mov	r17,sp
    c1c8:	a800371e 	bne	r21,zero,c2a8 <___vfprintf_internal_r+0x370>
    c1cc:	d9400b17 	ldw	r5,44(sp)
    c1d0:	d809883a 	mov	r4,sp
    c1d4:	01400b0e 	bge	zero,r5,c204 <___vfprintf_internal_r+0x2cc>
    c1d8:	d8800b17 	ldw	r2,44(sp)
    c1dc:	d823883a 	mov	r17,sp
    c1e0:	00c00c04 	movi	r3,48
    c1e4:	00000206 	br	c1f0 <___vfprintf_internal_r+0x2b8>
    c1e8:	d9400a17 	ldw	r5,40(sp)
    c1ec:	89400426 	beq	r17,r5,c200 <___vfprintf_internal_r+0x2c8>
    c1f0:	88c00005 	stb	r3,0(r17)
    c1f4:	10bfffc4 	addi	r2,r2,-1
    c1f8:	8c400044 	addi	r17,r17,1
    c1fc:	103ffa1e 	bne	r2,zero,c1e8 <___vfprintf_internal_r+0x2b0>
    c200:	892bc83a 	sub	r21,r17,r4
    c204:	d8c01217 	ldw	r3,72(sp)
    c208:	d9000c17 	ldw	r4,48(sp)
    c20c:	a8c5883a 	add	r2,r21,r3
    c210:	d8c01017 	ldw	r3,64(sp)
    c214:	2085c83a 	sub	r2,r4,r2
    c218:	d8801115 	stw	r2,68(sp)
    c21c:	18007f26 	beq	r3,zero,c41c <___vfprintf_internal_r+0x4e4>
    c220:	d8c01217 	ldw	r3,72(sp)
    c224:	1800fa1e 	bne	r3,zero,c610 <___vfprintf_internal_r+0x6d8>
    c228:	d8c01117 	ldw	r3,68(sp)
    c22c:	00c0620e 	bge	zero,r3,c3b8 <___vfprintf_internal_r+0x480>
    c230:	00800c04 	movi	r2,48
    c234:	d88008c5 	stb	r2,35(sp)
    c238:	b805883a 	mov	r2,r23
    c23c:	dc001215 	stw	r16,72(sp)
    c240:	882f883a 	mov	r23,r17
    c244:	1f3fffc4 	addi	fp,r3,-1
    c248:	05bfffc4 	movi	r22,-1
    c24c:	dc000f17 	ldw	r16,60(sp)
    c250:	1023883a 	mov	r17,r2
    c254:	00000206 	br	c260 <___vfprintf_internal_r+0x328>
    c258:	e73fffc4 	addi	fp,fp,-1
    c25c:	e580fc26 	beq	fp,r22,c650 <___vfprintf_internal_r+0x718>
    c260:	88800117 	ldw	r2,4(r17)
    c264:	8009883a 	mov	r4,r16
    c268:	880b883a 	mov	r5,r17
    c26c:	d98008c4 	addi	r6,sp,35
    c270:	01c00044 	movi	r7,1
    c274:	103ee83a 	callr	r2
    c278:	103ff726 	beq	r2,zero,c258 <___vfprintf_internal_r+0x320>
    c27c:	04bfffc4 	movi	r18,-1
    c280:	003f6206 	br	c00c <___vfprintf_internal_r+0xd4>
    c284:	05000204 	movi	r20,8
    c288:	d9400e17 	ldw	r5,56(sp)
    c28c:	2d400017 	ldw	r21,0(r5)
    c290:	29400104 	addi	r5,r5,4
    c294:	d9400e15 	stw	r5,56(sp)
    c298:	d8000d15 	stw	zero,52(sp)
    c29c:	d8001215 	stw	zero,72(sp)
    c2a0:	d823883a 	mov	r17,sp
    c2a4:	a83fc926 	beq	r21,zero,c1cc <___vfprintf_internal_r+0x294>
    c2a8:	05800244 	movi	r22,9
    c2ac:	dc001115 	stw	r16,68(sp)
    c2b0:	df001417 	ldw	fp,80(sp)
    c2b4:	00000506 	br	c2cc <___vfprintf_internal_r+0x394>
    c2b8:	15400c04 	addi	r21,r2,48
    c2bc:	8d400005 	stb	r21,0(r17)
    c2c0:	802b883a 	mov	r21,r16
    c2c4:	8c400044 	addi	r17,r17,1
    c2c8:	80000f26 	beq	r16,zero,c308 <___vfprintf_internal_r+0x3d0>
    c2cc:	a809883a 	mov	r4,r21
    c2d0:	a00b883a 	mov	r5,r20
    c2d4:	000c8fc0 	call	c8fc <__udivsi3>
    c2d8:	a009883a 	mov	r4,r20
    c2dc:	100b883a 	mov	r5,r2
    c2e0:	1021883a 	mov	r16,r2
    c2e4:	000b5280 	call	b528 <__mulsi3>
    c2e8:	a885c83a 	sub	r2,r21,r2
    c2ec:	b0bff20e 	bge	r22,r2,c2b8 <___vfprintf_internal_r+0x380>
    c2f0:	e0000e26 	beq	fp,zero,c32c <___vfprintf_internal_r+0x3f4>
    c2f4:	15400dc4 	addi	r21,r2,55
    c2f8:	8d400005 	stb	r21,0(r17)
    c2fc:	802b883a 	mov	r21,r16
    c300:	8c400044 	addi	r17,r17,1
    c304:	803ff11e 	bne	r16,zero,c2cc <___vfprintf_internal_r+0x394>
    c308:	d9000b17 	ldw	r4,44(sp)
    c30c:	8eebc83a 	sub	r21,r17,sp
    c310:	dc001117 	ldw	r16,68(sp)
    c314:	2545c83a 	sub	r2,r4,r21
    c318:	d809883a 	mov	r4,sp
    c31c:	00bfb90e 	bge	zero,r2,c204 <___vfprintf_internal_r+0x2cc>
    c320:	d8c00a17 	ldw	r3,40(sp)
    c324:	88ffae36 	bltu	r17,r3,c1e0 <___vfprintf_internal_r+0x2a8>
    c328:	003fb606 	br	c204 <___vfprintf_internal_r+0x2cc>
    c32c:	154015c4 	addi	r21,r2,87
    c330:	003fe206 	br	c2bc <___vfprintf_internal_r+0x384>
    c334:	00c00044 	movi	r3,1
    c338:	013fffc4 	movi	r4,-1
    c33c:	d8c00d15 	stw	r3,52(sp)
    c340:	d9000b15 	stw	r4,44(sp)
    c344:	d8001415 	stw	zero,80(sp)
    c348:	05000284 	movi	r20,10
    c34c:	d9000c15 	stw	r4,48(sp)
    c350:	d8001315 	stw	zero,76(sp)
    c354:	d8001015 	stw	zero,64(sp)
    c358:	182b883a 	mov	r21,r3
    c35c:	003f1106 	br	bfa4 <___vfprintf_internal_r+0x6c>
    c360:	00c00044 	movi	r3,1
    c364:	d8c01315 	stw	r3,76(sp)
    c368:	054000c4 	movi	r21,3
    c36c:	003f0d06 	br	bfa4 <___vfprintf_internal_r+0x6c>
    c370:	d8c01117 	ldw	r3,68(sp)
    c374:	dc001517 	ldw	r16,84(sp)
    c378:	8805883a 	mov	r2,r17
    c37c:	90e5883a 	add	r18,r18,r3
    c380:	b823883a 	mov	r17,r23
    c384:	102f883a 	mov	r23,r2
    c388:	d8c01217 	ldw	r3,72(sp)
    c38c:	18000a26 	beq	r3,zero,c3b8 <___vfprintf_internal_r+0x480>
    c390:	b8800117 	ldw	r2,4(r23)
    c394:	d9000f17 	ldw	r4,60(sp)
    c398:	00c00b44 	movi	r3,45
    c39c:	d8c00905 	stb	r3,36(sp)
    c3a0:	b80b883a 	mov	r5,r23
    c3a4:	d9800904 	addi	r6,sp,36
    c3a8:	01c00044 	movi	r7,1
    c3ac:	103ee83a 	callr	r2
    c3b0:	103fb21e 	bne	r2,zero,c27c <___vfprintf_internal_r+0x344>
    c3b4:	94800044 	addi	r18,r18,1
    c3b8:	8d6dc83a 	sub	r22,r17,r21
    c3bc:	057f4d0e 	bge	zero,r21,c0f4 <___vfprintf_internal_r+0x1bc>
    c3c0:	dd400f17 	ldw	r21,60(sp)
    c3c4:	00000206 	br	c3d0 <___vfprintf_internal_r+0x498>
    c3c8:	94800044 	addi	r18,r18,1
    c3cc:	8dbf4926 	beq	r17,r22,c0f4 <___vfprintf_internal_r+0x1bc>
    c3d0:	8c7fffc4 	addi	r17,r17,-1
    c3d4:	88c00003 	ldbu	r3,0(r17)
    c3d8:	b8800117 	ldw	r2,4(r23)
    c3dc:	a809883a 	mov	r4,r21
    c3e0:	d8c00905 	stb	r3,36(sp)
    c3e4:	b80b883a 	mov	r5,r23
    c3e8:	d9800904 	addi	r6,sp,36
    c3ec:	01c00044 	movi	r7,1
    c3f0:	103ee83a 	callr	r2
    c3f4:	103ff426 	beq	r2,zero,c3c8 <___vfprintf_internal_r+0x490>
    c3f8:	04bfffc4 	movi	r18,-1
    c3fc:	003f0306 	br	c00c <___vfprintf_internal_r+0xd4>
    c400:	dd401015 	stw	r21,64(sp)
    c404:	05400084 	movi	r21,2
    c408:	003ee606 	br	bfa4 <___vfprintf_internal_r+0x6c>
    c40c:	0005883a 	mov	r2,zero
    c410:	003f2806 	br	c0b4 <___vfprintf_internal_r+0x17c>
    c414:	0005883a 	mov	r2,zero
    c418:	003f1606 	br	c074 <___vfprintf_internal_r+0x13c>
    c41c:	d8c01117 	ldw	r3,68(sp)
    c420:	00ffd90e 	bge	zero,r3,c388 <___vfprintf_internal_r+0x450>
    c424:	00800804 	movi	r2,32
    c428:	d8800885 	stb	r2,34(sp)
    c42c:	b805883a 	mov	r2,r23
    c430:	dc001515 	stw	r16,84(sp)
    c434:	882f883a 	mov	r23,r17
    c438:	1f3fffc4 	addi	fp,r3,-1
    c43c:	05bfffc4 	movi	r22,-1
    c440:	dc000f17 	ldw	r16,60(sp)
    c444:	1023883a 	mov	r17,r2
    c448:	00000206 	br	c454 <___vfprintf_internal_r+0x51c>
    c44c:	e73fffc4 	addi	fp,fp,-1
    c450:	e5bfc726 	beq	fp,r22,c370 <___vfprintf_internal_r+0x438>
    c454:	88800117 	ldw	r2,4(r17)
    c458:	8009883a 	mov	r4,r16
    c45c:	880b883a 	mov	r5,r17
    c460:	d9800884 	addi	r6,sp,34
    c464:	01c00044 	movi	r7,1
    c468:	103ee83a 	callr	r2
    c46c:	103ff726 	beq	r2,zero,c44c <___vfprintf_internal_r+0x514>
    c470:	04bfffc4 	movi	r18,-1
    c474:	003ee506 	br	c00c <___vfprintf_internal_r+0xd4>
    c478:	01000044 	movi	r4,1
    c47c:	d9000b15 	stw	r4,44(sp)
    c480:	003f1806 	br	c0e4 <___vfprintf_internal_r+0x1ac>
    c484:	b8c00117 	ldw	r3,4(r23)
    c488:	d9000f17 	ldw	r4,60(sp)
    c48c:	d8800905 	stb	r2,36(sp)
    c490:	b80b883a 	mov	r5,r23
    c494:	d9800904 	addi	r6,sp,36
    c498:	a80f883a 	mov	r7,r21
    c49c:	183ee83a 	callr	r3
    c4a0:	103f761e 	bne	r2,zero,c27c <___vfprintf_internal_r+0x344>
    c4a4:	94800044 	addi	r18,r18,1
    c4a8:	002b883a 	mov	r21,zero
    c4ac:	003ebd06 	br	bfa4 <___vfprintf_internal_r+0x6c>
    c4b0:	00c00044 	movi	r3,1
    c4b4:	d8c01415 	stw	r3,80(sp)
    c4b8:	05000404 	movi	r20,16
    c4bc:	003f7206 	br	c288 <___vfprintf_internal_r+0x350>
    c4c0:	d9000c17 	ldw	r4,48(sp)
    c4c4:	9900420e 	bge	r19,r4,c5d0 <___vfprintf_internal_r+0x698>
    c4c8:	df000f17 	ldw	fp,60(sp)
    c4cc:	25bfffc4 	addi	r22,r4,-1
    c4d0:	00800804 	movi	r2,32
    c4d4:	d8800845 	stb	r2,33(sp)
    c4d8:	b023883a 	mov	r17,r22
    c4dc:	057fffc4 	movi	r21,-1
    c4e0:	8c7fffc4 	addi	r17,r17,-1
    c4e4:	8d403926 	beq	r17,r21,c5cc <___vfprintf_internal_r+0x694>
    c4e8:	b8800117 	ldw	r2,4(r23)
    c4ec:	e009883a 	mov	r4,fp
    c4f0:	b80b883a 	mov	r5,r23
    c4f4:	d9800844 	addi	r6,sp,33
    c4f8:	01c00044 	movi	r7,1
    c4fc:	103ee83a 	callr	r2
    c500:	103ff726 	beq	r2,zero,c4e0 <___vfprintf_internal_r+0x5a8>
    c504:	04bfffc4 	movi	r18,-1
    c508:	003ec006 	br	c00c <___vfprintf_internal_r+0xd4>
    c50c:	d9000e17 	ldw	r4,56(sp)
    c510:	d8c00e17 	ldw	r3,56(sp)
    c514:	21000017 	ldw	r4,0(r4)
    c518:	18c00104 	addi	r3,r3,4
    c51c:	d8c00e15 	stw	r3,56(sp)
    c520:	d9001215 	stw	r4,72(sp)
    c524:	000bf080 	call	bf08 <strlen>
    c528:	d9000c17 	ldw	r4,48(sp)
    c52c:	102d883a 	mov	r22,r2
    c530:	20b9c83a 	sub	fp,r4,r2
    c534:	07001b0e 	bge	zero,fp,c5a4 <___vfprintf_internal_r+0x66c>
    c538:	00800804 	movi	r2,32
    c53c:	d8800805 	stb	r2,32(sp)
    c540:	b805883a 	mov	r2,r23
    c544:	dc001115 	stw	r16,68(sp)
    c548:	b02f883a 	mov	r23,r22
    c54c:	e47fffc4 	addi	r17,fp,-1
    c550:	902d883a 	mov	r22,r18
    c554:	057fffc4 	movi	r21,-1
    c558:	dc000f17 	ldw	r16,60(sp)
    c55c:	1025883a 	mov	r18,r2
    c560:	00000206 	br	c56c <___vfprintf_internal_r+0x634>
    c564:	8c7fffc4 	addi	r17,r17,-1
    c568:	8d400826 	beq	r17,r21,c58c <___vfprintf_internal_r+0x654>
    c56c:	90800117 	ldw	r2,4(r18)
    c570:	8009883a 	mov	r4,r16
    c574:	900b883a 	mov	r5,r18
    c578:	d9800804 	addi	r6,sp,32
    c57c:	01c00044 	movi	r7,1
    c580:	103ee83a 	callr	r2
    c584:	103ff726 	beq	r2,zero,c564 <___vfprintf_internal_r+0x62c>
    c588:	003f3c06 	br	c27c <___vfprintf_internal_r+0x344>
    c58c:	dc001117 	ldw	r16,68(sp)
    c590:	9005883a 	mov	r2,r18
    c594:	b025883a 	mov	r18,r22
    c598:	9725883a 	add	r18,r18,fp
    c59c:	b82d883a 	mov	r22,r23
    c5a0:	102f883a 	mov	r23,r2
    c5a4:	b8800117 	ldw	r2,4(r23)
    c5a8:	d9000f17 	ldw	r4,60(sp)
    c5ac:	d9801217 	ldw	r6,72(sp)
    c5b0:	b80b883a 	mov	r5,r23
    c5b4:	b00f883a 	mov	r7,r22
    c5b8:	103ee83a 	callr	r2
    c5bc:	103f2f1e 	bne	r2,zero,c27c <___vfprintf_internal_r+0x344>
    c5c0:	95a5883a 	add	r18,r18,r22
    c5c4:	002b883a 	mov	r21,zero
    c5c8:	003e7606 	br	bfa4 <___vfprintf_internal_r+0x6c>
    c5cc:	95a5883a 	add	r18,r18,r22
    c5d0:	d9400e17 	ldw	r5,56(sp)
    c5d4:	b8800117 	ldw	r2,4(r23)
    c5d8:	d9000f17 	ldw	r4,60(sp)
    c5dc:	28c00017 	ldw	r3,0(r5)
    c5e0:	d9800904 	addi	r6,sp,36
    c5e4:	b80b883a 	mov	r5,r23
    c5e8:	d8c00905 	stb	r3,36(sp)
    c5ec:	d8c00e17 	ldw	r3,56(sp)
    c5f0:	01c00044 	movi	r7,1
    c5f4:	1c400104 	addi	r17,r3,4
    c5f8:	103ee83a 	callr	r2
    c5fc:	103f1f1e 	bne	r2,zero,c27c <___vfprintf_internal_r+0x344>
    c600:	94800044 	addi	r18,r18,1
    c604:	dc400e15 	stw	r17,56(sp)
    c608:	002b883a 	mov	r21,zero
    c60c:	003e6506 	br	bfa4 <___vfprintf_internal_r+0x6c>
    c610:	b8800117 	ldw	r2,4(r23)
    c614:	d9000f17 	ldw	r4,60(sp)
    c618:	00c00b44 	movi	r3,45
    c61c:	d8c00905 	stb	r3,36(sp)
    c620:	b80b883a 	mov	r5,r23
    c624:	d9800904 	addi	r6,sp,36
    c628:	01c00044 	movi	r7,1
    c62c:	103ee83a 	callr	r2
    c630:	103f121e 	bne	r2,zero,c27c <___vfprintf_internal_r+0x344>
    c634:	d8c01117 	ldw	r3,68(sp)
    c638:	94800044 	addi	r18,r18,1
    c63c:	00fefc16 	blt	zero,r3,c230 <___vfprintf_internal_r+0x2f8>
    c640:	003f5d06 	br	c3b8 <___vfprintf_internal_r+0x480>
    c644:	056bc83a 	sub	r21,zero,r21
    c648:	d8c01215 	stw	r3,72(sp)
    c64c:	003f1406 	br	c2a0 <___vfprintf_internal_r+0x368>
    c650:	d8c01117 	ldw	r3,68(sp)
    c654:	8805883a 	mov	r2,r17
    c658:	dc001217 	ldw	r16,72(sp)
    c65c:	b823883a 	mov	r17,r23
    c660:	90e5883a 	add	r18,r18,r3
    c664:	102f883a 	mov	r23,r2
    c668:	003f5306 	br	c3b8 <___vfprintf_internal_r+0x480>

0000c66c <__vfprintf_internal>:
    c66c:	00800074 	movhi	r2,1
    c670:	10ba9c04 	addi	r2,r2,-5520
    c674:	2007883a 	mov	r3,r4
    c678:	11000017 	ldw	r4,0(r2)
    c67c:	2805883a 	mov	r2,r5
    c680:	300f883a 	mov	r7,r6
    c684:	180b883a 	mov	r5,r3
    c688:	100d883a 	mov	r6,r2
    c68c:	000bf381 	jmpi	bf38 <___vfprintf_internal_r>

0000c690 <__sfvwrite_small_dev>:
    c690:	2880000b 	ldhu	r2,0(r5)
    c694:	defffa04 	addi	sp,sp,-24
    c698:	dcc00315 	stw	r19,12(sp)
    c69c:	10c0020c 	andi	r3,r2,8
    c6a0:	18ffffcc 	andi	r3,r3,65535
    c6a4:	18e0001c 	xori	r3,r3,32768
    c6a8:	dc800215 	stw	r18,8(sp)
    c6ac:	dc400115 	stw	r17,4(sp)
    c6b0:	dfc00515 	stw	ra,20(sp)
    c6b4:	dd000415 	stw	r20,16(sp)
    c6b8:	dc000015 	stw	r16,0(sp)
    c6bc:	18e00004 	addi	r3,r3,-32768
    c6c0:	2825883a 	mov	r18,r5
    c6c4:	2027883a 	mov	r19,r4
    c6c8:	3023883a 	mov	r17,r6
    c6cc:	18002626 	beq	r3,zero,c768 <__sfvwrite_small_dev+0xd8>
    c6d0:	2940008f 	ldh	r5,2(r5)
    c6d4:	28001016 	blt	r5,zero,c718 <__sfvwrite_small_dev+0x88>
    c6d8:	01c01a0e 	bge	zero,r7,c744 <__sfvwrite_small_dev+0xb4>
    c6dc:	3821883a 	mov	r16,r7
    c6e0:	05010004 	movi	r20,1024
    c6e4:	00000306 	br	c6f4 <__sfvwrite_small_dev+0x64>
    c6e8:	88a3883a 	add	r17,r17,r2
    c6ec:	0400150e 	bge	zero,r16,c744 <__sfvwrite_small_dev+0xb4>
    c6f0:	9140008f 	ldh	r5,2(r18)
    c6f4:	880d883a 	mov	r6,r17
    c6f8:	9809883a 	mov	r4,r19
    c6fc:	800f883a 	mov	r7,r16
    c700:	a400010e 	bge	r20,r16,c708 <__sfvwrite_small_dev+0x78>
    c704:	01c10004 	movi	r7,1024
    c708:	000c7700 	call	c770 <_write_r>
    c70c:	80a1c83a 	sub	r16,r16,r2
    c710:	00bff516 	blt	zero,r2,c6e8 <__sfvwrite_small_dev+0x58>
    c714:	9080000b 	ldhu	r2,0(r18)
    c718:	10801014 	ori	r2,r2,64
    c71c:	9080000d 	sth	r2,0(r18)
    c720:	00bfffc4 	movi	r2,-1
    c724:	dfc00517 	ldw	ra,20(sp)
    c728:	dd000417 	ldw	r20,16(sp)
    c72c:	dcc00317 	ldw	r19,12(sp)
    c730:	dc800217 	ldw	r18,8(sp)
    c734:	dc400117 	ldw	r17,4(sp)
    c738:	dc000017 	ldw	r16,0(sp)
    c73c:	dec00604 	addi	sp,sp,24
    c740:	f800283a 	ret
    c744:	0005883a 	mov	r2,zero
    c748:	dfc00517 	ldw	ra,20(sp)
    c74c:	dd000417 	ldw	r20,16(sp)
    c750:	dcc00317 	ldw	r19,12(sp)
    c754:	dc800217 	ldw	r18,8(sp)
    c758:	dc400117 	ldw	r17,4(sp)
    c75c:	dc000017 	ldw	r16,0(sp)
    c760:	dec00604 	addi	sp,sp,24
    c764:	f800283a 	ret
    c768:	00bfffc4 	movi	r2,-1
    c76c:	003fed06 	br	c724 <__sfvwrite_small_dev+0x94>

0000c770 <_write_r>:
    c770:	defffd04 	addi	sp,sp,-12
    c774:	dc400115 	stw	r17,4(sp)
    c778:	dc000015 	stw	r16,0(sp)
    c77c:	2023883a 	mov	r17,r4
    c780:	04000074 	movhi	r16,1
    c784:	843b8304 	addi	r16,r16,-4596
    c788:	2809883a 	mov	r4,r5
    c78c:	300b883a 	mov	r5,r6
    c790:	380d883a 	mov	r6,r7
    c794:	dfc00215 	stw	ra,8(sp)
    c798:	80000015 	stw	zero,0(r16)
    c79c:	000cfe00 	call	cfe0 <write>
    c7a0:	00ffffc4 	movi	r3,-1
    c7a4:	10c00526 	beq	r2,r3,c7bc <_write_r+0x4c>
    c7a8:	dfc00217 	ldw	ra,8(sp)
    c7ac:	dc400117 	ldw	r17,4(sp)
    c7b0:	dc000017 	ldw	r16,0(sp)
    c7b4:	dec00304 	addi	sp,sp,12
    c7b8:	f800283a 	ret
    c7bc:	80c00017 	ldw	r3,0(r16)
    c7c0:	183ff926 	beq	r3,zero,c7a8 <_write_r+0x38>
    c7c4:	88c00015 	stw	r3,0(r17)
    c7c8:	dfc00217 	ldw	ra,8(sp)
    c7cc:	dc400117 	ldw	r17,4(sp)
    c7d0:	dc000017 	ldw	r16,0(sp)
    c7d4:	dec00304 	addi	sp,sp,12
    c7d8:	f800283a 	ret

0000c7dc <udivmodsi4>:
    c7dc:	2005883a 	mov	r2,r4
    c7e0:	2900182e 	bgeu	r5,r4,c844 <udivmodsi4+0x68>
    c7e4:	28001716 	blt	r5,zero,c844 <udivmodsi4+0x68>
    c7e8:	01000804 	movi	r4,32
    c7ec:	00c00044 	movi	r3,1
    c7f0:	00000206 	br	c7fc <udivmodsi4+0x20>
    c7f4:	20001126 	beq	r4,zero,c83c <udivmodsi4+0x60>
    c7f8:	28000516 	blt	r5,zero,c810 <udivmodsi4+0x34>
    c7fc:	294b883a 	add	r5,r5,r5
    c800:	213fffc4 	addi	r4,r4,-1
    c804:	18c7883a 	add	r3,r3,r3
    c808:	28bffa36 	bltu	r5,r2,c7f4 <udivmodsi4+0x18>
    c80c:	18000b26 	beq	r3,zero,c83c <udivmodsi4+0x60>
    c810:	0009883a 	mov	r4,zero
    c814:	11400236 	bltu	r2,r5,c820 <udivmodsi4+0x44>
    c818:	1145c83a 	sub	r2,r2,r5
    c81c:	20c8b03a 	or	r4,r4,r3
    c820:	1806d07a 	srli	r3,r3,1
    c824:	280ad07a 	srli	r5,r5,1
    c828:	183ffa1e 	bne	r3,zero,c814 <udivmodsi4+0x38>
    c82c:	3000021e 	bne	r6,zero,c838 <udivmodsi4+0x5c>
    c830:	2005883a 	mov	r2,r4
    c834:	f800283a 	ret
    c838:	f800283a 	ret
    c83c:	0009883a 	mov	r4,zero
    c840:	003ffa06 	br	c82c <udivmodsi4+0x50>
    c844:	00c00044 	movi	r3,1
    c848:	0009883a 	mov	r4,zero
    c84c:	003ff106 	br	c814 <udivmodsi4+0x38>

0000c850 <__divsi3>:
    c850:	defffe04 	addi	sp,sp,-8
    c854:	dfc00115 	stw	ra,4(sp)
    c858:	dc000015 	stw	r16,0(sp)
    c85c:	20000a16 	blt	r4,zero,c888 <__divsi3+0x38>
    c860:	0021883a 	mov	r16,zero
    c864:	28000b16 	blt	r5,zero,c894 <__divsi3+0x44>
    c868:	000d883a 	mov	r6,zero
    c86c:	000c7dc0 	call	c7dc <udivmodsi4>
    c870:	80000126 	beq	r16,zero,c878 <__divsi3+0x28>
    c874:	0085c83a 	sub	r2,zero,r2
    c878:	dfc00117 	ldw	ra,4(sp)
    c87c:	dc000017 	ldw	r16,0(sp)
    c880:	dec00204 	addi	sp,sp,8
    c884:	f800283a 	ret
    c888:	0109c83a 	sub	r4,zero,r4
    c88c:	04000044 	movi	r16,1
    c890:	283ff50e 	bge	r5,zero,c868 <__divsi3+0x18>
    c894:	014bc83a 	sub	r5,zero,r5
    c898:	8400005c 	xori	r16,r16,1
    c89c:	003ff206 	br	c868 <__divsi3+0x18>

0000c8a0 <__modsi3>:
    c8a0:	deffff04 	addi	sp,sp,-4
    c8a4:	dfc00015 	stw	ra,0(sp)
    c8a8:	20000516 	blt	r4,zero,c8c0 <__modsi3+0x20>
    c8ac:	28000c16 	blt	r5,zero,c8e0 <__modsi3+0x40>
    c8b0:	01800044 	movi	r6,1
    c8b4:	dfc00017 	ldw	ra,0(sp)
    c8b8:	dec00104 	addi	sp,sp,4
    c8bc:	000c7dc1 	jmpi	c7dc <udivmodsi4>
    c8c0:	0109c83a 	sub	r4,zero,r4
    c8c4:	28000b16 	blt	r5,zero,c8f4 <__modsi3+0x54>
    c8c8:	01800044 	movi	r6,1
    c8cc:	000c7dc0 	call	c7dc <udivmodsi4>
    c8d0:	0085c83a 	sub	r2,zero,r2
    c8d4:	dfc00017 	ldw	ra,0(sp)
    c8d8:	dec00104 	addi	sp,sp,4
    c8dc:	f800283a 	ret
    c8e0:	014bc83a 	sub	r5,zero,r5
    c8e4:	01800044 	movi	r6,1
    c8e8:	dfc00017 	ldw	ra,0(sp)
    c8ec:	dec00104 	addi	sp,sp,4
    c8f0:	000c7dc1 	jmpi	c7dc <udivmodsi4>
    c8f4:	014bc83a 	sub	r5,zero,r5
    c8f8:	003ff306 	br	c8c8 <__modsi3+0x28>

0000c8fc <__udivsi3>:
    c8fc:	000d883a 	mov	r6,zero
    c900:	000c7dc1 	jmpi	c7dc <udivmodsi4>

0000c904 <__umodsi3>:
    c904:	01800044 	movi	r6,1
    c908:	000c7dc1 	jmpi	c7dc <udivmodsi4>

0000c90c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    c90c:	defffc04 	addi	sp,sp,-16
    c910:	df000315 	stw	fp,12(sp)
    c914:	df000304 	addi	fp,sp,12
    c918:	e13ffd15 	stw	r4,-12(fp)
    c91c:	e17ffe15 	stw	r5,-8(fp)
    c920:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    c924:	e0fffe17 	ldw	r3,-8(fp)
    c928:	e0bffd17 	ldw	r2,-12(fp)
    c92c:	18800e26 	beq	r3,r2,c968 <alt_load_section+0x5c>
  {
    while( to != end )
    c930:	00000a06 	br	c95c <alt_load_section+0x50>
    {
      *to++ = *from++;
    c934:	e0bffd17 	ldw	r2,-12(fp)
    c938:	10c00017 	ldw	r3,0(r2)
    c93c:	e0bffe17 	ldw	r2,-8(fp)
    c940:	10c00015 	stw	r3,0(r2)
    c944:	e0bffe17 	ldw	r2,-8(fp)
    c948:	10800104 	addi	r2,r2,4
    c94c:	e0bffe15 	stw	r2,-8(fp)
    c950:	e0bffd17 	ldw	r2,-12(fp)
    c954:	10800104 	addi	r2,r2,4
    c958:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    c95c:	e0fffe17 	ldw	r3,-8(fp)
    c960:	e0bfff17 	ldw	r2,-4(fp)
    c964:	18bff31e 	bne	r3,r2,c934 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    c968:	e037883a 	mov	sp,fp
    c96c:	df000017 	ldw	fp,0(sp)
    c970:	dec00104 	addi	sp,sp,4
    c974:	f800283a 	ret

0000c978 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    c978:	defffe04 	addi	sp,sp,-8
    c97c:	dfc00115 	stw	ra,4(sp)
    c980:	df000015 	stw	fp,0(sp)
    c984:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    c988:	01000074 	movhi	r4,1
    c98c:	213aa604 	addi	r4,r4,-5480
    c990:	01400074 	movhi	r5,1
    c994:	2979d504 	addi	r5,r5,-6316
    c998:	01800074 	movhi	r6,1
    c99c:	31baa604 	addi	r6,r6,-5480
    c9a0:	000c90c0 	call	c90c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    c9a4:	01000074 	movhi	r4,1
    c9a8:	21200804 	addi	r4,r4,-32736
    c9ac:	01400074 	movhi	r5,1
    c9b0:	29600804 	addi	r5,r5,-32736
    c9b4:	01800074 	movhi	r6,1
    c9b8:	31a06e04 	addi	r6,r6,-32328
    c9bc:	000c90c0 	call	c90c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    c9c0:	01000074 	movhi	r4,1
    c9c4:	21396e04 	addi	r4,r4,-6728
    c9c8:	01400074 	movhi	r5,1
    c9cc:	29796e04 	addi	r5,r5,-6728
    c9d0:	01800074 	movhi	r6,1
    c9d4:	31b9d504 	addi	r6,r6,-6316
    c9d8:	000c90c0 	call	c90c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    c9dc:	000d8f40 	call	d8f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    c9e0:	000dca40 	call	dca4 <alt_icache_flush_all>
}
    c9e4:	e037883a 	mov	sp,fp
    c9e8:	dfc00117 	ldw	ra,4(sp)
    c9ec:	df000017 	ldw	fp,0(sp)
    c9f0:	dec00204 	addi	sp,sp,8
    c9f4:	f800283a 	ret

0000c9f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    c9f8:	defffd04 	addi	sp,sp,-12
    c9fc:	dfc00215 	stw	ra,8(sp)
    ca00:	df000115 	stw	fp,4(sp)
    ca04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ca08:	0009883a 	mov	r4,zero
    ca0c:	000d1080 	call	d108 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ca10:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ca14:	000d13c0 	call	d13c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ca18:	01000074 	movhi	r4,1
    ca1c:	2139c704 	addi	r4,r4,-6372
    ca20:	01400074 	movhi	r5,1
    ca24:	2979c704 	addi	r5,r5,-6372
    ca28:	01800074 	movhi	r6,1
    ca2c:	31b9c704 	addi	r6,r6,-6372
    ca30:	000e07c0 	call	e07c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ca34:	d120f717 	ldw	r4,-31780(gp)
    ca38:	d0e0f817 	ldw	r3,-31776(gp)
    ca3c:	d0a0f917 	ldw	r2,-31772(gp)
    ca40:	180b883a 	mov	r5,r3
    ca44:	100d883a 	mov	r6,r2
    ca48:	0009fbc0 	call	9fbc <main>
    ca4c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ca50:	01000044 	movi	r4,1
    ca54:	000d8280 	call	d828 <close>
  exit (result);
    ca58:	e13fff17 	ldw	r4,-4(fp)
    ca5c:	000e33c0 	call	e33c <exit>

0000ca60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ca60:	defffe04 	addi	sp,sp,-8
    ca64:	dfc00115 	stw	ra,4(sp)
    ca68:	df000015 	stw	fp,0(sp)
    ca6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ca70:	00800074 	movhi	r2,1
    ca74:	10baa204 	addi	r2,r2,-5496
    ca78:	10800017 	ldw	r2,0(r2)
    ca7c:	10000526 	beq	r2,zero,ca94 <alt_get_errno+0x34>
    ca80:	00800074 	movhi	r2,1
    ca84:	10baa204 	addi	r2,r2,-5496
    ca88:	10800017 	ldw	r2,0(r2)
    ca8c:	103ee83a 	callr	r2
    ca90:	00000206 	br	ca9c <alt_get_errno+0x3c>
    ca94:	00800074 	movhi	r2,1
    ca98:	10bb8304 	addi	r2,r2,-4596
}
    ca9c:	e037883a 	mov	sp,fp
    caa0:	dfc00117 	ldw	ra,4(sp)
    caa4:	df000017 	ldw	fp,0(sp)
    caa8:	dec00204 	addi	sp,sp,8
    caac:	f800283a 	ret

0000cab0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    cab0:	defffb04 	addi	sp,sp,-20
    cab4:	dfc00415 	stw	ra,16(sp)
    cab8:	df000315 	stw	fp,12(sp)
    cabc:	dc000215 	stw	r16,8(sp)
    cac0:	df000204 	addi	fp,sp,8
    cac4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    cac8:	e0bfff17 	ldw	r2,-4(fp)
    cacc:	10800217 	ldw	r2,8(r2)
    cad0:	10d00034 	orhi	r3,r2,16384
    cad4:	e0bfff17 	ldw	r2,-4(fp)
    cad8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    cadc:	e03ffe15 	stw	zero,-8(fp)
    cae0:	00002206 	br	cb6c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    cae4:	04000074 	movhi	r16,1
    cae8:	843a2d04 	addi	r16,r16,-5964
    caec:	e0bffe17 	ldw	r2,-8(fp)
    caf0:	1009883a 	mov	r4,r2
    caf4:	01400304 	movi	r5,12
    caf8:	000b5280 	call	b528 <__mulsi3>
    cafc:	8085883a 	add	r2,r16,r2
    cb00:	10c00017 	ldw	r3,0(r2)
    cb04:	e0bfff17 	ldw	r2,-4(fp)
    cb08:	10800017 	ldw	r2,0(r2)
    cb0c:	1880141e 	bne	r3,r2,cb60 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    cb10:	04000074 	movhi	r16,1
    cb14:	843a2d04 	addi	r16,r16,-5964
    cb18:	e0bffe17 	ldw	r2,-8(fp)
    cb1c:	1009883a 	mov	r4,r2
    cb20:	01400304 	movi	r5,12
    cb24:	000b5280 	call	b528 <__mulsi3>
    cb28:	8085883a 	add	r2,r16,r2
    cb2c:	10800204 	addi	r2,r2,8
    cb30:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    cb34:	10000a0e 	bge	r2,zero,cb60 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    cb38:	e13ffe17 	ldw	r4,-8(fp)
    cb3c:	01400304 	movi	r5,12
    cb40:	000b5280 	call	b528 <__mulsi3>
    cb44:	00c00074 	movhi	r3,1
    cb48:	18fa2d04 	addi	r3,r3,-5964
    cb4c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    cb50:	e0bfff17 	ldw	r2,-4(fp)
    cb54:	18800226 	beq	r3,r2,cb60 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    cb58:	00bffcc4 	movi	r2,-13
    cb5c:	00000a06 	br	cb88 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    cb60:	e0bffe17 	ldw	r2,-8(fp)
    cb64:	10800044 	addi	r2,r2,1
    cb68:	e0bffe15 	stw	r2,-8(fp)
    cb6c:	00800074 	movhi	r2,1
    cb70:	10baa104 	addi	r2,r2,-5500
    cb74:	10800017 	ldw	r2,0(r2)
    cb78:	1007883a 	mov	r3,r2
    cb7c:	e0bffe17 	ldw	r2,-8(fp)
    cb80:	18bfd82e 	bgeu	r3,r2,cae4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    cb84:	0005883a 	mov	r2,zero
}
    cb88:	e037883a 	mov	sp,fp
    cb8c:	dfc00217 	ldw	ra,8(sp)
    cb90:	df000117 	ldw	fp,4(sp)
    cb94:	dc000017 	ldw	r16,0(sp)
    cb98:	dec00304 	addi	sp,sp,12
    cb9c:	f800283a 	ret

0000cba0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    cba0:	defff604 	addi	sp,sp,-40
    cba4:	dfc00915 	stw	ra,36(sp)
    cba8:	df000815 	stw	fp,32(sp)
    cbac:	df000804 	addi	fp,sp,32
    cbb0:	e13ffd15 	stw	r4,-12(fp)
    cbb4:	e17ffe15 	stw	r5,-8(fp)
    cbb8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    cbbc:	00bfffc4 	movi	r2,-1
    cbc0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    cbc4:	00bffb44 	movi	r2,-19
    cbc8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    cbcc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    cbd0:	e13ffd17 	ldw	r4,-12(fp)
    cbd4:	01400074 	movhi	r5,1
    cbd8:	297a9f04 	addi	r5,r5,-5508
    cbdc:	000da2c0 	call	da2c <alt_find_dev>
    cbe0:	e0bff815 	stw	r2,-32(fp)
    cbe4:	e0bff817 	ldw	r2,-32(fp)
    cbe8:	1000051e 	bne	r2,zero,cc00 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    cbec:	e13ffd17 	ldw	r4,-12(fp)
    cbf0:	000dabc0 	call	dabc <alt_find_file>
    cbf4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    cbf8:	00800044 	movi	r2,1
    cbfc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    cc00:	e0bff817 	ldw	r2,-32(fp)
    cc04:	10002a26 	beq	r2,zero,ccb0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    cc08:	e13ff817 	ldw	r4,-32(fp)
    cc0c:	000dbd00 	call	dbd0 <alt_get_fd>
    cc10:	e0bff915 	stw	r2,-28(fp)
    cc14:	e0bff917 	ldw	r2,-28(fp)
    cc18:	1000030e 	bge	r2,zero,cc28 <open+0x88>
    {
      status = index;
    cc1c:	e0bff917 	ldw	r2,-28(fp)
    cc20:	e0bffa15 	stw	r2,-24(fp)
    cc24:	00002406 	br	ccb8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    cc28:	e13ff917 	ldw	r4,-28(fp)
    cc2c:	01400304 	movi	r5,12
    cc30:	000b5280 	call	b528 <__mulsi3>
    cc34:	00c00074 	movhi	r3,1
    cc38:	18fa2d04 	addi	r3,r3,-5964
    cc3c:	10c5883a 	add	r2,r2,r3
    cc40:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    cc44:	e0fffe17 	ldw	r3,-8(fp)
    cc48:	00900034 	movhi	r2,16384
    cc4c:	10bfffc4 	addi	r2,r2,-1
    cc50:	1886703a 	and	r3,r3,r2
    cc54:	e0bffc17 	ldw	r2,-16(fp)
    cc58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    cc5c:	e0bffb17 	ldw	r2,-20(fp)
    cc60:	1000051e 	bne	r2,zero,cc78 <open+0xd8>
    cc64:	e13ffc17 	ldw	r4,-16(fp)
    cc68:	000cab00 	call	cab0 <alt_file_locked>
    cc6c:	e0bffa15 	stw	r2,-24(fp)
    cc70:	e0bffa17 	ldw	r2,-24(fp)
    cc74:	10001016 	blt	r2,zero,ccb8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    cc78:	e0bff817 	ldw	r2,-32(fp)
    cc7c:	10800317 	ldw	r2,12(r2)
    cc80:	10000826 	beq	r2,zero,cca4 <open+0x104>
    cc84:	e0bff817 	ldw	r2,-32(fp)
    cc88:	10800317 	ldw	r2,12(r2)
    cc8c:	e13ffc17 	ldw	r4,-16(fp)
    cc90:	e17ffd17 	ldw	r5,-12(fp)
    cc94:	e1bffe17 	ldw	r6,-8(fp)
    cc98:	e1ffff17 	ldw	r7,-4(fp)
    cc9c:	103ee83a 	callr	r2
    cca0:	00000106 	br	cca8 <open+0x108>
    cca4:	0005883a 	mov	r2,zero
    cca8:	e0bffa15 	stw	r2,-24(fp)
    ccac:	00000206 	br	ccb8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ccb0:	00bffb44 	movi	r2,-19
    ccb4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ccb8:	e0bffa17 	ldw	r2,-24(fp)
    ccbc:	1000080e 	bge	r2,zero,cce0 <open+0x140>
  {
    alt_release_fd (index);  
    ccc0:	e13ff917 	ldw	r4,-28(fp)
    ccc4:	000ce3c0 	call	ce3c <alt_release_fd>
    ALT_ERRNO = -status;
    ccc8:	000ca600 	call	ca60 <alt_get_errno>
    cccc:	e0fffa17 	ldw	r3,-24(fp)
    ccd0:	00c7c83a 	sub	r3,zero,r3
    ccd4:	10c00015 	stw	r3,0(r2)
    return -1;
    ccd8:	00bfffc4 	movi	r2,-1
    ccdc:	00000106 	br	cce4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    cce0:	e0bff917 	ldw	r2,-28(fp)
}
    cce4:	e037883a 	mov	sp,fp
    cce8:	dfc00117 	ldw	ra,4(sp)
    ccec:	df000017 	ldw	fp,0(sp)
    ccf0:	dec00204 	addi	sp,sp,8
    ccf4:	f800283a 	ret

0000ccf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ccf8:	defffe04 	addi	sp,sp,-8
    ccfc:	dfc00115 	stw	ra,4(sp)
    cd00:	df000015 	stw	fp,0(sp)
    cd04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cd08:	00800074 	movhi	r2,1
    cd0c:	10baa204 	addi	r2,r2,-5496
    cd10:	10800017 	ldw	r2,0(r2)
    cd14:	10000526 	beq	r2,zero,cd2c <alt_get_errno+0x34>
    cd18:	00800074 	movhi	r2,1
    cd1c:	10baa204 	addi	r2,r2,-5496
    cd20:	10800017 	ldw	r2,0(r2)
    cd24:	103ee83a 	callr	r2
    cd28:	00000206 	br	cd34 <alt_get_errno+0x3c>
    cd2c:	00800074 	movhi	r2,1
    cd30:	10bb8304 	addi	r2,r2,-4596
}
    cd34:	e037883a 	mov	sp,fp
    cd38:	dfc00117 	ldw	ra,4(sp)
    cd3c:	df000017 	ldw	fp,0(sp)
    cd40:	dec00204 	addi	sp,sp,8
    cd44:	f800283a 	ret

0000cd48 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    cd48:	defff904 	addi	sp,sp,-28
    cd4c:	dfc00615 	stw	ra,24(sp)
    cd50:	df000515 	stw	fp,20(sp)
    cd54:	df000504 	addi	fp,sp,20
    cd58:	e13ffd15 	stw	r4,-12(fp)
    cd5c:	e17ffe15 	stw	r5,-8(fp)
    cd60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cd64:	e0bffd17 	ldw	r2,-12(fp)
    cd68:	10000716 	blt	r2,zero,cd88 <read+0x40>
    cd6c:	e13ffd17 	ldw	r4,-12(fp)
    cd70:	01400304 	movi	r5,12
    cd74:	000b5280 	call	b528 <__mulsi3>
    cd78:	00c00074 	movhi	r3,1
    cd7c:	18fa2d04 	addi	r3,r3,-5964
    cd80:	10c5883a 	add	r2,r2,r3
    cd84:	00000106 	br	cd8c <read+0x44>
    cd88:	0005883a 	mov	r2,zero
    cd8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    cd90:	e0bffb17 	ldw	r2,-20(fp)
    cd94:	10002026 	beq	r2,zero,ce18 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    cd98:	e0bffb17 	ldw	r2,-20(fp)
    cd9c:	10800217 	ldw	r2,8(r2)
    cda0:	108000cc 	andi	r2,r2,3
    cda4:	10800060 	cmpeqi	r2,r2,1
    cda8:	1000171e 	bne	r2,zero,ce08 <read+0xc0>
        (fd->dev->read))
    cdac:	e0bffb17 	ldw	r2,-20(fp)
    cdb0:	10800017 	ldw	r2,0(r2)
    cdb4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    cdb8:	10001326 	beq	r2,zero,ce08 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    cdbc:	e0bffb17 	ldw	r2,-20(fp)
    cdc0:	10800017 	ldw	r2,0(r2)
    cdc4:	10c00517 	ldw	r3,20(r2)
    cdc8:	e0bfff17 	ldw	r2,-4(fp)
    cdcc:	e13ffb17 	ldw	r4,-20(fp)
    cdd0:	e17ffe17 	ldw	r5,-8(fp)
    cdd4:	100d883a 	mov	r6,r2
    cdd8:	183ee83a 	callr	r3
    cddc:	e0bffc15 	stw	r2,-16(fp)
    cde0:	e0bffc17 	ldw	r2,-16(fp)
    cde4:	1000060e 	bge	r2,zero,ce00 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    cde8:	000ccf80 	call	ccf8 <alt_get_errno>
    cdec:	e0fffc17 	ldw	r3,-16(fp)
    cdf0:	00c7c83a 	sub	r3,zero,r3
    cdf4:	10c00015 	stw	r3,0(r2)
          return -1;
    cdf8:	00bfffc4 	movi	r2,-1
    cdfc:	00000a06 	br	ce28 <read+0xe0>
        }
        return rval;
    ce00:	e0bffc17 	ldw	r2,-16(fp)
    ce04:	00000806 	br	ce28 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ce08:	000ccf80 	call	ccf8 <alt_get_errno>
    ce0c:	00c00344 	movi	r3,13
    ce10:	10c00015 	stw	r3,0(r2)
    ce14:	00000306 	br	ce24 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ce18:	000ccf80 	call	ccf8 <alt_get_errno>
    ce1c:	00c01444 	movi	r3,81
    ce20:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    ce24:	00bfffc4 	movi	r2,-1
}
    ce28:	e037883a 	mov	sp,fp
    ce2c:	dfc00117 	ldw	ra,4(sp)
    ce30:	df000017 	ldw	fp,0(sp)
    ce34:	dec00204 	addi	sp,sp,8
    ce38:	f800283a 	ret

0000ce3c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ce3c:	defffc04 	addi	sp,sp,-16
    ce40:	dfc00315 	stw	ra,12(sp)
    ce44:	df000215 	stw	fp,8(sp)
    ce48:	dc000115 	stw	r16,4(sp)
    ce4c:	df000104 	addi	fp,sp,4
    ce50:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ce54:	e0bfff17 	ldw	r2,-4(fp)
    ce58:	108000d0 	cmplti	r2,r2,3
    ce5c:	1000111e 	bne	r2,zero,cea4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    ce60:	04000074 	movhi	r16,1
    ce64:	843a2d04 	addi	r16,r16,-5964
    ce68:	e0bfff17 	ldw	r2,-4(fp)
    ce6c:	1009883a 	mov	r4,r2
    ce70:	01400304 	movi	r5,12
    ce74:	000b5280 	call	b528 <__mulsi3>
    ce78:	8085883a 	add	r2,r16,r2
    ce7c:	10800204 	addi	r2,r2,8
    ce80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ce84:	04000074 	movhi	r16,1
    ce88:	843a2d04 	addi	r16,r16,-5964
    ce8c:	e0bfff17 	ldw	r2,-4(fp)
    ce90:	1009883a 	mov	r4,r2
    ce94:	01400304 	movi	r5,12
    ce98:	000b5280 	call	b528 <__mulsi3>
    ce9c:	8085883a 	add	r2,r16,r2
    cea0:	10000015 	stw	zero,0(r2)
  }
}
    cea4:	e037883a 	mov	sp,fp
    cea8:	dfc00217 	ldw	ra,8(sp)
    ceac:	df000117 	ldw	fp,4(sp)
    ceb0:	dc000017 	ldw	r16,0(sp)
    ceb4:	dec00304 	addi	sp,sp,12
    ceb8:	f800283a 	ret

0000cebc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cebc:	defffe04 	addi	sp,sp,-8
    cec0:	dfc00115 	stw	ra,4(sp)
    cec4:	df000015 	stw	fp,0(sp)
    cec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cecc:	00800074 	movhi	r2,1
    ced0:	10baa204 	addi	r2,r2,-5496
    ced4:	10800017 	ldw	r2,0(r2)
    ced8:	10000526 	beq	r2,zero,cef0 <alt_get_errno+0x34>
    cedc:	00800074 	movhi	r2,1
    cee0:	10baa204 	addi	r2,r2,-5496
    cee4:	10800017 	ldw	r2,0(r2)
    cee8:	103ee83a 	callr	r2
    ceec:	00000206 	br	cef8 <alt_get_errno+0x3c>
    cef0:	00800074 	movhi	r2,1
    cef4:	10bb8304 	addi	r2,r2,-4596
}
    cef8:	e037883a 	mov	sp,fp
    cefc:	dfc00117 	ldw	ra,4(sp)
    cf00:	df000017 	ldw	fp,0(sp)
    cf04:	dec00204 	addi	sp,sp,8
    cf08:	f800283a 	ret

0000cf0c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
    cf0c:	defffc04 	addi	sp,sp,-16
    cf10:	dfc00315 	stw	ra,12(sp)
    cf14:	df000215 	stw	fp,8(sp)
    cf18:	df000204 	addi	fp,sp,8
    cf1c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    cf20:	00800074 	movhi	r2,1
    cf24:	10bb8904 	addi	r2,r2,-4572
    cf28:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
    cf2c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    cf30:	00800074 	movhi	r2,1
    cf34:	10bb8804 	addi	r2,r2,-4576
    cf38:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
    cf3c:	1000051e 	bne	r2,zero,cf54 <times+0x48>
  {
    ALT_ERRNO = ENOSYS;
    cf40:	000cebc0 	call	cebc <alt_get_errno>
    cf44:	00c01604 	movi	r3,88
    cf48:	10c00015 	stw	r3,0(r2)
    return 0;
    cf4c:	0005883a 	mov	r2,zero
    cf50:	00000a06 	br	cf7c <times+0x70>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
    cf54:	e0bfff17 	ldw	r2,-4(fp)
    cf58:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
    cf5c:	e0bfff17 	ldw	r2,-4(fp)
    cf60:	e0fffe17 	ldw	r3,-8(fp)
    cf64:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
    cf68:	e0bfff17 	ldw	r2,-4(fp)
    cf6c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
    cf70:	e0bfff17 	ldw	r2,-4(fp)
    cf74:	10000315 	stw	zero,12(r2)

  return ticks;
    cf78:	e0bffe17 	ldw	r2,-8(fp)
}
    cf7c:	e037883a 	mov	sp,fp
    cf80:	dfc00117 	ldw	ra,4(sp)
    cf84:	df000017 	ldw	fp,0(sp)
    cf88:	dec00204 	addi	sp,sp,8
    cf8c:	f800283a 	ret

0000cf90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf90:	defffe04 	addi	sp,sp,-8
    cf94:	dfc00115 	stw	ra,4(sp)
    cf98:	df000015 	stw	fp,0(sp)
    cf9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cfa0:	00800074 	movhi	r2,1
    cfa4:	10baa204 	addi	r2,r2,-5496
    cfa8:	10800017 	ldw	r2,0(r2)
    cfac:	10000526 	beq	r2,zero,cfc4 <alt_get_errno+0x34>
    cfb0:	00800074 	movhi	r2,1
    cfb4:	10baa204 	addi	r2,r2,-5496
    cfb8:	10800017 	ldw	r2,0(r2)
    cfbc:	103ee83a 	callr	r2
    cfc0:	00000206 	br	cfcc <alt_get_errno+0x3c>
    cfc4:	00800074 	movhi	r2,1
    cfc8:	10bb8304 	addi	r2,r2,-4596
}
    cfcc:	e037883a 	mov	sp,fp
    cfd0:	dfc00117 	ldw	ra,4(sp)
    cfd4:	df000017 	ldw	fp,0(sp)
    cfd8:	dec00204 	addi	sp,sp,8
    cfdc:	f800283a 	ret

0000cfe0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    cfe0:	defff904 	addi	sp,sp,-28
    cfe4:	dfc00615 	stw	ra,24(sp)
    cfe8:	df000515 	stw	fp,20(sp)
    cfec:	df000504 	addi	fp,sp,20
    cff0:	e13ffd15 	stw	r4,-12(fp)
    cff4:	e17ffe15 	stw	r5,-8(fp)
    cff8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cffc:	e0bffd17 	ldw	r2,-12(fp)
    d000:	10000716 	blt	r2,zero,d020 <write+0x40>
    d004:	e13ffd17 	ldw	r4,-12(fp)
    d008:	01400304 	movi	r5,12
    d00c:	000b5280 	call	b528 <__mulsi3>
    d010:	00c00074 	movhi	r3,1
    d014:	18fa2d04 	addi	r3,r3,-5964
    d018:	10c5883a 	add	r2,r2,r3
    d01c:	00000106 	br	d024 <write+0x44>
    d020:	0005883a 	mov	r2,zero
    d024:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d028:	e0bffb17 	ldw	r2,-20(fp)
    d02c:	10001f26 	beq	r2,zero,d0ac <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d030:	e0bffb17 	ldw	r2,-20(fp)
    d034:	10800217 	ldw	r2,8(r2)
    d038:	108000cc 	andi	r2,r2,3
    d03c:	10001726 	beq	r2,zero,d09c <write+0xbc>
    d040:	e0bffb17 	ldw	r2,-20(fp)
    d044:	10800017 	ldw	r2,0(r2)
    d048:	10800617 	ldw	r2,24(r2)
    d04c:	10001326 	beq	r2,zero,d09c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d050:	e0bffb17 	ldw	r2,-20(fp)
    d054:	10800017 	ldw	r2,0(r2)
    d058:	10c00617 	ldw	r3,24(r2)
    d05c:	e0bfff17 	ldw	r2,-4(fp)
    d060:	e13ffb17 	ldw	r4,-20(fp)
    d064:	e17ffe17 	ldw	r5,-8(fp)
    d068:	100d883a 	mov	r6,r2
    d06c:	183ee83a 	callr	r3
    d070:	e0bffc15 	stw	r2,-16(fp)
    d074:	e0bffc17 	ldw	r2,-16(fp)
    d078:	1000060e 	bge	r2,zero,d094 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d07c:	000cf900 	call	cf90 <alt_get_errno>
    d080:	e0fffc17 	ldw	r3,-16(fp)
    d084:	00c7c83a 	sub	r3,zero,r3
    d088:	10c00015 	stw	r3,0(r2)
        return -1;
    d08c:	00bfffc4 	movi	r2,-1
    d090:	00000a06 	br	d0bc <write+0xdc>
      }
      return rval;
    d094:	e0bffc17 	ldw	r2,-16(fp)
    d098:	00000806 	br	d0bc <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d09c:	000cf900 	call	cf90 <alt_get_errno>
    d0a0:	00c00344 	movi	r3,13
    d0a4:	10c00015 	stw	r3,0(r2)
    d0a8:	00000306 	br	d0b8 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d0ac:	000cf900 	call	cf90 <alt_get_errno>
    d0b0:	00c01444 	movi	r3,81
    d0b4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    d0b8:	00bfffc4 	movi	r2,-1
}
    d0bc:	e037883a 	mov	sp,fp
    d0c0:	dfc00117 	ldw	ra,4(sp)
    d0c4:	df000017 	ldw	fp,0(sp)
    d0c8:	dec00204 	addi	sp,sp,8
    d0cc:	f800283a 	ret

0000d0d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d0d0:	defffd04 	addi	sp,sp,-12
    d0d4:	dfc00215 	stw	ra,8(sp)
    d0d8:	df000115 	stw	fp,4(sp)
    d0dc:	df000104 	addi	fp,sp,4
    d0e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d0e4:	e13fff17 	ldw	r4,-4(fp)
    d0e8:	01400074 	movhi	r5,1
    d0ec:	297a9f04 	addi	r5,r5,-5508
    d0f0:	000d98c0 	call	d98c <alt_dev_llist_insert>
}
    d0f4:	e037883a 	mov	sp,fp
    d0f8:	dfc00117 	ldw	ra,4(sp)
    d0fc:	df000017 	ldw	fp,0(sp)
    d100:	dec00204 	addi	sp,sp,8
    d104:	f800283a 	ret

0000d108 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d108:	defffd04 	addi	sp,sp,-12
    d10c:	dfc00215 	stw	ra,8(sp)
    d110:	df000115 	stw	fp,4(sp)
    d114:	df000104 	addi	fp,sp,4
    d118:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    d11c:	000e2900 	call	e290 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d120:	00800044 	movi	r2,1
    d124:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d128:	e037883a 	mov	sp,fp
    d12c:	dfc00117 	ldw	ra,4(sp)
    d130:	df000017 	ldw	fp,0(sp)
    d134:	dec00204 	addi	sp,sp,8
    d138:	f800283a 	ret

0000d13c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d13c:	defffe04 	addi	sp,sp,-8
    d140:	dfc00115 	stw	ra,4(sp)
    d144:	df000015 	stw	fp,0(sp)
    d148:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    d14c:	01000074 	movhi	r4,1
    d150:	21050804 	addi	r4,r4,5152
    d154:	000b883a 	mov	r5,zero
    d158:	01800044 	movi	r6,1
    d15c:	01c0fa04 	movi	r7,1000
    d160:	000d4540 	call	d454 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    d164:	01000074 	movhi	r4,1
    d168:	213a0d04 	addi	r4,r4,-6092
    d16c:	000d0d00 	call	d0d0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    d170:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    d174:	01000074 	movhi	r4,1
    d178:	213a1804 	addi	r4,r4,-6048
    d17c:	000d0d00 	call	d0d0 <alt_dev_reg>
}
    d180:	e037883a 	mov	sp,fp
    d184:	dfc00117 	ldw	ra,4(sp)
    d188:	df000017 	ldw	fp,0(sp)
    d18c:	dec00204 	addi	sp,sp,8
    d190:	f800283a 	ret

0000d194 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d194:	defffa04 	addi	sp,sp,-24
    d198:	dfc00515 	stw	ra,20(sp)
    d19c:	df000415 	stw	fp,16(sp)
    d1a0:	df000404 	addi	fp,sp,16
    d1a4:	e13ffd15 	stw	r4,-12(fp)
    d1a8:	e17ffe15 	stw	r5,-8(fp)
    d1ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d1b0:	e0bffd17 	ldw	r2,-12(fp)
    d1b4:	10800017 	ldw	r2,0(r2)
    d1b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d1bc:	e0bffc17 	ldw	r2,-16(fp)
    d1c0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    d1c4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d1c8:	10800217 	ldw	r2,8(r2)
    d1cc:	1809883a 	mov	r4,r3
    d1d0:	e17ffe17 	ldw	r5,-8(fp)
    d1d4:	e1bfff17 	ldw	r6,-4(fp)
    d1d8:	100f883a 	mov	r7,r2
    d1dc:	000d2540 	call	d254 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d1e0:	e037883a 	mov	sp,fp
    d1e4:	dfc00117 	ldw	ra,4(sp)
    d1e8:	df000017 	ldw	fp,0(sp)
    d1ec:	dec00204 	addi	sp,sp,8
    d1f0:	f800283a 	ret

0000d1f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d1f4:	defffa04 	addi	sp,sp,-24
    d1f8:	dfc00515 	stw	ra,20(sp)
    d1fc:	df000415 	stw	fp,16(sp)
    d200:	df000404 	addi	fp,sp,16
    d204:	e13ffd15 	stw	r4,-12(fp)
    d208:	e17ffe15 	stw	r5,-8(fp)
    d20c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d210:	e0bffd17 	ldw	r2,-12(fp)
    d214:	10800017 	ldw	r2,0(r2)
    d218:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d21c:	e0bffc17 	ldw	r2,-16(fp)
    d220:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    d224:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d228:	10800217 	ldw	r2,8(r2)
    d22c:	1809883a 	mov	r4,r3
    d230:	e17ffe17 	ldw	r5,-8(fp)
    d234:	e1bfff17 	ldw	r6,-4(fp)
    d238:	100f883a 	mov	r7,r2
    d23c:	000d3480 	call	d348 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d240:	e037883a 	mov	sp,fp
    d244:	dfc00117 	ldw	ra,4(sp)
    d248:	df000017 	ldw	fp,0(sp)
    d24c:	dec00204 	addi	sp,sp,8
    d250:	f800283a 	ret

0000d254 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    d254:	defff704 	addi	sp,sp,-36
    d258:	df000815 	stw	fp,32(sp)
    d25c:	df000804 	addi	fp,sp,32
    d260:	e13ffc15 	stw	r4,-16(fp)
    d264:	e17ffd15 	stw	r5,-12(fp)
    d268:	e1bffe15 	stw	r6,-8(fp)
    d26c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    d270:	e0bffc17 	ldw	r2,-16(fp)
    d274:	10800017 	ldw	r2,0(r2)
    d278:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    d27c:	e0bffd17 	ldw	r2,-12(fp)
    d280:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    d284:	e0bffe17 	ldw	r2,-8(fp)
    d288:	e0fffd17 	ldw	r3,-12(fp)
    d28c:	1885883a 	add	r2,r3,r2
    d290:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    d294:	00001406 	br	d2e8 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    d298:	e0bff917 	ldw	r2,-28(fp)
    d29c:	10800037 	ldwio	r2,0(r2)
    d2a0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    d2a4:	e0bffb17 	ldw	r2,-20(fp)
    d2a8:	10a0000c 	andi	r2,r2,32768
    d2ac:	10000826 	beq	r2,zero,d2d0 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    d2b0:	e0bffb17 	ldw	r2,-20(fp)
    d2b4:	1007883a 	mov	r3,r2
    d2b8:	e0bff817 	ldw	r2,-32(fp)
    d2bc:	10c00005 	stb	r3,0(r2)
    d2c0:	e0bff817 	ldw	r2,-32(fp)
    d2c4:	10800044 	addi	r2,r2,1
    d2c8:	e0bff815 	stw	r2,-32(fp)
    d2cc:	00000606 	br	d2e8 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    d2d0:	e0fff817 	ldw	r3,-32(fp)
    d2d4:	e0bffd17 	ldw	r2,-12(fp)
    d2d8:	1880071e 	bne	r3,r2,d2f8 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    d2dc:	e0bfff17 	ldw	r2,-4(fp)
    d2e0:	1090000c 	andi	r2,r2,16384
    d2e4:	1000061e 	bne	r2,zero,d300 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    d2e8:	e0fff817 	ldw	r3,-32(fp)
    d2ec:	e0bffa17 	ldw	r2,-24(fp)
    d2f0:	18bfe936 	bltu	r3,r2,d298 <altera_avalon_jtag_uart_read+0x44>
    d2f4:	00000306 	br	d304 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    d2f8:	0001883a 	nop
    d2fc:	00000106 	br	d304 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    d300:	0001883a 	nop
    
  }

  if (ptr != buffer)
    d304:	e0fff817 	ldw	r3,-32(fp)
    d308:	e0bffd17 	ldw	r2,-12(fp)
    d30c:	18800426 	beq	r3,r2,d320 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    d310:	e0fff817 	ldw	r3,-32(fp)
    d314:	e0bffd17 	ldw	r2,-12(fp)
    d318:	1885c83a 	sub	r2,r3,r2
    d31c:	00000606 	br	d338 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    d320:	e0bfff17 	ldw	r2,-4(fp)
    d324:	1090000c 	andi	r2,r2,16384
    d328:	10000226 	beq	r2,zero,d334 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    d32c:	00bffd44 	movi	r2,-11
    d330:	00000106 	br	d338 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    d334:	00bffec4 	movi	r2,-5
}
    d338:	e037883a 	mov	sp,fp
    d33c:	df000017 	ldw	fp,0(sp)
    d340:	dec00104 	addi	sp,sp,4
    d344:	f800283a 	ret

0000d348 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    d348:	defff904 	addi	sp,sp,-28
    d34c:	df000615 	stw	fp,24(sp)
    d350:	df000604 	addi	fp,sp,24
    d354:	e13ffc15 	stw	r4,-16(fp)
    d358:	e17ffd15 	stw	r5,-12(fp)
    d35c:	e1bffe15 	stw	r6,-8(fp)
    d360:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    d364:	e0bffc17 	ldw	r2,-16(fp)
    d368:	10800017 	ldw	r2,0(r2)
    d36c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    d370:	e0bffe17 	ldw	r2,-8(fp)
    d374:	e0fffd17 	ldw	r3,-12(fp)
    d378:	1885883a 	add	r2,r3,r2
    d37c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    d380:	00000f06 	br	d3c0 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    d384:	e0bffa17 	ldw	r2,-24(fp)
    d388:	10800104 	addi	r2,r2,4
    d38c:	10800037 	ldwio	r2,0(r2)
    d390:	10bfffec 	andhi	r2,r2,65535
    d394:	10000a26 	beq	r2,zero,d3c0 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    d398:	e0bffa17 	ldw	r2,-24(fp)
    d39c:	e0fffd17 	ldw	r3,-12(fp)
    d3a0:	18c00003 	ldbu	r3,0(r3)
    d3a4:	18c03fcc 	andi	r3,r3,255
    d3a8:	18c0201c 	xori	r3,r3,128
    d3ac:	18ffe004 	addi	r3,r3,-128
    d3b0:	e13ffd17 	ldw	r4,-12(fp)
    d3b4:	21000044 	addi	r4,r4,1
    d3b8:	e13ffd15 	stw	r4,-12(fp)
    d3bc:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    d3c0:	e0fffd17 	ldw	r3,-12(fp)
    d3c4:	e0bffb17 	ldw	r2,-20(fp)
    d3c8:	18bfee36 	bltu	r3,r2,d384 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    d3cc:	e0bffe17 	ldw	r2,-8(fp)
}
    d3d0:	e037883a 	mov	sp,fp
    d3d4:	df000017 	ldw	fp,0(sp)
    d3d8:	dec00104 	addi	sp,sp,4
    d3dc:	f800283a 	ret

0000d3e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d3e0:	defffa04 	addi	sp,sp,-24
    d3e4:	dfc00515 	stw	ra,20(sp)
    d3e8:	df000415 	stw	fp,16(sp)
    d3ec:	df000404 	addi	fp,sp,16
    d3f0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d3f4:	0007883a 	mov	r3,zero
    d3f8:	e0bfff17 	ldw	r2,-4(fp)
    d3fc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d400:	e0bfff17 	ldw	r2,-4(fp)
    d404:	10800104 	addi	r2,r2,4
    d408:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d40c:	0005303a 	rdctl	r2,status
    d410:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d414:	e0fffd17 	ldw	r3,-12(fp)
    d418:	00bfff84 	movi	r2,-2
    d41c:	1884703a 	and	r2,r3,r2
    d420:	1001703a 	wrctl	status,r2
  
  return context;
    d424:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    d428:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    d42c:	000e18c0 	call	e18c <alt_tick>
    d430:	e0bffc17 	ldw	r2,-16(fp)
    d434:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d438:	e0bffe17 	ldw	r2,-8(fp)
    d43c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    d440:	e037883a 	mov	sp,fp
    d444:	dfc00117 	ldw	ra,4(sp)
    d448:	df000017 	ldw	fp,0(sp)
    d44c:	dec00204 	addi	sp,sp,8
    d450:	f800283a 	ret

0000d454 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    d454:	defff804 	addi	sp,sp,-32
    d458:	dfc00715 	stw	ra,28(sp)
    d45c:	df000615 	stw	fp,24(sp)
    d460:	df000604 	addi	fp,sp,24
    d464:	e13ffc15 	stw	r4,-16(fp)
    d468:	e17ffd15 	stw	r5,-12(fp)
    d46c:	e1bffe15 	stw	r6,-8(fp)
    d470:	e1ffff15 	stw	r7,-4(fp)
    d474:	e0bfff17 	ldw	r2,-4(fp)
    d478:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    d47c:	00800074 	movhi	r2,1
    d480:	10bb8804 	addi	r2,r2,-4576
    d484:	10800017 	ldw	r2,0(r2)
    d488:	1000041e 	bne	r2,zero,d49c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    d48c:	00800074 	movhi	r2,1
    d490:	10bb8804 	addi	r2,r2,-4576
    d494:	e0fffb17 	ldw	r3,-20(fp)
    d498:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    d49c:	e0bffc17 	ldw	r2,-16(fp)
    d4a0:	10800104 	addi	r2,r2,4
    d4a4:	00c001c4 	movi	r3,7
    d4a8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    d4ac:	d8000015 	stw	zero,0(sp)
    d4b0:	e13ffd17 	ldw	r4,-12(fp)
    d4b4:	e17ffe17 	ldw	r5,-8(fp)
    d4b8:	01800074 	movhi	r6,1
    d4bc:	31b4f804 	addi	r6,r6,-11296
    d4c0:	e1fffc17 	ldw	r7,-16(fp)
    d4c4:	000dcd40 	call	dcd4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    d4c8:	e037883a 	mov	sp,fp
    d4cc:	dfc00117 	ldw	ra,4(sp)
    d4d0:	df000017 	ldw	fp,0(sp)
    d4d4:	dec00204 	addi	sp,sp,8
    d4d8:	f800283a 	ret

0000d4dc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d4dc:	defffa04 	addi	sp,sp,-24
    d4e0:	dfc00515 	stw	ra,20(sp)
    d4e4:	df000415 	stw	fp,16(sp)
    d4e8:	df000404 	addi	fp,sp,16
    d4ec:	e13ffd15 	stw	r4,-12(fp)
    d4f0:	e17ffe15 	stw	r5,-8(fp)
    d4f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    d4f8:	e0bffd17 	ldw	r2,-12(fp)
    d4fc:	10800017 	ldw	r2,0(r2)
    d500:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    d504:	e0bffc17 	ldw	r2,-16(fp)
    d508:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    d50c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    d510:	10800217 	ldw	r2,8(r2)
    d514:	1809883a 	mov	r4,r3
    d518:	e17ffe17 	ldw	r5,-8(fp)
    d51c:	e1bfff17 	ldw	r6,-4(fp)
    d520:	100f883a 	mov	r7,r2
    d524:	000d5ec0 	call	d5ec <altera_avalon_uart_read>
      fd->fd_flags);
}
    d528:	e037883a 	mov	sp,fp
    d52c:	dfc00117 	ldw	ra,4(sp)
    d530:	df000017 	ldw	fp,0(sp)
    d534:	dec00204 	addi	sp,sp,8
    d538:	f800283a 	ret

0000d53c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d53c:	defffa04 	addi	sp,sp,-24
    d540:	dfc00515 	stw	ra,20(sp)
    d544:	df000415 	stw	fp,16(sp)
    d548:	df000404 	addi	fp,sp,16
    d54c:	e13ffd15 	stw	r4,-12(fp)
    d550:	e17ffe15 	stw	r5,-8(fp)
    d554:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    d558:	e0bffd17 	ldw	r2,-12(fp)
    d55c:	10800017 	ldw	r2,0(r2)
    d560:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    d564:	e0bffc17 	ldw	r2,-16(fp)
    d568:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    d56c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    d570:	10800217 	ldw	r2,8(r2)
    d574:	1809883a 	mov	r4,r3
    d578:	e17ffe17 	ldw	r5,-8(fp)
    d57c:	e1bfff17 	ldw	r6,-4(fp)
    d580:	100f883a 	mov	r7,r2
    d584:	000d6fc0 	call	d6fc <altera_avalon_uart_write>
      fd->fd_flags);
}
    d588:	e037883a 	mov	sp,fp
    d58c:	dfc00117 	ldw	ra,4(sp)
    d590:	df000017 	ldw	fp,0(sp)
    d594:	dec00204 	addi	sp,sp,8
    d598:	f800283a 	ret

0000d59c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d59c:	defffe04 	addi	sp,sp,-8
    d5a0:	dfc00115 	stw	ra,4(sp)
    d5a4:	df000015 	stw	fp,0(sp)
    d5a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d5ac:	00800074 	movhi	r2,1
    d5b0:	10baa204 	addi	r2,r2,-5496
    d5b4:	10800017 	ldw	r2,0(r2)
    d5b8:	10000526 	beq	r2,zero,d5d0 <alt_get_errno+0x34>
    d5bc:	00800074 	movhi	r2,1
    d5c0:	10baa204 	addi	r2,r2,-5496
    d5c4:	10800017 	ldw	r2,0(r2)
    d5c8:	103ee83a 	callr	r2
    d5cc:	00000206 	br	d5d8 <alt_get_errno+0x3c>
    d5d0:	00800074 	movhi	r2,1
    d5d4:	10bb8304 	addi	r2,r2,-4596
}
    d5d8:	e037883a 	mov	sp,fp
    d5dc:	dfc00117 	ldw	ra,4(sp)
    d5e0:	df000017 	ldw	fp,0(sp)
    d5e4:	dec00204 	addi	sp,sp,8
    d5e8:	f800283a 	ret

0000d5ec <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    d5ec:	defff804 	addi	sp,sp,-32
    d5f0:	dfc00715 	stw	ra,28(sp)
    d5f4:	df000615 	stw	fp,24(sp)
    d5f8:	df000604 	addi	fp,sp,24
    d5fc:	e13ffc15 	stw	r4,-16(fp)
    d600:	e17ffd15 	stw	r5,-12(fp)
    d604:	e1bffe15 	stw	r6,-8(fp)
    d608:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    d60c:	e0bfff17 	ldw	r2,-4(fp)
    d610:	1090000c 	andi	r2,r2,16384
    d614:	1005003a 	cmpeq	r2,r2,zero
    d618:	10803fcc 	andi	r2,r2,255
    d61c:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    d620:	e0bffc17 	ldw	r2,-16(fp)
    d624:	10800017 	ldw	r2,0(r2)
    d628:	10800204 	addi	r2,r2,8
    d62c:	10800037 	ldwio	r2,0(r2)
    d630:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    d634:	e0bffc17 	ldw	r2,-16(fp)
    d638:	10800017 	ldw	r2,0(r2)
    d63c:	10800204 	addi	r2,r2,8
    d640:	0007883a 	mov	r3,zero
    d644:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    d648:	e0bffb17 	ldw	r2,-20(fp)
    d64c:	1080200c 	andi	r2,r2,128
    d650:	10000b26 	beq	r2,zero,d680 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    d654:	e0bffc17 	ldw	r2,-16(fp)
    d658:	10800017 	ldw	r2,0(r2)
    d65c:	10800037 	ldwio	r2,0(r2)
    d660:	1007883a 	mov	r3,r2
    d664:	e0bffd17 	ldw	r2,-12(fp)
    d668:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    d66c:	e0bffb17 	ldw	r2,-20(fp)
    d670:	108000cc 	andi	r2,r2,3
    d674:	1000021e 	bne	r2,zero,d680 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    d678:	00800044 	movi	r2,1
    d67c:	00000606 	br	d698 <altera_avalon_uart_read+0xac>
      }
    }
  }
  while (block);
    d680:	e0bffa17 	ldw	r2,-24(fp)
    d684:	103fe61e 	bne	r2,zero,d620 <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
    d688:	000d59c0 	call	d59c <alt_get_errno>
    d68c:	00c002c4 	movi	r3,11
    d690:	10c00015 	stw	r3,0(r2)
 
  return 0;
    d694:	0005883a 	mov	r2,zero
}
    d698:	e037883a 	mov	sp,fp
    d69c:	dfc00117 	ldw	ra,4(sp)
    d6a0:	df000017 	ldw	fp,0(sp)
    d6a4:	dec00204 	addi	sp,sp,8
    d6a8:	f800283a 	ret

0000d6ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d6ac:	defffe04 	addi	sp,sp,-8
    d6b0:	dfc00115 	stw	ra,4(sp)
    d6b4:	df000015 	stw	fp,0(sp)
    d6b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d6bc:	00800074 	movhi	r2,1
    d6c0:	10baa204 	addi	r2,r2,-5496
    d6c4:	10800017 	ldw	r2,0(r2)
    d6c8:	10000526 	beq	r2,zero,d6e0 <alt_get_errno+0x34>
    d6cc:	00800074 	movhi	r2,1
    d6d0:	10baa204 	addi	r2,r2,-5496
    d6d4:	10800017 	ldw	r2,0(r2)
    d6d8:	103ee83a 	callr	r2
    d6dc:	00000206 	br	d6e8 <alt_get_errno+0x3c>
    d6e0:	00800074 	movhi	r2,1
    d6e4:	10bb8304 	addi	r2,r2,-4596
}
    d6e8:	e037883a 	mov	sp,fp
    d6ec:	dfc00117 	ldw	ra,4(sp)
    d6f0:	df000017 	ldw	fp,0(sp)
    d6f4:	dec00204 	addi	sp,sp,8
    d6f8:	f800283a 	ret

0000d6fc <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    d6fc:	defff704 	addi	sp,sp,-36
    d700:	dfc00815 	stw	ra,32(sp)
    d704:	df000715 	stw	fp,28(sp)
    d708:	df000704 	addi	fp,sp,28
    d70c:	e13ffc15 	stw	r4,-16(fp)
    d710:	e17ffd15 	stw	r5,-12(fp)
    d714:	e1bffe15 	stw	r6,-8(fp)
    d718:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    d71c:	e0bfff17 	ldw	r2,-4(fp)
    d720:	1090000c 	andi	r2,r2,16384
    d724:	1005003a 	cmpeq	r2,r2,zero
    d728:	10803fcc 	andi	r2,r2,255
    d72c:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    d730:	e0bffe17 	ldw	r2,-8(fp)
    d734:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    d738:	e0bffc17 	ldw	r2,-16(fp)
    d73c:	10800017 	ldw	r2,0(r2)
    d740:	10800204 	addi	r2,r2,8
    d744:	10800037 	ldwio	r2,0(r2)
    d748:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    d74c:	e0bffb17 	ldw	r2,-20(fp)
    d750:	1080100c 	andi	r2,r2,64
    d754:	10000f26 	beq	r2,zero,d794 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    d758:	e0bffc17 	ldw	r2,-16(fp)
    d75c:	10800017 	ldw	r2,0(r2)
    d760:	10800104 	addi	r2,r2,4
    d764:	e0fffd17 	ldw	r3,-12(fp)
    d768:	18c00003 	ldbu	r3,0(r3)
    d76c:	18c03fcc 	andi	r3,r3,255
    d770:	18c0201c 	xori	r3,r3,128
    d774:	18ffe004 	addi	r3,r3,-128
    d778:	e13ffd17 	ldw	r4,-12(fp)
    d77c:	21000044 	addi	r4,r4,1
    d780:	e13ffd15 	stw	r4,-12(fp)
    d784:	10c00035 	stwio	r3,0(r2)
      count--;
    d788:	e0bff917 	ldw	r2,-28(fp)
    d78c:	10bfffc4 	addi	r2,r2,-1
    d790:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    d794:	e0bffa17 	ldw	r2,-24(fp)
    d798:	10000226 	beq	r2,zero,d7a4 <altera_avalon_uart_write+0xa8>
    d79c:	e0bff917 	ldw	r2,-28(fp)
    d7a0:	103fe51e 	bne	r2,zero,d738 <altera_avalon_uart_write+0x3c>

  if (count)
    d7a4:	e0bff917 	ldw	r2,-28(fp)
    d7a8:	10000326 	beq	r2,zero,d7b8 <altera_avalon_uart_write+0xbc>
  {
    ALT_ERRNO = EWOULDBLOCK;
    d7ac:	000d6ac0 	call	d6ac <alt_get_errno>
    d7b0:	00c002c4 	movi	r3,11
    d7b4:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
    d7b8:	e0fffe17 	ldw	r3,-8(fp)
    d7bc:	e0bff917 	ldw	r2,-28(fp)
    d7c0:	1885c83a 	sub	r2,r3,r2
}
    d7c4:	e037883a 	mov	sp,fp
    d7c8:	dfc00117 	ldw	ra,4(sp)
    d7cc:	df000017 	ldw	fp,0(sp)
    d7d0:	dec00204 	addi	sp,sp,8
    d7d4:	f800283a 	ret

0000d7d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7d8:	defffe04 	addi	sp,sp,-8
    d7dc:	dfc00115 	stw	ra,4(sp)
    d7e0:	df000015 	stw	fp,0(sp)
    d7e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d7e8:	00800074 	movhi	r2,1
    d7ec:	10baa204 	addi	r2,r2,-5496
    d7f0:	10800017 	ldw	r2,0(r2)
    d7f4:	10000526 	beq	r2,zero,d80c <alt_get_errno+0x34>
    d7f8:	00800074 	movhi	r2,1
    d7fc:	10baa204 	addi	r2,r2,-5496
    d800:	10800017 	ldw	r2,0(r2)
    d804:	103ee83a 	callr	r2
    d808:	00000206 	br	d814 <alt_get_errno+0x3c>
    d80c:	00800074 	movhi	r2,1
    d810:	10bb8304 	addi	r2,r2,-4596
}
    d814:	e037883a 	mov	sp,fp
    d818:	dfc00117 	ldw	ra,4(sp)
    d81c:	df000017 	ldw	fp,0(sp)
    d820:	dec00204 	addi	sp,sp,8
    d824:	f800283a 	ret

0000d828 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d828:	defffb04 	addi	sp,sp,-20
    d82c:	dfc00415 	stw	ra,16(sp)
    d830:	df000315 	stw	fp,12(sp)
    d834:	df000304 	addi	fp,sp,12
    d838:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d83c:	e0bfff17 	ldw	r2,-4(fp)
    d840:	10000716 	blt	r2,zero,d860 <close+0x38>
    d844:	e13fff17 	ldw	r4,-4(fp)
    d848:	01400304 	movi	r5,12
    d84c:	000b5280 	call	b528 <__mulsi3>
    d850:	00c00074 	movhi	r3,1
    d854:	18fa2d04 	addi	r3,r3,-5964
    d858:	10c5883a 	add	r2,r2,r3
    d85c:	00000106 	br	d864 <close+0x3c>
    d860:	0005883a 	mov	r2,zero
    d864:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d868:	e0bffd17 	ldw	r2,-12(fp)
    d86c:	10001826 	beq	r2,zero,d8d0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d870:	e0bffd17 	ldw	r2,-12(fp)
    d874:	10800017 	ldw	r2,0(r2)
    d878:	10800417 	ldw	r2,16(r2)
    d87c:	10000626 	beq	r2,zero,d898 <close+0x70>
    d880:	e0bffd17 	ldw	r2,-12(fp)
    d884:	10800017 	ldw	r2,0(r2)
    d888:	10800417 	ldw	r2,16(r2)
    d88c:	e13ffd17 	ldw	r4,-12(fp)
    d890:	103ee83a 	callr	r2
    d894:	00000106 	br	d89c <close+0x74>
    d898:	0005883a 	mov	r2,zero
    d89c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d8a0:	e13fff17 	ldw	r4,-4(fp)
    d8a4:	000ce3c0 	call	ce3c <alt_release_fd>
    if (rval < 0)
    d8a8:	e0bffe17 	ldw	r2,-8(fp)
    d8ac:	1000060e 	bge	r2,zero,d8c8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d8b0:	000d7d80 	call	d7d8 <alt_get_errno>
    d8b4:	e0fffe17 	ldw	r3,-8(fp)
    d8b8:	00c7c83a 	sub	r3,zero,r3
    d8bc:	10c00015 	stw	r3,0(r2)
      return -1;
    d8c0:	00bfffc4 	movi	r2,-1
    d8c4:	00000606 	br	d8e0 <close+0xb8>
    }
    return 0;
    d8c8:	0005883a 	mov	r2,zero
    d8cc:	00000406 	br	d8e0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d8d0:	000d7d80 	call	d7d8 <alt_get_errno>
    d8d4:	00c01444 	movi	r3,81
    d8d8:	10c00015 	stw	r3,0(r2)
    return -1;
    d8dc:	00bfffc4 	movi	r2,-1
  }
}
    d8e0:	e037883a 	mov	sp,fp
    d8e4:	dfc00117 	ldw	ra,4(sp)
    d8e8:	df000017 	ldw	fp,0(sp)
    d8ec:	dec00204 	addi	sp,sp,8
    d8f0:	f800283a 	ret

0000d8f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d8f4:	deffff04 	addi	sp,sp,-4
    d8f8:	df000015 	stw	fp,0(sp)
    d8fc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d900:	e037883a 	mov	sp,fp
    d904:	df000017 	ldw	fp,0(sp)
    d908:	dec00104 	addi	sp,sp,4
    d90c:	f800283a 	ret

0000d910 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d910:	defffc04 	addi	sp,sp,-16
    d914:	df000315 	stw	fp,12(sp)
    d918:	df000304 	addi	fp,sp,12
    d91c:	e13ffd15 	stw	r4,-12(fp)
    d920:	e17ffe15 	stw	r5,-8(fp)
    d924:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d928:	e0bfff17 	ldw	r2,-4(fp)
}
    d92c:	e037883a 	mov	sp,fp
    d930:	df000017 	ldw	fp,0(sp)
    d934:	dec00104 	addi	sp,sp,4
    d938:	f800283a 	ret

0000d93c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d93c:	defffe04 	addi	sp,sp,-8
    d940:	dfc00115 	stw	ra,4(sp)
    d944:	df000015 	stw	fp,0(sp)
    d948:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d94c:	00800074 	movhi	r2,1
    d950:	10baa204 	addi	r2,r2,-5496
    d954:	10800017 	ldw	r2,0(r2)
    d958:	10000526 	beq	r2,zero,d970 <alt_get_errno+0x34>
    d95c:	00800074 	movhi	r2,1
    d960:	10baa204 	addi	r2,r2,-5496
    d964:	10800017 	ldw	r2,0(r2)
    d968:	103ee83a 	callr	r2
    d96c:	00000206 	br	d978 <alt_get_errno+0x3c>
    d970:	00800074 	movhi	r2,1
    d974:	10bb8304 	addi	r2,r2,-4596
}
    d978:	e037883a 	mov	sp,fp
    d97c:	dfc00117 	ldw	ra,4(sp)
    d980:	df000017 	ldw	fp,0(sp)
    d984:	dec00204 	addi	sp,sp,8
    d988:	f800283a 	ret

0000d98c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d98c:	defffa04 	addi	sp,sp,-24
    d990:	dfc00515 	stw	ra,20(sp)
    d994:	df000415 	stw	fp,16(sp)
    d998:	df000404 	addi	fp,sp,16
    d99c:	e13ffe15 	stw	r4,-8(fp)
    d9a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d9a4:	e0bffe17 	ldw	r2,-8(fp)
    d9a8:	10000326 	beq	r2,zero,d9b8 <alt_dev_llist_insert+0x2c>
    d9ac:	e0bffe17 	ldw	r2,-8(fp)
    d9b0:	10800217 	ldw	r2,8(r2)
    d9b4:	1000051e 	bne	r2,zero,d9cc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    d9b8:	000d93c0 	call	d93c <alt_get_errno>
    d9bc:	00c00584 	movi	r3,22
    d9c0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    d9c4:	00bffa84 	movi	r2,-22
    d9c8:	00001306 	br	da18 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d9cc:	e0bffe17 	ldw	r2,-8(fp)
    d9d0:	e0ffff17 	ldw	r3,-4(fp)
    d9d4:	e0fffc15 	stw	r3,-16(fp)
    d9d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d9dc:	e0bffd17 	ldw	r2,-12(fp)
    d9e0:	e0fffc17 	ldw	r3,-16(fp)
    d9e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    d9e8:	e0bffc17 	ldw	r2,-16(fp)
    d9ec:	10c00017 	ldw	r3,0(r2)
    d9f0:	e0bffd17 	ldw	r2,-12(fp)
    d9f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d9f8:	e0bffc17 	ldw	r2,-16(fp)
    d9fc:	10800017 	ldw	r2,0(r2)
    da00:	e0fffd17 	ldw	r3,-12(fp)
    da04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    da08:	e0bffc17 	ldw	r2,-16(fp)
    da0c:	e0fffd17 	ldw	r3,-12(fp)
    da10:	10c00015 	stw	r3,0(r2)

  return 0;  
    da14:	0005883a 	mov	r2,zero
}
    da18:	e037883a 	mov	sp,fp
    da1c:	dfc00117 	ldw	ra,4(sp)
    da20:	df000017 	ldw	fp,0(sp)
    da24:	dec00204 	addi	sp,sp,8
    da28:	f800283a 	ret

0000da2c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    da2c:	defffa04 	addi	sp,sp,-24
    da30:	dfc00515 	stw	ra,20(sp)
    da34:	df000415 	stw	fp,16(sp)
    da38:	df000404 	addi	fp,sp,16
    da3c:	e13ffe15 	stw	r4,-8(fp)
    da40:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    da44:	e0bfff17 	ldw	r2,-4(fp)
    da48:	10800017 	ldw	r2,0(r2)
    da4c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    da50:	e13ffe17 	ldw	r4,-8(fp)
    da54:	000bf080 	call	bf08 <strlen>
    da58:	10800044 	addi	r2,r2,1
    da5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    da60:	00000d06 	br	da98 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    da64:	e0bffc17 	ldw	r2,-16(fp)
    da68:	10c00217 	ldw	r3,8(r2)
    da6c:	e0bffd17 	ldw	r2,-12(fp)
    da70:	1809883a 	mov	r4,r3
    da74:	e17ffe17 	ldw	r5,-8(fp)
    da78:	100d883a 	mov	r6,r2
    da7c:	000e35c0 	call	e35c <memcmp>
    da80:	1000021e 	bne	r2,zero,da8c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    da84:	e0bffc17 	ldw	r2,-16(fp)
    da88:	00000706 	br	daa8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    da8c:	e0bffc17 	ldw	r2,-16(fp)
    da90:	10800017 	ldw	r2,0(r2)
    da94:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    da98:	e0fffc17 	ldw	r3,-16(fp)
    da9c:	e0bfff17 	ldw	r2,-4(fp)
    daa0:	18bff01e 	bne	r3,r2,da64 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    daa4:	0005883a 	mov	r2,zero
}
    daa8:	e037883a 	mov	sp,fp
    daac:	dfc00117 	ldw	ra,4(sp)
    dab0:	df000017 	ldw	fp,0(sp)
    dab4:	dec00204 	addi	sp,sp,8
    dab8:	f800283a 	ret

0000dabc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    dabc:	defffb04 	addi	sp,sp,-20
    dac0:	dfc00415 	stw	ra,16(sp)
    dac4:	df000315 	stw	fp,12(sp)
    dac8:	df000304 	addi	fp,sp,12
    dacc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    dad0:	00800074 	movhi	r2,1
    dad4:	10ba9d04 	addi	r2,r2,-5516
    dad8:	10800017 	ldw	r2,0(r2)
    dadc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    dae0:	00003106 	br	dba8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    dae4:	e0bffd17 	ldw	r2,-12(fp)
    dae8:	10800217 	ldw	r2,8(r2)
    daec:	1009883a 	mov	r4,r2
    daf0:	000bf080 	call	bf08 <strlen>
    daf4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    daf8:	e0bffd17 	ldw	r2,-12(fp)
    dafc:	10c00217 	ldw	r3,8(r2)
    db00:	e0bffe17 	ldw	r2,-8(fp)
    db04:	10bfffc4 	addi	r2,r2,-1
    db08:	1885883a 	add	r2,r3,r2
    db0c:	10800003 	ldbu	r2,0(r2)
    db10:	10803fcc 	andi	r2,r2,255
    db14:	1080201c 	xori	r2,r2,128
    db18:	10bfe004 	addi	r2,r2,-128
    db1c:	10800bd8 	cmpnei	r2,r2,47
    db20:	1000031e 	bne	r2,zero,db30 <alt_find_file+0x74>
    {
      len -= 1;
    db24:	e0bffe17 	ldw	r2,-8(fp)
    db28:	10bfffc4 	addi	r2,r2,-1
    db2c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    db30:	e0bffe17 	ldw	r2,-8(fp)
    db34:	e0ffff17 	ldw	r3,-4(fp)
    db38:	1885883a 	add	r2,r3,r2
    db3c:	10800003 	ldbu	r2,0(r2)
    db40:	10803fcc 	andi	r2,r2,255
    db44:	1080201c 	xori	r2,r2,128
    db48:	10bfe004 	addi	r2,r2,-128
    db4c:	10800be0 	cmpeqi	r2,r2,47
    db50:	1000081e 	bne	r2,zero,db74 <alt_find_file+0xb8>
    db54:	e0bffe17 	ldw	r2,-8(fp)
    db58:	e0ffff17 	ldw	r3,-4(fp)
    db5c:	1885883a 	add	r2,r3,r2
    db60:	10800003 	ldbu	r2,0(r2)
    db64:	10803fcc 	andi	r2,r2,255
    db68:	1080201c 	xori	r2,r2,128
    db6c:	10bfe004 	addi	r2,r2,-128
    db70:	10000a1e 	bne	r2,zero,db9c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    db74:	e0bffd17 	ldw	r2,-12(fp)
    db78:	10c00217 	ldw	r3,8(r2)
    db7c:	e0bffe17 	ldw	r2,-8(fp)
    db80:	1809883a 	mov	r4,r3
    db84:	e17fff17 	ldw	r5,-4(fp)
    db88:	100d883a 	mov	r6,r2
    db8c:	000e35c0 	call	e35c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    db90:	1000021e 	bne	r2,zero,db9c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    db94:	e0bffd17 	ldw	r2,-12(fp)
    db98:	00000806 	br	dbbc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    db9c:	e0bffd17 	ldw	r2,-12(fp)
    dba0:	10800017 	ldw	r2,0(r2)
    dba4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    dba8:	e0fffd17 	ldw	r3,-12(fp)
    dbac:	00800074 	movhi	r2,1
    dbb0:	10ba9d04 	addi	r2,r2,-5516
    dbb4:	18bfcb1e 	bne	r3,r2,dae4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    dbb8:	0005883a 	mov	r2,zero
}
    dbbc:	e037883a 	mov	sp,fp
    dbc0:	dfc00117 	ldw	ra,4(sp)
    dbc4:	df000017 	ldw	fp,0(sp)
    dbc8:	dec00204 	addi	sp,sp,8
    dbcc:	f800283a 	ret

0000dbd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    dbd0:	defffa04 	addi	sp,sp,-24
    dbd4:	dfc00515 	stw	ra,20(sp)
    dbd8:	df000415 	stw	fp,16(sp)
    dbdc:	dc000315 	stw	r16,12(sp)
    dbe0:	df000304 	addi	fp,sp,12
    dbe4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    dbe8:	00bffa04 	movi	r2,-24
    dbec:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    dbf0:	e03ffd15 	stw	zero,-12(fp)
    dbf4:	00002106 	br	dc7c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    dbf8:	04000074 	movhi	r16,1
    dbfc:	843a2d04 	addi	r16,r16,-5964
    dc00:	e0bffd17 	ldw	r2,-12(fp)
    dc04:	1009883a 	mov	r4,r2
    dc08:	01400304 	movi	r5,12
    dc0c:	000b5280 	call	b528 <__mulsi3>
    dc10:	8085883a 	add	r2,r16,r2
    dc14:	10800017 	ldw	r2,0(r2)
    dc18:	1000151e 	bne	r2,zero,dc70 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    dc1c:	04000074 	movhi	r16,1
    dc20:	843a2d04 	addi	r16,r16,-5964
    dc24:	e0bffd17 	ldw	r2,-12(fp)
    dc28:	1009883a 	mov	r4,r2
    dc2c:	01400304 	movi	r5,12
    dc30:	000b5280 	call	b528 <__mulsi3>
    dc34:	8085883a 	add	r2,r16,r2
    dc38:	e0ffff17 	ldw	r3,-4(fp)
    dc3c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    dc40:	00800074 	movhi	r2,1
    dc44:	10baa104 	addi	r2,r2,-5500
    dc48:	10c00017 	ldw	r3,0(r2)
    dc4c:	e0bffd17 	ldw	r2,-12(fp)
    dc50:	1880040e 	bge	r3,r2,dc64 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    dc54:	00800074 	movhi	r2,1
    dc58:	10baa104 	addi	r2,r2,-5500
    dc5c:	e0fffd17 	ldw	r3,-12(fp)
    dc60:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    dc64:	e0bffd17 	ldw	r2,-12(fp)
    dc68:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    dc6c:	00000606 	br	dc88 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    dc70:	e0bffd17 	ldw	r2,-12(fp)
    dc74:	10800044 	addi	r2,r2,1
    dc78:	e0bffd15 	stw	r2,-12(fp)
    dc7c:	e0bffd17 	ldw	r2,-12(fp)
    dc80:	10800810 	cmplti	r2,r2,32
    dc84:	103fdc1e 	bne	r2,zero,dbf8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    dc88:	e0bffe17 	ldw	r2,-8(fp)
}
    dc8c:	e037883a 	mov	sp,fp
    dc90:	dfc00217 	ldw	ra,8(sp)
    dc94:	df000117 	ldw	fp,4(sp)
    dc98:	dc000017 	ldw	r16,0(sp)
    dc9c:	dec00304 	addi	sp,sp,12
    dca0:	f800283a 	ret

0000dca4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    dca4:	defffe04 	addi	sp,sp,-8
    dca8:	dfc00115 	stw	ra,4(sp)
    dcac:	df000015 	stw	fp,0(sp)
    dcb0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    dcb4:	0009883a 	mov	r4,zero
    dcb8:	01420004 	movi	r5,2048
    dcbc:	000e2b00 	call	e2b0 <alt_icache_flush>
#endif
}
    dcc0:	e037883a 	mov	sp,fp
    dcc4:	dfc00117 	ldw	ra,4(sp)
    dcc8:	df000017 	ldw	fp,0(sp)
    dccc:	dec00204 	addi	sp,sp,8
    dcd0:	f800283a 	ret

0000dcd4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    dcd4:	defff904 	addi	sp,sp,-28
    dcd8:	dfc00615 	stw	ra,24(sp)
    dcdc:	df000515 	stw	fp,20(sp)
    dce0:	df000504 	addi	fp,sp,20
    dce4:	e13ffc15 	stw	r4,-16(fp)
    dce8:	e17ffd15 	stw	r5,-12(fp)
    dcec:	e1bffe15 	stw	r6,-8(fp)
    dcf0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    dcf4:	e0800217 	ldw	r2,8(fp)
    dcf8:	d8800015 	stw	r2,0(sp)
    dcfc:	e13ffc17 	ldw	r4,-16(fp)
    dd00:	e17ffd17 	ldw	r5,-12(fp)
    dd04:	e1bffe17 	ldw	r6,-8(fp)
    dd08:	e1ffff17 	ldw	r7,-4(fp)
    dd0c:	000deac0 	call	deac <alt_iic_isr_register>
}  
    dd10:	e037883a 	mov	sp,fp
    dd14:	dfc00117 	ldw	ra,4(sp)
    dd18:	df000017 	ldw	fp,0(sp)
    dd1c:	dec00204 	addi	sp,sp,8
    dd20:	f800283a 	ret

0000dd24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    dd24:	defff904 	addi	sp,sp,-28
    dd28:	df000615 	stw	fp,24(sp)
    dd2c:	df000604 	addi	fp,sp,24
    dd30:	e13ffe15 	stw	r4,-8(fp)
    dd34:	e17fff15 	stw	r5,-4(fp)
    dd38:	e0bfff17 	ldw	r2,-4(fp)
    dd3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd40:	0005303a 	rdctl	r2,status
    dd44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd48:	e0fffb17 	ldw	r3,-20(fp)
    dd4c:	00bfff84 	movi	r2,-2
    dd50:	1884703a 	and	r2,r3,r2
    dd54:	1001703a 	wrctl	status,r2
  
  return context;
    dd58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    dd5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    dd60:	e0bffa17 	ldw	r2,-24(fp)
    dd64:	00c00044 	movi	r3,1
    dd68:	1884983a 	sll	r2,r3,r2
    dd6c:	1007883a 	mov	r3,r2
    dd70:	00800074 	movhi	r2,1
    dd74:	10bb8704 	addi	r2,r2,-4580
    dd78:	10800017 	ldw	r2,0(r2)
    dd7c:	1886b03a 	or	r3,r3,r2
    dd80:	00800074 	movhi	r2,1
    dd84:	10bb8704 	addi	r2,r2,-4580
    dd88:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    dd8c:	00800074 	movhi	r2,1
    dd90:	10bb8704 	addi	r2,r2,-4580
    dd94:	10800017 	ldw	r2,0(r2)
    dd98:	100170fa 	wrctl	ienable,r2
    dd9c:	e0bffc17 	ldw	r2,-16(fp)
    dda0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dda4:	e0bffd17 	ldw	r2,-12(fp)
    dda8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ddac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    ddb0:	e037883a 	mov	sp,fp
    ddb4:	df000017 	ldw	fp,0(sp)
    ddb8:	dec00104 	addi	sp,sp,4
    ddbc:	f800283a 	ret

0000ddc0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    ddc0:	defff904 	addi	sp,sp,-28
    ddc4:	df000615 	stw	fp,24(sp)
    ddc8:	df000604 	addi	fp,sp,24
    ddcc:	e13ffe15 	stw	r4,-8(fp)
    ddd0:	e17fff15 	stw	r5,-4(fp)
    ddd4:	e0bfff17 	ldw	r2,-4(fp)
    ddd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dddc:	0005303a 	rdctl	r2,status
    dde0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dde4:	e0fffb17 	ldw	r3,-20(fp)
    dde8:	00bfff84 	movi	r2,-2
    ddec:	1884703a 	and	r2,r3,r2
    ddf0:	1001703a 	wrctl	status,r2
  
  return context;
    ddf4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ddf8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    ddfc:	e0bffa17 	ldw	r2,-24(fp)
    de00:	00c00044 	movi	r3,1
    de04:	1884983a 	sll	r2,r3,r2
    de08:	0084303a 	nor	r2,zero,r2
    de0c:	1007883a 	mov	r3,r2
    de10:	00800074 	movhi	r2,1
    de14:	10bb8704 	addi	r2,r2,-4580
    de18:	10800017 	ldw	r2,0(r2)
    de1c:	1886703a 	and	r3,r3,r2
    de20:	00800074 	movhi	r2,1
    de24:	10bb8704 	addi	r2,r2,-4580
    de28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    de2c:	00800074 	movhi	r2,1
    de30:	10bb8704 	addi	r2,r2,-4580
    de34:	10800017 	ldw	r2,0(r2)
    de38:	100170fa 	wrctl	ienable,r2
    de3c:	e0bffc17 	ldw	r2,-16(fp)
    de40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    de44:	e0bffd17 	ldw	r2,-12(fp)
    de48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    de4c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    de50:	e037883a 	mov	sp,fp
    de54:	df000017 	ldw	fp,0(sp)
    de58:	dec00104 	addi	sp,sp,4
    de5c:	f800283a 	ret

0000de60 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    de60:	defffc04 	addi	sp,sp,-16
    de64:	df000315 	stw	fp,12(sp)
    de68:	df000304 	addi	fp,sp,12
    de6c:	e13ffe15 	stw	r4,-8(fp)
    de70:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    de74:	000530fa 	rdctl	r2,ienable
    de78:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    de7c:	e0bfff17 	ldw	r2,-4(fp)
    de80:	00c00044 	movi	r3,1
    de84:	1884983a 	sll	r2,r3,r2
    de88:	1007883a 	mov	r3,r2
    de8c:	e0bffd17 	ldw	r2,-12(fp)
    de90:	1884703a 	and	r2,r3,r2
    de94:	1004c03a 	cmpne	r2,r2,zero
    de98:	10803fcc 	andi	r2,r2,255
}
    de9c:	e037883a 	mov	sp,fp
    dea0:	df000017 	ldw	fp,0(sp)
    dea4:	dec00104 	addi	sp,sp,4
    dea8:	f800283a 	ret

0000deac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    deac:	defff504 	addi	sp,sp,-44
    deb0:	dfc00a15 	stw	ra,40(sp)
    deb4:	df000915 	stw	fp,36(sp)
    deb8:	df000904 	addi	fp,sp,36
    debc:	e13ffc15 	stw	r4,-16(fp)
    dec0:	e17ffd15 	stw	r5,-12(fp)
    dec4:	e1bffe15 	stw	r6,-8(fp)
    dec8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    decc:	00bffa84 	movi	r2,-22
    ded0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ded4:	e0bffd17 	ldw	r2,-12(fp)
    ded8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    dedc:	e0bff817 	ldw	r2,-32(fp)
    dee0:	10800808 	cmpgei	r2,r2,32
    dee4:	1000271e 	bne	r2,zero,df84 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dee8:	0005303a 	rdctl	r2,status
    deec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    def0:	e0fffa17 	ldw	r3,-24(fp)
    def4:	00bfff84 	movi	r2,-2
    def8:	1884703a 	and	r2,r3,r2
    defc:	1001703a 	wrctl	status,r2
  
  return context;
    df00:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    df04:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    df08:	00c00074 	movhi	r3,1
    df0c:	18fbf604 	addi	r3,r3,-4136
    df10:	e0bff817 	ldw	r2,-32(fp)
    df14:	100490fa 	slli	r2,r2,3
    df18:	1885883a 	add	r2,r3,r2
    df1c:	e0fffe17 	ldw	r3,-8(fp)
    df20:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    df24:	00c00074 	movhi	r3,1
    df28:	18fbf604 	addi	r3,r3,-4136
    df2c:	e0bff817 	ldw	r2,-32(fp)
    df30:	100490fa 	slli	r2,r2,3
    df34:	1885883a 	add	r2,r3,r2
    df38:	10800104 	addi	r2,r2,4
    df3c:	e0ffff17 	ldw	r3,-4(fp)
    df40:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    df44:	e0bffe17 	ldw	r2,-8(fp)
    df48:	10000526 	beq	r2,zero,df60 <alt_iic_isr_register+0xb4>
    df4c:	e0bff817 	ldw	r2,-32(fp)
    df50:	e13ffc17 	ldw	r4,-16(fp)
    df54:	100b883a 	mov	r5,r2
    df58:	000dd240 	call	dd24 <alt_ic_irq_enable>
    df5c:	00000406 	br	df70 <alt_iic_isr_register+0xc4>
    df60:	e0bff817 	ldw	r2,-32(fp)
    df64:	e13ffc17 	ldw	r4,-16(fp)
    df68:	100b883a 	mov	r5,r2
    df6c:	000ddc00 	call	ddc0 <alt_ic_irq_disable>
    df70:	e0bff715 	stw	r2,-36(fp)
    df74:	e0bff917 	ldw	r2,-28(fp)
    df78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df7c:	e0bffb17 	ldw	r2,-20(fp)
    df80:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    df84:	e0bff717 	ldw	r2,-36(fp)
}
    df88:	e037883a 	mov	sp,fp
    df8c:	dfc00117 	ldw	ra,4(sp)
    df90:	df000017 	ldw	fp,0(sp)
    df94:	dec00204 	addi	sp,sp,8
    df98:	f800283a 	ret

0000df9c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    df9c:	defff804 	addi	sp,sp,-32
    dfa0:	dfc00715 	stw	ra,28(sp)
    dfa4:	df000615 	stw	fp,24(sp)
    dfa8:	dc000515 	stw	r16,20(sp)
    dfac:	df000504 	addi	fp,sp,20
    dfb0:	e13ffc15 	stw	r4,-16(fp)
    dfb4:	e17ffd15 	stw	r5,-12(fp)
    dfb8:	e1bffe15 	stw	r6,-8(fp)
    dfbc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    dfc0:	e13ffd17 	ldw	r4,-12(fp)
    dfc4:	e17ffe17 	ldw	r5,-8(fp)
    dfc8:	e1bfff17 	ldw	r6,-4(fp)
    dfcc:	000cba00 	call	cba0 <open>
    dfd0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    dfd4:	e0bffb17 	ldw	r2,-20(fp)
    dfd8:	10002216 	blt	r2,zero,e064 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    dfdc:	04000074 	movhi	r16,1
    dfe0:	843a2d04 	addi	r16,r16,-5964
    dfe4:	e0bffb17 	ldw	r2,-20(fp)
    dfe8:	1009883a 	mov	r4,r2
    dfec:	01400304 	movi	r5,12
    dff0:	000b5280 	call	b528 <__mulsi3>
    dff4:	8085883a 	add	r2,r16,r2
    dff8:	10c00017 	ldw	r3,0(r2)
    dffc:	e0bffc17 	ldw	r2,-16(fp)
    e000:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e004:	04000074 	movhi	r16,1
    e008:	843a2d04 	addi	r16,r16,-5964
    e00c:	e0bffb17 	ldw	r2,-20(fp)
    e010:	1009883a 	mov	r4,r2
    e014:	01400304 	movi	r5,12
    e018:	000b5280 	call	b528 <__mulsi3>
    e01c:	8085883a 	add	r2,r16,r2
    e020:	10800104 	addi	r2,r2,4
    e024:	10c00017 	ldw	r3,0(r2)
    e028:	e0bffc17 	ldw	r2,-16(fp)
    e02c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e030:	04000074 	movhi	r16,1
    e034:	843a2d04 	addi	r16,r16,-5964
    e038:	e0bffb17 	ldw	r2,-20(fp)
    e03c:	1009883a 	mov	r4,r2
    e040:	01400304 	movi	r5,12
    e044:	000b5280 	call	b528 <__mulsi3>
    e048:	8085883a 	add	r2,r16,r2
    e04c:	10800204 	addi	r2,r2,8
    e050:	10c00017 	ldw	r3,0(r2)
    e054:	e0bffc17 	ldw	r2,-16(fp)
    e058:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e05c:	e13ffb17 	ldw	r4,-20(fp)
    e060:	000ce3c0 	call	ce3c <alt_release_fd>
  }
} 
    e064:	e037883a 	mov	sp,fp
    e068:	dfc00217 	ldw	ra,8(sp)
    e06c:	df000117 	ldw	fp,4(sp)
    e070:	dc000017 	ldw	r16,0(sp)
    e074:	dec00304 	addi	sp,sp,12
    e078:	f800283a 	ret

0000e07c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e07c:	defffb04 	addi	sp,sp,-20
    e080:	dfc00415 	stw	ra,16(sp)
    e084:	df000315 	stw	fp,12(sp)
    e088:	df000304 	addi	fp,sp,12
    e08c:	e13ffd15 	stw	r4,-12(fp)
    e090:	e17ffe15 	stw	r5,-8(fp)
    e094:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e098:	01000074 	movhi	r4,1
    e09c:	213a3004 	addi	r4,r4,-5952
    e0a0:	e17ffd17 	ldw	r5,-12(fp)
    e0a4:	01800044 	movi	r6,1
    e0a8:	01c07fc4 	movi	r7,511
    e0ac:	000df9c0 	call	df9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e0b0:	01000074 	movhi	r4,1
    e0b4:	213a2d04 	addi	r4,r4,-5964
    e0b8:	e17ffe17 	ldw	r5,-8(fp)
    e0bc:	000d883a 	mov	r6,zero
    e0c0:	01c07fc4 	movi	r7,511
    e0c4:	000df9c0 	call	df9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e0c8:	01000074 	movhi	r4,1
    e0cc:	213a3304 	addi	r4,r4,-5940
    e0d0:	e17fff17 	ldw	r5,-4(fp)
    e0d4:	01800044 	movi	r6,1
    e0d8:	01c07fc4 	movi	r7,511
    e0dc:	000df9c0 	call	df9c <alt_open_fd>
}  
    e0e0:	e037883a 	mov	sp,fp
    e0e4:	dfc00117 	ldw	ra,4(sp)
    e0e8:	df000017 	ldw	fp,0(sp)
    e0ec:	dec00204 	addi	sp,sp,8
    e0f0:	f800283a 	ret

0000e0f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    e0f4:	defffa04 	addi	sp,sp,-24
    e0f8:	df000515 	stw	fp,20(sp)
    e0fc:	df000504 	addi	fp,sp,20
    e100:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e104:	0005303a 	rdctl	r2,status
    e108:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e10c:	e0fffc17 	ldw	r3,-16(fp)
    e110:	00bfff84 	movi	r2,-2
    e114:	1884703a 	and	r2,r3,r2
    e118:	1001703a 	wrctl	status,r2
  
  return context;
    e11c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    e120:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    e124:	e0bfff17 	ldw	r2,-4(fp)
    e128:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    e12c:	e0bffd17 	ldw	r2,-12(fp)
    e130:	10800017 	ldw	r2,0(r2)
    e134:	e0fffd17 	ldw	r3,-12(fp)
    e138:	18c00117 	ldw	r3,4(r3)
    e13c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    e140:	e0bffd17 	ldw	r2,-12(fp)
    e144:	10800117 	ldw	r2,4(r2)
    e148:	e0fffd17 	ldw	r3,-12(fp)
    e14c:	18c00017 	ldw	r3,0(r3)
    e150:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    e154:	e0bffd17 	ldw	r2,-12(fp)
    e158:	e0fffd17 	ldw	r3,-12(fp)
    e15c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    e160:	e0bffd17 	ldw	r2,-12(fp)
    e164:	e0fffd17 	ldw	r3,-12(fp)
    e168:	10c00015 	stw	r3,0(r2)
    e16c:	e0bffb17 	ldw	r2,-20(fp)
    e170:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e174:	e0bffe17 	ldw	r2,-8(fp)
    e178:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    e17c:	e037883a 	mov	sp,fp
    e180:	df000017 	ldw	fp,0(sp)
    e184:	dec00104 	addi	sp,sp,4
    e188:	f800283a 	ret

0000e18c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    e18c:	defffb04 	addi	sp,sp,-20
    e190:	dfc00415 	stw	ra,16(sp)
    e194:	df000315 	stw	fp,12(sp)
    e198:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    e19c:	d0a01717 	ldw	r2,-32676(gp)
    e1a0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    e1a4:	d0a0fc17 	ldw	r2,-31760(gp)
    e1a8:	10800044 	addi	r2,r2,1
    e1ac:	d0a0fc15 	stw	r2,-31760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e1b0:	00002e06 	br	e26c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    e1b4:	e0bffd17 	ldw	r2,-12(fp)
    e1b8:	10800017 	ldw	r2,0(r2)
    e1bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    e1c0:	e0bffd17 	ldw	r2,-12(fp)
    e1c4:	10800403 	ldbu	r2,16(r2)
    e1c8:	10803fcc 	andi	r2,r2,255
    e1cc:	10000426 	beq	r2,zero,e1e0 <alt_tick+0x54>
    e1d0:	d0a0fc17 	ldw	r2,-31760(gp)
    e1d4:	1000021e 	bne	r2,zero,e1e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    e1d8:	e0bffd17 	ldw	r2,-12(fp)
    e1dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    e1e0:	e0bffd17 	ldw	r2,-12(fp)
    e1e4:	10800217 	ldw	r2,8(r2)
    e1e8:	d0e0fc17 	ldw	r3,-31760(gp)
    e1ec:	18801d36 	bltu	r3,r2,e264 <alt_tick+0xd8>
    e1f0:	e0bffd17 	ldw	r2,-12(fp)
    e1f4:	10800403 	ldbu	r2,16(r2)
    e1f8:	10803fcc 	andi	r2,r2,255
    e1fc:	1000191e 	bne	r2,zero,e264 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    e200:	e0bffd17 	ldw	r2,-12(fp)
    e204:	10c00317 	ldw	r3,12(r2)
    e208:	e0bffd17 	ldw	r2,-12(fp)
    e20c:	10800517 	ldw	r2,20(r2)
    e210:	1009883a 	mov	r4,r2
    e214:	183ee83a 	callr	r3
    e218:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    e21c:	e0bfff17 	ldw	r2,-4(fp)
    e220:	1000031e 	bne	r2,zero,e230 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    e224:	e13ffd17 	ldw	r4,-12(fp)
    e228:	000e0f40 	call	e0f4 <alt_alarm_stop>
    e22c:	00000d06 	br	e264 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    e230:	e0bffd17 	ldw	r2,-12(fp)
    e234:	10c00217 	ldw	r3,8(r2)
    e238:	e0bfff17 	ldw	r2,-4(fp)
    e23c:	1887883a 	add	r3,r3,r2
    e240:	e0bffd17 	ldw	r2,-12(fp)
    e244:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    e248:	e0bffd17 	ldw	r2,-12(fp)
    e24c:	10c00217 	ldw	r3,8(r2)
    e250:	d0a0fc17 	ldw	r2,-31760(gp)
    e254:	1880032e 	bgeu	r3,r2,e264 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    e258:	e0bffd17 	ldw	r2,-12(fp)
    e25c:	00c00044 	movi	r3,1
    e260:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    e264:	e0bffe17 	ldw	r2,-8(fp)
    e268:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e26c:	e0fffd17 	ldw	r3,-12(fp)
    e270:	d0a01704 	addi	r2,gp,-32676
    e274:	18bfcf1e 	bne	r3,r2,e1b4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    e278:	0001883a 	nop
}
    e27c:	e037883a 	mov	sp,fp
    e280:	dfc00117 	ldw	ra,4(sp)
    e284:	df000017 	ldw	fp,0(sp)
    e288:	dec00204 	addi	sp,sp,8
    e28c:	f800283a 	ret

0000e290 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    e290:	deffff04 	addi	sp,sp,-4
    e294:	df000015 	stw	fp,0(sp)
    e298:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    e29c:	000170fa 	wrctl	ienable,zero
}
    e2a0:	e037883a 	mov	sp,fp
    e2a4:	df000017 	ldw	fp,0(sp)
    e2a8:	dec00104 	addi	sp,sp,4
    e2ac:	f800283a 	ret

0000e2b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    e2b0:	defffb04 	addi	sp,sp,-20
    e2b4:	df000415 	stw	fp,16(sp)
    e2b8:	df000404 	addi	fp,sp,16
    e2bc:	e13ffe15 	stw	r4,-8(fp)
    e2c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    e2c4:	e0bfff17 	ldw	r2,-4(fp)
    e2c8:	10820070 	cmpltui	r2,r2,2049
    e2cc:	1000021e 	bne	r2,zero,e2d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    e2d0:	00820004 	movi	r2,2048
    e2d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    e2d8:	e0fffe17 	ldw	r3,-8(fp)
    e2dc:	e0bfff17 	ldw	r2,-4(fp)
    e2e0:	1885883a 	add	r2,r3,r2
    e2e4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e2e8:	e0bffe17 	ldw	r2,-8(fp)
    e2ec:	e0bffc15 	stw	r2,-16(fp)
    e2f0:	00000506 	br	e308 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    e2f4:	e0bffc17 	ldw	r2,-16(fp)
    e2f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e2fc:	e0bffc17 	ldw	r2,-16(fp)
    e300:	10800804 	addi	r2,r2,32
    e304:	e0bffc15 	stw	r2,-16(fp)
    e308:	e0fffc17 	ldw	r3,-16(fp)
    e30c:	e0bffd17 	ldw	r2,-12(fp)
    e310:	18bff836 	bltu	r3,r2,e2f4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    e314:	e0bffe17 	ldw	r2,-8(fp)
    e318:	108007cc 	andi	r2,r2,31
    e31c:	10000226 	beq	r2,zero,e328 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    e320:	e0bffc17 	ldw	r2,-16(fp)
    e324:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e328:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e32c:	e037883a 	mov	sp,fp
    e330:	df000017 	ldw	fp,0(sp)
    e334:	dec00104 	addi	sp,sp,4
    e338:	f800283a 	ret

0000e33c <exit>:
    e33c:	defffe04 	addi	sp,sp,-8
    e340:	000b883a 	mov	r5,zero
    e344:	dc000015 	stw	r16,0(sp)
    e348:	dfc00115 	stw	ra,4(sp)
    e34c:	2021883a 	mov	r16,r4
    e350:	000e3a40 	call	e3a4 <__call_exitprocs>
    e354:	8009883a 	mov	r4,r16
    e358:	000e57c0 	call	e57c <_exit>

0000e35c <memcmp>:
    e35c:	30000d26 	beq	r6,zero,e394 <memcmp+0x38>
    e360:	20c00003 	ldbu	r3,0(r4)
    e364:	28800003 	ldbu	r2,0(r5)
    e368:	18800c1e 	bne	r3,r2,e39c <memcmp+0x40>
    e36c:	31bfff84 	addi	r6,r6,-2
    e370:	01ffffc4 	movi	r7,-1
    e374:	00000406 	br	e388 <memcmp+0x2c>
    e378:	20c00003 	ldbu	r3,0(r4)
    e37c:	28800003 	ldbu	r2,0(r5)
    e380:	31bfffc4 	addi	r6,r6,-1
    e384:	1880051e 	bne	r3,r2,e39c <memcmp+0x40>
    e388:	21000044 	addi	r4,r4,1
    e38c:	29400044 	addi	r5,r5,1
    e390:	31fff91e 	bne	r6,r7,e378 <memcmp+0x1c>
    e394:	0005883a 	mov	r2,zero
    e398:	f800283a 	ret
    e39c:	1885c83a 	sub	r2,r3,r2
    e3a0:	f800283a 	ret

0000e3a4 <__call_exitprocs>:
    e3a4:	00800074 	movhi	r2,1
    e3a8:	10ba9b04 	addi	r2,r2,-5524
    e3ac:	10800017 	ldw	r2,0(r2)
    e3b0:	defff204 	addi	sp,sp,-56
    e3b4:	df000c15 	stw	fp,48(sp)
    e3b8:	d8800015 	stw	r2,0(sp)
    e3bc:	10800c04 	addi	r2,r2,48
    e3c0:	dd400915 	stw	r21,36(sp)
    e3c4:	dfc00d15 	stw	ra,52(sp)
    e3c8:	ddc00b15 	stw	r23,44(sp)
    e3cc:	dd800a15 	stw	r22,40(sp)
    e3d0:	dd000815 	stw	r20,32(sp)
    e3d4:	dcc00715 	stw	r19,28(sp)
    e3d8:	dc800615 	stw	r18,24(sp)
    e3dc:	dc400515 	stw	r17,20(sp)
    e3e0:	dc000415 	stw	r16,16(sp)
    e3e4:	d9000115 	stw	r4,4(sp)
    e3e8:	2839883a 	mov	fp,r5
    e3ec:	d8800215 	stw	r2,8(sp)
    e3f0:	057fffc4 	movi	r21,-1
    e3f4:	d8800017 	ldw	r2,0(sp)
    e3f8:	dd800217 	ldw	r22,8(sp)
    e3fc:	15c00c17 	ldw	r23,48(r2)
    e400:	b8001b26 	beq	r23,zero,e470 <__call_exitprocs+0xcc>
    e404:	b9000117 	ldw	r4,4(r23)
    e408:	bd002217 	ldw	r20,136(r23)
    e40c:	243fffc4 	addi	r16,r4,-1
    e410:	80001416 	blt	r16,zero,e464 <__call_exitprocs+0xc0>
    e414:	244007c4 	addi	r17,r4,31
    e418:	21000044 	addi	r4,r4,1
    e41c:	8c63883a 	add	r17,r17,r17
    e420:	8427883a 	add	r19,r16,r16
    e424:	2109883a 	add	r4,r4,r4
    e428:	8c63883a 	add	r17,r17,r17
    e42c:	9ce7883a 	add	r19,r19,r19
    e430:	2109883a 	add	r4,r4,r4
    e434:	a463883a 	add	r17,r20,r17
    e438:	a4e7883a 	add	r19,r20,r19
    e43c:	b925883a 	add	r18,r23,r4
    e440:	e0001726 	beq	fp,zero,e4a0 <__call_exitprocs+0xfc>
    e444:	a0000226 	beq	r20,zero,e450 <__call_exitprocs+0xac>
    e448:	89400017 	ldw	r5,0(r17)
    e44c:	2f001426 	beq	r5,fp,e4a0 <__call_exitprocs+0xfc>
    e450:	843fffc4 	addi	r16,r16,-1
    e454:	8c7fff04 	addi	r17,r17,-4
    e458:	9cffff04 	addi	r19,r19,-4
    e45c:	94bfff04 	addi	r18,r18,-4
    e460:	857ff71e 	bne	r16,r21,e440 <__call_exitprocs+0x9c>
    e464:	00800034 	movhi	r2,0
    e468:	10800004 	addi	r2,r2,0
    e46c:	1000311e 	bne	r2,zero,e534 <__call_exitprocs+0x190>
    e470:	dfc00d17 	ldw	ra,52(sp)
    e474:	df000c17 	ldw	fp,48(sp)
    e478:	ddc00b17 	ldw	r23,44(sp)
    e47c:	dd800a17 	ldw	r22,40(sp)
    e480:	dd400917 	ldw	r21,36(sp)
    e484:	dd000817 	ldw	r20,32(sp)
    e488:	dcc00717 	ldw	r19,28(sp)
    e48c:	dc800617 	ldw	r18,24(sp)
    e490:	dc400517 	ldw	r17,20(sp)
    e494:	dc000417 	ldw	r16,16(sp)
    e498:	dec00e04 	addi	sp,sp,56
    e49c:	f800283a 	ret
    e4a0:	b9000117 	ldw	r4,4(r23)
    e4a4:	92000017 	ldw	r8,0(r18)
    e4a8:	213fffc4 	addi	r4,r4,-1
    e4ac:	24001a26 	beq	r4,r16,e518 <__call_exitprocs+0x174>
    e4b0:	90000015 	stw	zero,0(r18)
    e4b4:	403fe626 	beq	r8,zero,e450 <__call_exitprocs+0xac>
    e4b8:	ba400117 	ldw	r9,4(r23)
    e4bc:	a0001226 	beq	r20,zero,e508 <__call_exitprocs+0x164>
    e4c0:	00800044 	movi	r2,1
    e4c4:	1408983a 	sll	r4,r2,r16
    e4c8:	a1404017 	ldw	r5,256(r20)
    e4cc:	214a703a 	and	r5,r4,r5
    e4d0:	28000d26 	beq	r5,zero,e508 <__call_exitprocs+0x164>
    e4d4:	a1404117 	ldw	r5,260(r20)
    e4d8:	2148703a 	and	r4,r4,r5
    e4dc:	2000101e 	bne	r4,zero,e520 <__call_exitprocs+0x17c>
    e4e0:	99400017 	ldw	r5,0(r19)
    e4e4:	d9000117 	ldw	r4,4(sp)
    e4e8:	da400315 	stw	r9,12(sp)
    e4ec:	403ee83a 	callr	r8
    e4f0:	da400317 	ldw	r9,12(sp)
    e4f4:	b9000117 	ldw	r4,4(r23)
    e4f8:	227fbe1e 	bne	r4,r9,e3f4 <__call_exitprocs+0x50>
    e4fc:	b1000017 	ldw	r4,0(r22)
    e500:	25ffd326 	beq	r4,r23,e450 <__call_exitprocs+0xac>
    e504:	003fbb06 	br	e3f4 <__call_exitprocs+0x50>
    e508:	da400315 	stw	r9,12(sp)
    e50c:	403ee83a 	callr	r8
    e510:	da400317 	ldw	r9,12(sp)
    e514:	003ff706 	br	e4f4 <__call_exitprocs+0x150>
    e518:	bc000115 	stw	r16,4(r23)
    e51c:	003fe506 	br	e4b4 <__call_exitprocs+0x110>
    e520:	99000017 	ldw	r4,0(r19)
    e524:	da400315 	stw	r9,12(sp)
    e528:	403ee83a 	callr	r8
    e52c:	da400317 	ldw	r9,12(sp)
    e530:	003ff006 	br	e4f4 <__call_exitprocs+0x150>
    e534:	b9000117 	ldw	r4,4(r23)
    e538:	20000e1e 	bne	r4,zero,e574 <__call_exitprocs+0x1d0>
    e53c:	b9000017 	ldw	r4,0(r23)
    e540:	20000826 	beq	r4,zero,e564 <__call_exitprocs+0x1c0>
    e544:	b1000015 	stw	r4,0(r22)
    e548:	a0000226 	beq	r20,zero,e554 <__call_exitprocs+0x1b0>
    e54c:	a009883a 	mov	r4,r20
    e550:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    e554:	b809883a 	mov	r4,r23
    e558:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    e55c:	b5c00017 	ldw	r23,0(r22)
    e560:	003fa706 	br	e400 <__call_exitprocs+0x5c>
    e564:	0007883a 	mov	r3,zero
    e568:	b82d883a 	mov	r22,r23
    e56c:	182f883a 	mov	r23,r3
    e570:	003fa306 	br	e400 <__call_exitprocs+0x5c>
    e574:	b8c00017 	ldw	r3,0(r23)
    e578:	003ffb06 	br	e568 <__call_exitprocs+0x1c4>

0000e57c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e57c:	defffc04 	addi	sp,sp,-16
    e580:	df000315 	stw	fp,12(sp)
    e584:	df000304 	addi	fp,sp,12
    e588:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    e58c:	0001883a 	nop
    e590:	e0bfff17 	ldw	r2,-4(fp)
    e594:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    e598:	e0bffd17 	ldw	r2,-12(fp)
    e59c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e5a0:	e0bffe17 	ldw	r2,-8(fp)
    e5a4:	10000226 	beq	r2,zero,e5b0 <_exit+0x34>
    ALT_SIM_FAIL();
    e5a8:	002af070 	cmpltui	zero,zero,43969
    e5ac:	00000106 	br	e5b4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    e5b0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e5b4:	003fff06 	br	e5b4 <_exit+0x38>
